SqlTaskData
""
"DELETE 
    FROM dbo.BaseWeeklyMeasure
    WHERE MeasureName = ?
        AND FiscalWeekEndDate = ?
        AND DataScenarioName = 'Actual';
SELECT @@ROWCOUNT AS DeleteCount;"
"DELETE 
    FROM dbo.BaseWeeklyMeasure
    WHERE MeasureName = ?
        AND FiscalWeekEndDate = ?
        AND DataScenarioName = 'LY';
SELECT ? + @@ROWCOUNT AS DeleteCount;"
"Execute spEndAuditLog ?,?,?,?,?,?,?;"
"Execute spBeginAuditLog ? OUTPUT, ?, ?;"
"DECLARE @LastProcessFiscalWeekNumber int, @LastProcessDate datetime;
WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastProcessFiscalWeekNumber = ja.BatchSplitByValue, @LastProcessDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId;
SELECT ISNULL(@LastProcessFiscalWeekNumber, 200001) AS LastProcessFiscalWeekNumber, ISNULL(@LastProcessDate, '1900-01-01') AS LastProcessDate"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactARBalanceSnapshot(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.AsOfDateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactARBalanceSnapshot(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.AsOfDateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"Execute spEndAuditLog ?, ?, ?, ?, ?;"
"SELECT SUM(SourceCount) AS SourceCount, SUM(InsertCount) AS InsertCount, SUM(UpdateCount) AS UpdateCount, SUM(DeleteCount) AS DeleteCount
FROM AuditLog(NOLOCK)
WHERE ExecutionID = ?"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLaborHour(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLaborHour(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactFTESnapshot(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactFTESnapshot(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]

   ORDER BY DataScenarioFiscalWeekNumber
"
"DELETE 
    FROM dbo.BaseWeeklyMeasure
    WHERE MeasureName = ?
        AND FiscalWeekEndDate = ?
        AND DataScenarioName = 'Plan';
SELECT @@ROWCOUNT AS DeleteCount;"
"DELETE 
    FROM dbo.BaseWeeklyMeasure
    WHERE MeasureName = ?
        AND FiscalWeekEndDate = ?
        AND DataScenarioName = 'Target'
SELECT @@ROWCOUNT AS DeleteCount;"
"   SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactNetRevenue(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactNetRevenue(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]


  Union

  SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLaborHour(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLaborHour(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber
"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactNetRevenue(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactNetRevenue(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]


  Union

  SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLaborSalary(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLaborSalary(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"DECLARE @LastProcessFiscalWeekNumber int, @LastProcessDate datetime;
WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastProcessFiscalWeekNumber = ja.BatchSplitByValue, @LastProcessDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId;
SELECT ISNULL(@LastProcessFiscalWeekNumber, 201101) AS LastProcessFiscalWeekNumber, ISNULL(@LastProcessDate, '1900-01-01') AS LastProcessDate"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactNetRevenue(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactNetRevenue(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactFTESnapshot(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactFTESnapshot(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]

   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLeadEvent(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLeadEvent(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]

UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactFTESnapshot(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactFTESnapshot(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]

   ORDER BY DataScenarioFiscalWeekNumber
"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000100%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 2 
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000100%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 2 
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
  Union
  SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9300.000300%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 2
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9300.000300%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 2
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"DELETE 
    FROM dbo.BaseWeeklyMeasure
    WHERE MeasureName = ?
        AND FiscalWeekEndDate = ?
        AND DataScenarioName = 'Target';
SELECT @@ROWCOUNT AS DeleteCount;"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000100%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 2 
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000100%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 2 
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION

   SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLaborHour(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLaborHour(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"
 SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 1
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 1
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   Union
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9300.000300%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 1
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9300.000300%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 1
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber
"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 1
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 1
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   Union
   SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000100%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 2 
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000100%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 2 
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM dbo.FactFTESnapshot(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM dbo.FactFTESnapshot(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]

   UNION 
   SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM CMS_Staging.dbo.enrlScheduleDay AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.EffectiveDate = d.FullDate
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].StgModifiedDate > ?
   AND f.EffectiveDate BETWEEN '2011-01-01' AND GETDATE()
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
     ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactFTESnapshot(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactFTESnapshot(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   Union
   SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactCenterStatSnapshot (NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.[FiscalWeekEndDateKey] = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   AND d.FiscalYearNumber >= 2011
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]

UNION

SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactCenterStatSnapshot (NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.[FiscalWeekEndDateKey] = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
    AND d.FiscalYearNumber >= 2011
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000100%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 2 
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000100%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 2 
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
  Union

  SELECT	  d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
				, d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
				, ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
				, ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
FROM FactCenterStatSnapshot (NOLOCK) AS f
JOIN DimDate(NOLOCK) AS d
ON f.[FiscalWeekEndDateKey] = d.DateKey
LEFT JOIN DimDate(NOLOCK) AS d_nyr 
ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
WHERE [f].[EDWCreatedDate] > ?
GROUP BY d.[FiscalWeekNumber]
				  , d.[FiscalWeekEndDate]
				  , d.[FiscalYearEndDate]
				  , d.[FiscalWeekOfYearNumber]
				  , d_nyr.[FiscalWeekNumber]
				  , d_nyr.[FiscalWeekEndDate]

UNION

SELECT   d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
				, d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
				, ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
				, ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
FROM FactCenterStatSnapshot (NOLOCK) AS f
JOIN DimDate(NOLOCK) AS d
	ON f.[FiscalWeekEndDateKey] = d.DateKey
LEFT JOIN DimDate(NOLOCK) AS d_nyr 
	ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
	AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
	AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
WHERE [d].[FiscalWeekNumber] > ?
GROUP BY d.[FiscalWeekNumber]
				  , d.[FiscalWeekEndDate]
				  , d.[FiscalYearEndDate]
				  , d.[FiscalWeekOfYearNumber]
				  , d_nyr.[FiscalWeekNumber]
				  , d_nyr.[FiscalWeekEndDate]
ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLeadEvent(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLeadEvent(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]

UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactFTESnapshot(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactFTESnapshot(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]

   ORDER BY DataScenarioFiscalWeekNumber"
EXEC [dbo].[SpPopulateNSESupport]   @DebugMode =1
"DELETE 
    FROM dbo.BaseWeeklyMeasure
    WHERE MeasureName = ?
        AND FiscalWeekEndDate = ?
        AND DataScenarioName = 'LY';
SELECT ? + @@ROWCOUNT AS DeleteCount; "
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactCenterStatSnapshot (NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.[FiscalWeekEndDateKey] = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   AND d.FiscalYearNumber >= 2011
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]

UNION

SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactCenterStatSnapshot (NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.[FiscalWeekEndDateKey] = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
    AND d.FiscalYearNumber >= 2011
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT	  d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
				, d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
				, ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
				, ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(WEEK, DATEDIFF(WEEK, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
FROM FactGLBalancePlanAllocation (NOLOCK) AS f
JOIN DimDate(NOLOCK) AS d
ON f.[DateKey] = d.DateKey
LEFT JOIN DimDate(NOLOCK) AS d_nyr 
ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
WHERE [f].[EDWCreatedDate] > ?
GROUP BY d.[FiscalWeekNumber]
				  , d.[FiscalWeekEndDate]
				  , d.[FiscalYearEndDate]
				  , d.[FiscalWeekOfYearNumber]
				  , d_nyr.[FiscalWeekNumber]
				  , d_nyr.[FiscalWeekEndDate]


UNION

SELECT   d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
				, d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
				, ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
				, ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
FROM FactGLBalancePlanAllocation (NOLOCK) AS f
JOIN DimDate(NOLOCK) AS d
	ON f.[DateKey] = d.DateKey
LEFT JOIN DimDate(NOLOCK) AS d_nyr 
	ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
	AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
	AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
WHERE [d].[FiscalWeekNumber] > ?
GROUP BY d.[FiscalWeekNumber]
				  , d.[FiscalWeekEndDate]
				  , d.[FiscalYearEndDate]
				  , d.[FiscalWeekOfYearNumber]
				  , d_nyr.[FiscalWeekNumber]
				  , d_nyr.[FiscalWeekEndDate]
ORDER BY DataScenarioFiscalWeekNumber"
"SELECT   d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
    , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
    , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
    , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(WEEK, DATEDIFF(WEEK, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
FROM FactGLBalancePlanAllocation (NOLOCK) AS f
JOIN DimDate(NOLOCK) AS d
ON f.[DateKey] = d.DateKey
LEFT JOIN DimDate(NOLOCK) AS d_nyr 
ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
WHERE [f].[EDWCreatedDate] > ?
GROUP BY d.[FiscalWeekNumber]
      , d.[FiscalWeekEndDate]
      , d.[FiscalYearEndDate]
      , d.[FiscalWeekOfYearNumber]
      , d_nyr.[FiscalWeekNumber]
      , d_nyr.[FiscalWeekEndDate]


UNION

SELECT   d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
    , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
    , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
    , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
FROM FactGLBalancePlanAllocation (NOLOCK) AS f
JOIN DimDate(NOLOCK) AS d
 ON f.[DateKey] = d.DateKey
LEFT JOIN DimDate(NOLOCK) AS d_nyr 
 ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
 AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
 AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
WHERE [d].[FiscalWeekNumber] > ?
GROUP BY d.[FiscalWeekNumber]
      , d.[FiscalWeekEndDate]
      , d.[FiscalYearEndDate]
      , d.[FiscalWeekOfYearNumber]
      , d_nyr.[FiscalWeekNumber]
      , d_nyr.[FiscalWeekEndDate]
ORDER BY DataScenarioFiscalWeekNumber"
"DELETE FROM DW_Base.dbo.BaseDailyMeasureFTE WHERE FiscalWeekEndDate =?


Select @@Rowcount as DC"
"DECLARE @QueryTable TABLE
(
    SQLQUERY VARCHAR(MAX) NULL
);

DECLARE @Measurename VARCHAR(100);
DECLARE csr_fact_rabalance_fisc_weekend CURSOR FOR
SELECT MeasureName
FROM GL_Staging..MartASALookup
WHERE GLMetricTypeCode = 'Stat';

OPEN csr_fact_rabalance_fisc_weekend;
FETCH NEXT FROM csr_fact_rabalance_fisc_weekend
INTO @Measurename;
WHILE @@FETCH_STATUS = 0
BEGIN

 
    IF
    (
        SELECT TuitionType
        FROM GL_Staging..MartASALookup
        WHERE MeasureName = @Measurename
    ) NOT LIKE '%[A-Z]%'
    BEGIN
        DECLARE @Field AS TABLE
        (
            FieldPath VARCHAR(MAX) NOT NULL
        );
		DELETE FROM @Field
        INSERT INTO @Field
        (
            FieldPath
        )
        (SELECT FieldPath
         FROM GL_Staging.dbo.MartASALookup
         WHERE MeasureName = @Measurename);
        DECLARE @SQL NVARCHAR(MAX);

        SET @SQL
            = N'SELECT 
       DD.FullDate,
	   DD.FiscalWeekEndDate,
       Std.StudentID,
       Spn.SponsorID,
	   COALESCE(Spn.PartnerID, -1)PartnerID,
       Tsp.TuitionAssistanceProviderID,
       CC.CostCenterNumber, ' + '''' +
	  @MeasureName +'''' + '  AS Measurename,
       Acct.AccountSubaccountID,
       Tr.TierID,
       Pgm.ProgramID,
       SS.SessionID,
       Schd.ScheduleWeekName,
       Lcs.LifecycleStatusName,
       SUM(FTE.FTE) AS Value1,
       FTE.SourceSystem AS SourceSystem,
      Std.CSSStudentNumber ,
      Spn.CSSCenterNumber  ,
      Spn.CSSFamilyNumber  ,
      Tr.CSSTierNumber	   ,
      Pgm.ProgramName	   ,
      SS.SessionName
FROM dbo.FactFTESnapshot FTE
    INNER JOIN dbo.DimDate DD
        ON FTE.DateKey = DD.DateKey
    INNER JOIN dbo.DimStudent Std
        ON FTE.StudentKey = Std.StudentKey
    INNER JOIN dbo.DimSponsor Spn
        ON FTE.SponsorKey = Spn.SponsorKey
    INNER JOIN dbo.DimTuitionAssistanceProvider Tsp
        ON FTE.TuitionAssistanceProviderKey = Tsp.TuitionAssistanceProviderKey
    INNER JOIN dbo.DimCostCenter CC
        ON FTE.CostCenterKey = CC.CostCenterKey
    INNER JOIN dbo.DimAccountSubaccount Acct
        ON FTE.AccountSubaccountKey = Acct.AccountSubaccountKey
    INNER JOIN dbo.DimTier Tr
        ON FTE.TierKey = Tr.TierKey
    INNER JOIN dbo.DimProgram Pgm
        ON FTE.ProgramKey = Pgm.ProgramKey
    INNER JOIN dbo.DimSession SS
        ON FTE.SessionKey = SS.SessionKey
    INNER JOIN dbo.DimScheduleWeek Schd
        ON FTE.ScheduleWeekKey = Schd.ScheduleWeekKey
    INNER JOIN dbo.DimLifecycleStatus Lcs
        ON FTE.LifecycleStatusKey = Lcs.LifecycleStatusKey' + N' WHERE DD.FiscalWeekEndDate IN ( '
             +  '''' + CONVERT(VARCHAR, ?, 23) + '''' +' )'
                 + N' AND Acct.AccountSubaccountKey IN (' + N'SELECT AccountSubaccountKey '
              + N' FROM model.vAccountSubAccount '
              + ISNULL(
                          NCHAR(10) + N'WHERE '
                          + STUFF(
                            (
                                SELECT NCHAR(10) + N'  OR ' + (f.FieldPath)
                                FROM @Field f
                                FOR XML PATH(N'')
                            ),
                            1,
                            6,
                            N''
                                 ),
                          N''
                      ) + N')'
              + +N'
GROUP BY DD.FullDate,
         DD.FiscalWeekEndDate,
		 Std.StudentID,
         Spn.SponsorID,
		 Spn.PartnerID,
         Tsp.TuitionAssistanceProviderID,
         CC.CostCenterNumber,
         Acct.AccountSubaccountID,
         Tr.TierID,
         Pgm.ProgramID,
         SS.SessionID,
         Schd.ScheduleWeekName,
         Lcs.LifecycleStatusName,
         FTE.SourceSystem,
       Std.CSSStudentNumber,
         Spn.CSSCenterNumber,
         Spn.CSSFamilyNumber,
         Tr.CSSTierNumber,
         Pgm.ProgramName,
         SS.SessionName';
        INSERT INTO @QueryTable
        (
            SQLQUERY
        )
        SELECT CAST(@SQL AS VARCHAR(MAX));
    END;

    ELSE
    BEGIN
        DECLARE @Field2 AS TABLE
        (
            FieldPath VARCHAR(MAX) NOT NULL,
            TuitionType VARCHAR(50) NULL
        );
		DELETE FROM @Field2
        INSERT INTO @Field2
        (
            FieldPath,
            TuitionType
        )
        (SELECT FieldPath,
                TuitionType
         FROM GL_Staging.dbo.MartASALookup
         WHERE MeasureName = @Measurename);


        DECLARE @SQL2 NVARCHAR(MAX);

        SET @SQL2
            = N'SELECT 
       DD.FullDate,
	   DD.FiscalWeekEndDate,
       Std.StudentID,
       Spn.SponsorID,
	   COALESCE(Spn.PartnerID, -1)PartnerID,
       Tsp.TuitionAssistanceProviderID,
       CC.CostCenterNumber, ' + '''' +
	  @MeasureName +'''' + '  AS Measurename,
       Acct.AccountSubaccountID,
       Tr.TierID,
       Pgm.ProgramID,
       SS.SessionID,
       Schd.ScheduleWeekName,
       Lcs.LifecycleStatusName,
       SUM(FTE.FTE) AS Value1,
       FTE.SourceSystem AS SourceSystem,
      Std.CSSStudentNumber ,
      Spn.CSSCenterNumber  ,
      Spn.CSSFamilyNumber  ,
      Tr.CSSTierNumber	   ,
      Pgm.ProgramName	   ,
      SS.SessionName
FROM dbo.FactFTESnapshot FTE
    INNER JOIN dbo.DimDate DD
        ON FTE.DateKey = DD.DateKey
    INNER JOIN dbo.DimStudent Std
        ON FTE.StudentKey = Std.StudentKey
    INNER JOIN dbo.DimSponsor Spn
        ON FTE.SponsorKey = Spn.SponsorKey
    INNER JOIN dbo.DimTuitionAssistanceProvider Tsp
        ON FTE.TuitionAssistanceProviderKey = Tsp.TuitionAssistanceProviderKey
    INNER JOIN dbo.DimCostCenter CC
        ON FTE.CostCenterKey = CC.CostCenterKey
    INNER JOIN dbo.DimAccountSubaccount Acct
        ON FTE.AccountSubaccountKey = Acct.AccountSubaccountKey
    INNER JOIN dbo.DimTier Tr
        ON FTE.TierKey = Tr.TierKey
    INNER JOIN dbo.DimProgram Pgm
        ON FTE.ProgramKey = Pgm.ProgramKey
    INNER JOIN dbo.DimSession SS
        ON FTE.SessionKey = SS.SessionKey
    INNER JOIN dbo.DimScheduleWeek Schd
        ON FTE.ScheduleWeekKey = Schd.ScheduleWeekKey
    INNER JOIN dbo.DimLifecycleStatus Lcs
        ON FTE.LifecycleStatusKey = Lcs.LifecycleStatusKey' + N' WHERE DD.FiscalWeekEndDate IN ( '
             +  '''' + CONVERT(VARCHAR, ?, 23) + '''' +' )' + N' AND Acct.AccountSubaccountKey IN (' + N'SELECT AccountSubaccountKey '
              + N' FROM model.vAccountSubAccount '
              + ISNULL(
                          NCHAR(10) + N'WHERE '
                          + STUFF(
                            (
                                SELECT NCHAR(10) + N'  OR ' + (f.FieldPath)
                                FROM @Field2 f
                                FOR XML PATH(N'')
                            ),
                            1,
                            6,
                            N''
                                 ),
                          N''
                      ) + +N'AND' + N'[Tuition ' + N'Type]= ' + N''''
              + STUFF(
                (
                    SELECT ',' + TuitionType FROM @Field2 FOR XML PATH('')
                ),
                1,
                1,
                ''
                     ) + N'''' + N')'
              + N'
GROUP BY DD.FullDate,
		 DD.FiscalWeekEndDate,
         Std.StudentID,
         Spn.SponsorID,
		 Spn.PartnerID,
         Tsp.TuitionAssistanceProviderID,
         CC.CostCenterNumber,
         Acct.AccountSubaccountID,
         Tr.TierID,
         Pgm.ProgramID,
         SS.SessionID,
         Schd.ScheduleWeekName,
         Lcs.LifecycleStatusName,
         FTE.SourceSystem,
         Std.CSSStudentNumber,
         Spn.CSSCenterNumber,
         Spn.CSSFamilyNumber,
         Tr.CSSTierNumber,
         Pgm.ProgramName,
         SS.SessionName';
        INSERT INTO @QueryTable
        (
            SQLQUERY
        )
        SELECT CAST(@SQL2 AS VARCHAR(MAX));

    END;

    FETCH NEXT FROM csr_fact_rabalance_fisc_weekend
    INTO @Measurename;
END;

CLOSE csr_fact_rabalance_fisc_weekend;
DEALLOCATE csr_fact_rabalance_fisc_weekend;

SELECT CAST( Replace ((SELECT STUFF(( SELECT  N' UNION ' + (SQLQUERY) FROM @QueryTable FOR XML PATH(N'')),1,6,N'')) , '&#x0D;', '') AS VARCHAR(MAX) )"
"DECLARE @LastProcessFiscalWeekNumber int, @LastProcessDate DATETIME, @LastsuccessfulDate DATETIME;
IF (SELECT Top 1 AuditId
           FROM dbo.AuditLog WHERE TaskName= ?) IS NULL 
BEGIN
    WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName ='NewFTE' )
      GROUP BY TaskName)
SELECT @LastProcessFiscalWeekNumber = ja.BatchSplitByValue, @LastProcessDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId;

WITH LatestJobAuditBySuccessfulRun AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastsuccessfulDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditBySuccessfulRun AS lja ON lja.LatestJobAudit = ja.AuditId;

SELECT ISNULL(@LastProcessFiscalWeekNumber, 201101) AS LastProcessFiscalWeekNumber, ISNULL(@LastProcessDate, '01-08-2011') AS LastProcessDate,
ISNULL(@LastsuccessfulDate, '01-08-2011') AS LastsuccessfulDate
END
ELSE 
BEGIN

WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastProcessFiscalWeekNumber = ja.BatchSplitByValue, @LastProcessDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId;

WITH LatestJobAuditBySuccessfulRun AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastsuccessfulDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditBySuccessfulRun AS lja ON lja.LatestJobAudit = ja.AuditId;

SELECT ISNULL(@LastProcessFiscalWeekNumber, 201101) AS LastProcessFiscalWeekNumber, ISNULL(@LastProcessDate, '01-08-2011') AS LastProcessDate,
ISNULL(@LastsuccessfulDate, '01-08-2011') AS LastsuccessfulDate;

END"
"SELECT d.[FiscalWeekStartDate] AS DataScenarioFiscalWeekStartDate,
       d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate,
    d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber

FROM dbo.FactFTESnapshot (NOLOCK) AS f
    JOIN dbo.DimDate (NOLOCK) AS d
        ON f.DateKey = d.DateKey
WHERE [f].[EDWCreatedDate] > ?
GROUP BY d.[FiscalWeekNumber],
         d.[FiscalWeekEndDate],
         d.[FiscalYearEndDate],
         d.[FiscalWeekOfYearNumber],
   d.[FiscalWeekStartDate]
UNION
SELECT [FiscalWeekStartDate] AS DataScenarioFiscalWeekStartDate,
       d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate,
    d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
FROM dbo.FactFTESnapshot (NOLOCK) AS f
    JOIN dbo.DimDate (NOLOCK) AS d
        ON f.DateKey = d.DateKey
WHERE [d].[FiscalWeekNumber] > ? AND [f].[EDWCreatedDate] > ?
GROUP BY d.[FiscalWeekNumber],
         d.[FiscalWeekEndDate],
         d.[FiscalYearEndDate],
         d.[FiscalWeekOfYearNumber],
   d.[FiscalWeekStartDate]
ORDER BY  DataScenarioFiscalWeekStartDate"
"DECLARE @QueryTable TABLE
(
    SQLQUERY VARCHAR(MAX) NULL
);

DECLARE @Measurename VARCHAR(100);
DECLARE csr_fact_rabalance_fisc_weekend CURSOR FOR
SELECT MeasureName
FROM GL_Staging..MartASALookup
WHERE MeasureName NOT IN
      (
          SELECT DISTINCT MeasureName FROM BING_EDW..SupportDailyMeasureFTE
      )
      AND GLMetricTypeCode = 'Stat';
--
-- Use cursor to loop through the values we have chosen to split this batch by
--
OPEN csr_fact_rabalance_fisc_weekend;
FETCH NEXT FROM csr_fact_rabalance_fisc_weekend
INTO @Measurename;
WHILE @@FETCH_STATUS = 0
BEGIN


    IF
    (
        SELECT TuitionType
        FROM GL_Staging..MartASALookup
        WHERE MeasureName = @Measurename
    ) NOT LIKE '%[A-Z]%'
    BEGIN
        DECLARE @Field AS TABLE
        (
            FieldPath VARCHAR(MAX) NOT NULL
        );
        DELETE FROM @Field;
        INSERT INTO @Field
        (
            FieldPath
        )
        (SELECT FieldPath
         FROM GL_Staging.dbo.MartASALookup
         WHERE MeasureName = @Measurename);
        DECLARE @SQL NVARCHAR(MAX);

        SET @SQL
            = N'SELECT 
       DD.FullDate,
	   DD.FiscalWeekEndDate,
       Std.StudentID,
       Spn.SponsorID,
	   COALESCE(Spn.PartnerID, -1) PartnerID,
       Tsp.TuitionAssistanceProviderID,
       CC.CostCenterNumber, ' + N'''' + @Measurename + N''''
              + N'  AS Measurename,
       Acct.AccountSubaccountID,
       Tr.TierID,
       Pgm.ProgramID,
       SS.SessionID,
       Schd.ScheduleWeekName,
       Lcs.LifecycleStatusName,
       SUM(FTE.FTE) AS Value1,
       FTE.SourceSystem AS SourceSystem,
      Std.CSSStudentNumber ,
      Spn.CSSCenterNumber  ,
      Spn.CSSFamilyNumber  ,
      Tr.CSSTierNumber	   ,
      Pgm.ProgramName	   ,
      SS.SessionName
FROM dbo.FactFTESnapshot FTE
    INNER JOIN dbo.DimDate DD
        ON FTE.DateKey = DD.DateKey
    INNER JOIN dbo.DimStudent Std
        ON FTE.StudentKey = Std.StudentKey
    INNER JOIN dbo.DimSponsor Spn
        ON FTE.SponsorKey = Spn.SponsorKey
    INNER JOIN dbo.DimTuitionAssistanceProvider Tsp
        ON FTE.TuitionAssistanceProviderKey = Tsp.TuitionAssistanceProviderKey
    INNER JOIN dbo.DimCostCenter CC
        ON FTE.CostCenterKey = CC.CostCenterKey
    INNER JOIN dbo.DimAccountSubaccount Acct
        ON FTE.AccountSubaccountKey = Acct.AccountSubaccountKey
    INNER JOIN dbo.DimTier Tr
        ON FTE.TierKey = Tr.TierKey
    INNER JOIN dbo.DimProgram Pgm
        ON FTE.ProgramKey = Pgm.ProgramKey
    INNER JOIN dbo.DimSession SS
        ON FTE.SessionKey = SS.SessionKey
    INNER JOIN dbo.DimScheduleWeek Schd
        ON FTE.ScheduleWeekKey = Schd.ScheduleWeekKey
    INNER JOIN dbo.DimLifecycleStatus Lcs
        ON FTE.LifecycleStatusKey = Lcs.LifecycleStatusKey' + N' WHERE DD.FiscalWeekEndDate IN ( ' + N''''
              + CONVERT(VARCHAR, ?, 23) + N'''' + N' )' + N' AND Acct.AccountSubaccountKey IN ('
              + N'SELECT AccountSubaccountKey ' + N' FROM model.vAccountSubAccount '
              + ISNULL(
                          NCHAR(10) + N'WHERE '
                          + STUFF(
                            (
                                SELECT NCHAR(10) + N'  OR ' + (f.FieldPath)
                                FROM @Field f
                                FOR XML PATH(N'')
                            ),
                            1,
                            6,
                            N''
                                 ),
                          N''
                      ) + N')'
              + +N'
GROUP BY DD.FullDate,
         DD.FiscalWeekEndDate,
		 Std.StudentID,
         Spn.SponsorID,
		 Spn.PartnerID,
         Tsp.TuitionAssistanceProviderID,
         CC.CostCenterNumber,
         Acct.AccountSubaccountID,
         Tr.TierID,
         Pgm.ProgramID,
         SS.SessionID,
         Schd.ScheduleWeekName,
         Lcs.LifecycleStatusName,
         FTE.SourceSystem,
       Std.CSSStudentNumber,
         Spn.CSSCenterNumber,
         Spn.CSSFamilyNumber,
         Tr.CSSTierNumber,
         Pgm.ProgramName,
         SS.SessionName';
        INSERT INTO @QueryTable
        (
            SQLQUERY
        )
        SELECT CAST(@SQL AS VARCHAR(MAX));
    END;

    ELSE
    BEGIN
        DECLARE @Field2 AS TABLE
        (
            FieldPath VARCHAR(MAX) NOT NULL,
            TuitionType VARCHAR(50) NULL
        );
        DELETE FROM @Field2;
        INSERT INTO @Field2
        (
            FieldPath,
            TuitionType
        )
        (SELECT FieldPath,
                TuitionType
         FROM GL_Staging.dbo.MartASALookup
         WHERE MeasureName = @Measurename);


        DECLARE @SQL2 NVARCHAR(MAX);

        SET @SQL2
            = N'SELECT 
       DD.FullDate,
	   DD.FiscalWeekEndDate,
       Std.StudentID,
       Spn.SponsorID,
	   COALESCE(Spn.PartnerID, -1) PartnerID,
       Tsp.TuitionAssistanceProviderID,
       CC.CostCenterNumber, ' + N'''' + @Measurename + N''''
              + N'  AS Measurename,
       Acct.AccountSubaccountID,
       Tr.TierID,
       Pgm.ProgramID,
       SS.SessionID,
       Schd.ScheduleWeekName,
       Lcs.LifecycleStatusName,
       SUM(FTE.FTE) AS Value1,
       FTE.SourceSystem AS SourceSystem,
      Std.CSSStudentNumber ,
      Spn.CSSCenterNumber  ,
      Spn.CSSFamilyNumber  ,
      Tr.CSSTierNumber	   ,
      Pgm.ProgramName	   ,
      SS.SessionName
FROM dbo.FactFTESnapshot FTE
    INNER JOIN dbo.DimDate DD
        ON FTE.DateKey = DD.DateKey
    INNER JOIN dbo.DimStudent Std
        ON FTE.StudentKey = Std.StudentKey
    INNER JOIN dbo.DimSponsor Spn
        ON FTE.SponsorKey = Spn.SponsorKey
    INNER JOIN dbo.DimTuitionAssistanceProvider Tsp
        ON FTE.TuitionAssistanceProviderKey = Tsp.TuitionAssistanceProviderKey
    INNER JOIN dbo.DimCostCenter CC
        ON FTE.CostCenterKey = CC.CostCenterKey
    INNER JOIN dbo.DimAccountSubaccount Acct
        ON FTE.AccountSubaccountKey = Acct.AccountSubaccountKey
    INNER JOIN dbo.DimTier Tr
        ON FTE.TierKey = Tr.TierKey
    INNER JOIN dbo.DimProgram Pgm
        ON FTE.ProgramKey = Pgm.ProgramKey
    INNER JOIN dbo.DimSession SS
        ON FTE.SessionKey = SS.SessionKey
    INNER JOIN dbo.DimScheduleWeek Schd
        ON FTE.ScheduleWeekKey = Schd.ScheduleWeekKey
    INNER JOIN dbo.DimLifecycleStatus Lcs
        ON FTE.LifecycleStatusKey = Lcs.LifecycleStatusKey' + N' WHERE DD.FiscalWeekEndDate IN ( ' + N''''
              + CONVERT(VARCHAR, ?, 23) + N'''' + N' )' + N' AND Acct.AccountSubaccountKey IN ('
              + N'SELECT AccountSubaccountKey ' + N' FROM model.vAccountSubAccount '
              + ISNULL(
                          NCHAR(10) + N'WHERE '
                          + STUFF(
                            (
                                SELECT NCHAR(10) + N'  OR ' + (f.FieldPath)
                                FROM @Field2 f
                                FOR XML PATH(N'')
                            ),
                            1,
                            6,
                            N''
                                 ),
                          N''
                      ) + +N'AND' + N'[Tuition ' + N'Type]= ' + N''''
              + STUFF(
                (
                    SELECT ',' + TuitionType FROM @Field2 FOR XML PATH('')
                ),
                1,
                1,
                ''
                     ) + N'''' + N')'
              + N'
GROUP BY DD.FullDate,
		 DD.FiscalWeekEndDate,
         Std.StudentID,
         Spn.SponsorID,
		 Spn.PartnerID,
         Tsp.TuitionAssistanceProviderID,
         CC.CostCenterNumber,
         Acct.AccountSubaccountID,
         Tr.TierID,
         Pgm.ProgramID,
         SS.SessionID,
         Schd.ScheduleWeekName,
         Lcs.LifecycleStatusName,
         FTE.SourceSystem,
         Std.CSSStudentNumber,
         Spn.CSSCenterNumber,
         Spn.CSSFamilyNumber,
         Tr.CSSTierNumber,
         Pgm.ProgramName,
         SS.SessionName';
        INSERT INTO @QueryTable
        (
            SQLQUERY
        )
        SELECT CAST(@SQL2 AS VARCHAR(MAX));

    END;

    FETCH NEXT FROM csr_fact_rabalance_fisc_weekend
    INTO @Measurename;
END;

CLOSE csr_fact_rabalance_fisc_weekend;
DEALLOCATE csr_fact_rabalance_fisc_weekend;




SELECT CAST(REPLACE(
            (
                SELECT STUFF(
                       (
                           SELECT N' UNION ' + (SQLQUERY) FROM @QueryTable FOR XML PATH(N'')
                       ),
                       1,
                       6,
                       N''
                            )
            ),
            '&#x0D;',
            ''
                   ) AS VARCHAR(MAX));"
"DECLARE @LastProcessDate datetime;
WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastProcessDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId;
SELECT ISNULL(@LastProcessDate,GETDATE()) AS LastProcessDate"
"SELECT  201101 AS LastProcessFiscalWeekNumber, '01-08-2011' AS LastProcessDate"
"IF (SELECT TOP 1 MeasureName
FROM GL_Staging..MartASALookup
WHERE MeasureName NOT IN
      (
          SELECT DISTINCT MeasureName FROM BING_EDW..SupportDailyMeasureFTE
      )
      AND GLMetricTypeCode = 'Stat' ) IS NULL 
	  BEGIN 
	  SELECT d.[FiscalWeekStartDate] AS DataScenarioFiscalWeekStartDate,
       d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate,
    d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber

FROM dbo.FactFTESnapshot (NOLOCK) AS f
    JOIN dbo.DimDate (NOLOCK) AS d
        ON f.DateKey = d.DateKey
WHERE[f].EDWCreatedDate  BETWEEN '01-01-1900' AND  '01-01-1900'
GROUP BY d.[FiscalWeekNumber],
         d.[FiscalWeekEndDate],
         d.[FiscalYearEndDate],
         d.[FiscalWeekOfYearNumber],
   d.[FiscalWeekStartDate]
   END 
   ELSE 
   BEGIN

SELECT d.[FiscalWeekStartDate] AS DataScenarioFiscalWeekStartDate,
       d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate,
    d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber

FROM dbo.FactFTESnapshot (NOLOCK) AS f
    JOIN dbo.DimDate (NOLOCK) AS d
        ON f.DateKey = d.DateKey
WHERE [d].Fulldate  BETWEEN ? AND ?
GROUP BY d.[FiscalWeekNumber],
         d.[FiscalWeekEndDate],
         d.[FiscalYearEndDate],
         d.[FiscalWeekOfYearNumber],
   d.[FiscalWeekStartDate]
UNION
SELECT [FiscalWeekStartDate] AS DataScenarioFiscalWeekStartDate,
       d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate,
    d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
FROM dbo.FactFTESnapshot (NOLOCK) AS f
    JOIN dbo.DimDate (NOLOCK) AS d
        ON f.DateKey = d.DateKey
WHERE [d].[FiscalWeekNumber] > ? AND [d].[Fulldate]<= ?
GROUP BY d.[FiscalWeekNumber],
         d.[FiscalWeekEndDate],
         d.[FiscalYearEndDate],
         d.[FiscalWeekOfYearNumber],
   d.[FiscalWeekStartDate]
ORDER BY  DataScenarioFiscalWeekStartDate

END "
TRUNCATE TABLE  BING_EDW..SupportDailyMeasureFTE
"DELETE FROM DW_Base.dbo.BaseDailyMeasureNetRevenue WHERE FiscalWeekEndDate =?


Select @@Rowcount as DC"
"DECLARE @QueryTable TABLE
(
    SQLQUERY VARCHAR(MAX) NULL
);

DECLARE @Measurename VARCHAR(100);
DECLARE csr_BaseRevenue CURSOR FOR
SELECT   MeasureName
FROM GL_Staging..MartASALookup

      WHERE  GLMetricTypeCode = 'USD' and MeasureName<>'Payroll';
--
-- Use cursor to loop through the values we have chosen to split this batch by
--
OPEN csr_BaseRevenue;
FETCH NEXT FROM csr_BaseRevenue
INTO @Measurename;
WHILE @@FETCH_STATUS = 0
BEGIN


    IF
    (
        SELECT  TuitionType
        FROM GL_Staging..MartASALookup
        WHERE MeasureName = @Measurename
    ) NOT LIKE '%[A-Z]%'
    BEGIN
        DECLARE @Field AS TABLE
        (
            FieldPath VARCHAR(MAX) NOT NULL
        );
        DELETE FROM @Field;
        INSERT INTO @Field
        (
            FieldPath
        )
        (SELECT FieldPath
         FROM GL_Staging.dbo.MartASALookup
         WHERE MeasureName = @Measurename);
        DECLARE @SQL NVARCHAR(MAX);

        SET @SQL
            = N'SELECT 
       DD.FullDate,
	   DD.FiscalWeekEndDate,
       Std.StudentID,
       Spn.SponsorID,
	   COALESCE(Spn.PartnerID, -1) PartnerID,
       Tsp.TuitionAssistanceProviderID,
       CC.CostCenterNumber, ' + N'''' + @Measurename + N''''
              + N'  AS Measurename,
       Acct.AccountSubaccountID,
       Tr.TierID,
       Pgm.ProgramID,
       SS.SessionID,
       Schd.ScheduleWeekName,
       Lcs.LifecycleStatusName,
        Net.TransactionNumber,
       SUM(Net.NetRevenueAmount) AS Value1,
       Net.SourceSystem AS SourceSystem,
       Std.CSSStudentNumber,
       Spn.CSSCenterNumber,
       Spn.CSSFamilyNumber,
	   Tsp.CSSCustomerCode,
       Tr.CSSTierNumber,
       Pgm.ProgramName,
       SS.SessionName
FROM dbo.FactNetRevenue Net
    INNER JOIN dbo.DimDate DD
        ON Net.DateKey = DD.DateKey
    INNER JOIN dbo.DimStudent Std
        ON Net.StudentKey = Std.StudentKey
    INNER JOIN dbo.DimSponsor Spn
        ON Net.SponsorKey = Spn.SponsorKey
    INNER JOIN dbo.DimTuitionAssistanceProvider Tsp
        ON Net.TuitionAssistanceProviderKey = Tsp.TuitionAssistanceProviderKey
    INNER JOIN dbo.DimCostCenter CC
        ON Net.CostCenterKey = CC.CostCenterKey
    INNER JOIN dbo.DimAccountSubaccount Acct
        ON Net.AccountSubaccountKey = Acct.AccountSubaccountKey
    INNER JOIN dbo.DimTier Tr
        ON Net.TierKey = Tr.TierKey
    INNER JOIN dbo.DimProgram Pgm
        ON Net.ProgramKey = Pgm.ProgramKey
    INNER JOIN dbo.DimSession SS
        ON Net.SessionKey = SS.SessionKey
    INNER JOIN dbo.DimScheduleWeek Schd
        ON Net.ScheduleWeekKey = Schd.ScheduleWeekKey
    INNER JOIN dbo.DimLifecycleStatus Lcs
        ON Net.LifecycleStatusKey = Lcs.LifecycleStatusKey' + N' WHERE DD.FiscalWeekEndDate IN ( ' + N''''
              + CONVERT(VARCHAR,?, 23) + N'''' + N' )' + N' AND Acct.AccountSubaccountKey IN ('
              + N'SELECT AccountSubaccountKey ' + N' FROM model.vAccountSubAccount '
              + ISNULL(
                          NCHAR(10) + N'WHERE '
                          + STUFF(
                            (
                                SELECT NCHAR(10) + N'  OR ' + (f.FieldPath)
                                FROM @Field f
                                FOR XML PATH(N'')
                            ),
                            1,
                            6,
                            N''
                                 ),
                          N''
                      ) + N')'
              + +N'
GROUP BY DD.FullDate,
         DD.FiscalWeekEndDate,
		 Std.StudentID,
         Spn.SponsorID,
		 Spn.PartnerID,
         Tsp.TuitionAssistanceProviderID,
         CC.CostCenterNumber,
         Acct.AccountSubaccountID,
         Tr.TierID,
         Pgm.ProgramID,
         SS.SessionID,
         Schd.ScheduleWeekName,
         Lcs.LifecycleStatusName,
		 Net.SourceSystem,
        Net.TransactionNumber,
         Std.CSSStudentNumber,
         Spn.CSSCenterNumber,
         Spn.CSSFamilyNumber,
		 Tsp.CSSCustomerCode,
         Tr.CSSTierNumber,
         Pgm.ProgramName,
         SS.SessionName';
        INSERT INTO @QueryTable
        (
            SQLQUERY
        )
        SELECT CAST(@SQL AS VARCHAR(MAX));
    END;

    ELSE
    BEGIN
        DECLARE @Field2 AS TABLE
        (
            FieldPath VARCHAR(MAX) NOT NULL,
            TuitionType VARCHAR(50) NULL
        );
        DELETE FROM @Field2;
        INSERT INTO @Field2
        (
            FieldPath,
            TuitionType
        )
        (SELECT FieldPath,
                TuitionType
         FROM GL_Staging.dbo.MartASALookup
         WHERE MeasureName = @Measurename);


        DECLARE @SQL2 NVARCHAR(MAX);

        SET @SQL2
            = N'SELECT 
       DD.FullDate,
	   DD.FiscalWeekEndDate,
       Std.StudentID,
       Spn.SponsorID,
	   COALESCE(Spn.PartnerID, -1) PartnerID,
       Tsp.TuitionAssistanceProviderID,
       CC.CostCenterNumber, ' + N'''' + @Measurename + N''''
              + N'  AS Measurename,
       Acct.AccountSubaccountID,
       Tr.TierID,
       Pgm.ProgramID,
       SS.SessionID,
       Schd.ScheduleWeekName,
       Lcs.LifecycleStatusName,
        Net.TransactionNumber,
       SUM(Net.NetRevenueAmount) AS Value1,
       Net.SourceSystem AS SourceSystem,
       Std.CSSStudentNumber,
       Spn.CSSCenterNumber,
       Spn.CSSFamilyNumber,
	   Tsp.CSSCustomerCode,
       Tr.CSSTierNumber,
       Pgm.ProgramName,
       SS.SessionName
FROM dbo.FactNetRevenue Net
    INNER JOIN dbo.DimDate DD
        ON Net.DateKey = DD.DateKey
    INNER JOIN dbo.DimStudent Std
        ON Net.StudentKey = Std.StudentKey
    INNER JOIN dbo.DimSponsor Spn
        ON Net.SponsorKey = Spn.SponsorKey
    INNER JOIN dbo.DimTuitionAssistanceProvider Tsp
        ON Net.TuitionAssistanceProviderKey = Tsp.TuitionAssistanceProviderKey
    INNER JOIN dbo.DimCostCenter CC
        ON Net.CostCenterKey = CC.CostCenterKey
    INNER JOIN dbo.DimAccountSubaccount Acct
        ON Net.AccountSubaccountKey = Acct.AccountSubaccountKey
    INNER JOIN dbo.DimTier Tr
        ON Net.TierKey = Tr.TierKey
    INNER JOIN dbo.DimProgram Pgm
        ON Net.ProgramKey = Pgm.ProgramKey
    INNER JOIN dbo.DimSession SS
        ON Net.SessionKey = SS.SessionKey
    INNER JOIN dbo.DimScheduleWeek Schd
        ON Net.ScheduleWeekKey = Schd.ScheduleWeekKey
    INNER JOIN dbo.DimLifecycleStatus Lcs
        ON Net.LifecycleStatusKey = Lcs.LifecycleStatusKey' + N' WHERE DD.FiscalWeekEndDate IN ( ' + N''''
              + CONVERT(VARCHAR, ?, 23) + N'''' + N' )' + N' AND Acct.AccountSubaccountKey IN ('
              + N'SELECT AccountSubaccountKey ' + N' FROM model.vAccountSubAccount '
              + ISNULL(
                          NCHAR(10) + N'WHERE '
                          + STUFF(
                            (
                                SELECT NCHAR(10) + N'  OR ' + (f.FieldPath)
                                FROM @Field2 f
                                FOR XML PATH(N'')
                            ),
                            1,
                            6,
                            N''
                                 ),
                          N''
                      ) + +N'AND' + N'[Tuition ' + N'Type]= ' + N''''
              + STUFF(
                (
                    SELECT ',' + TuitionType FROM @Field2 FOR XML PATH('')
                ),
                1,
                1,
                ''
                     ) + N'''' + N')'
              + N'
GROUP BY DD.FullDate,
		 DD.FiscalWeekEndDate,
         Std.StudentID,
         Spn.SponsorID,
		 Spn.PartnerID,
         Tsp.TuitionAssistanceProviderID,
         CC.CostCenterNumber,
         Acct.AccountSubaccountID,
         Tr.TierID,
         Pgm.ProgramID,
         SS.SessionID,
         Schd.ScheduleWeekName,
         Lcs.LifecycleStatusName,
		 Net.SourceSystem,
         Net.TransactionNumber,
         Std.CSSStudentNumber,
         Spn.CSSCenterNumber,
         Spn.CSSFamilyNumber,
		 Tsp.CSSCustomerCode,
         Tr.CSSTierNumber,
         Pgm.ProgramName,
         SS.SessionName';
        INSERT INTO @QueryTable
        (
            SQLQUERY
        )
        SELECT CAST(@SQL2 AS VARCHAR(MAX));

    END;

    FETCH NEXT FROM csr_BaseRevenue
    INTO @Measurename;
END;

CLOSE csr_BaseRevenue;
DEALLOCATE csr_BaseRevenue;




SELECT CAST(REPLACE(
            (
                SELECT STUFF(
                       (
                           SELECT N' UNION ' + (SQLQUERY) FROM @QueryTable FOR XML PATH(N'')
                       ),
                       1,
                       6,
                       N''
                            )
            ),
            '&#x0D;',
            ''
                   ) AS VARCHAR(MAX));"
"DECLARE @LastProcessFiscalWeekNumber int, @LastProcessDate DATETIME , @LastsuccessfulDate DateTime;
IF (SELECT Top 1 AuditId
           FROM dbo.AuditLog WHERE TaskName= ?) IS NULL 
BEGIN
    WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName ='NewNetRev' )
      GROUP BY TaskName)
SELECT @LastProcessFiscalWeekNumber = ja.BatchSplitByValue, @LastProcessDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId;
	    WITH CTE AS (	  SELECT TaskName,MAX(AuditId) AS e FROM dbo.AuditLog WHERE Statuscode=1 AND TaskName =?   GROUP BY TaskName)
	  
	  SELECT  @LastsuccessfulDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN CTE AS lja ON lja.e = ja.AuditId;
SELECT ISNULL(@LastProcessFiscalWeekNumber, 201101) AS LastProcessFiscalWeekNumber, ISNULL(@LastProcessDate, '01-08-2011') AS LastProcessDate, ISNULL(@LastsuccessfulDate, '01-08-2011') AS LastsuccessfulDate
END
ELSE 
BEGIN

WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastProcessFiscalWeekNumber = ja.BatchSplitByValue, @LastProcessDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId;
	  
	  WITH CTE AS (	  SELECT TaskName,MAX(AuditId) AS e FROM dbo.AuditLog WHERE Statuscode=1 AND TaskName =?   GROUP BY TaskName)
	  
	  SELECT  @LastsuccessfulDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN CTE AS lja ON lja.e = ja.AuditId;

SELECT ISNULL(@LastProcessFiscalWeekNumber, 201101) AS LastProcessFiscalWeekNumber, ISNULL(@LastProcessDate, '01-08-2011') AS LastProcessDate,ISNULL(@LastsuccessfulDate, '01-08-2011') AS LastsuccessfulDate

END"
"SELECT d.[FiscalWeekStartDate] AS DataScenarioFiscalWeekStartDate,
       d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate,
    d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber

FROM dbo.FactNetRevenue (NOLOCK) AS f
    JOIN dbo.DimDate (NOLOCK) AS d
        ON f.DateKey = d.DateKey
WHERE [f].[EDWCreatedDate] > ?
GROUP BY d.[FiscalWeekNumber],
         d.[FiscalWeekEndDate],
         d.[FiscalYearEndDate],
         d.[FiscalWeekOfYearNumber],
   d.[FiscalWeekStartDate]
UNION
SELECT [FiscalWeekStartDate] AS DataScenarioFiscalWeekStartDate,
       d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate,
    d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
FROM dbo.FactNetRevenue (NOLOCK) AS f
    JOIN dbo.DimDate (NOLOCK) AS d
        ON f.DateKey = d.DateKey
WHERE [d].[FiscalWeekNumber] > ?
AND [f].[EDWCreatedDate] > ?
GROUP BY d.[FiscalWeekNumber],
         d.[FiscalWeekEndDate],
         d.[FiscalYearEndDate],
         d.[FiscalWeekOfYearNumber],
   d.[FiscalWeekStartDate]
ORDER BY  DataScenarioFiscalWeekStartDate"
"DECLARE @QueryTable TABLE
(
    SQLQUERY VARCHAR(MAX) NULL
);

DECLARE @Measurename VARCHAR(100);
DECLARE csr_BaseRevenue CURSOR FOR
SELECT Distinct  MeasureName
FROM GL_Staging..MartASALookup
WHERE MeasureName NOT IN
      (
          SELECT DISTINCT MeasureName FROM BING_EDW..SupportDailyMeasureRev
      )
	  AND MeasureName <> 'Payroll'
      AND GLMetricTypeCode = 'USD';
--
-- Use cursor to loop through the values we have chosen to split this batch by
--
OPEN csr_BaseRevenue;
FETCH NEXT FROM csr_BaseRevenue
INTO @Measurename;
WHILE @@FETCH_STATUS = 0
BEGIN


    IF
    (
        SELECT  TuitionType
        FROM GL_Staging..MartASALookup
        WHERE MeasureName = @Measurename
    ) NOT LIKE '%[A-Z]%'
    BEGIN
        DECLARE @Field AS TABLE
        (
            FieldPath VARCHAR(MAX) NOT NULL
        );
        DELETE FROM @Field;
        INSERT INTO @Field
        (
            FieldPath
        )
        (SELECT FieldPath
         FROM GL_Staging.dbo.MartASALookup
         WHERE MeasureName = @Measurename);
        DECLARE @SQL NVARCHAR(MAX);

        SET @SQL
            = N'SELECT 
       DD.FullDate,
	   DD.FiscalWeekEndDate,
       Std.StudentID,
       Spn.SponsorID,
	  COALESCE(Spn.PartnerID, -1) PartnerID,
       Tsp.TuitionAssistanceProviderID,
       CC.CostCenterNumber, ' + N'''' + @Measurename + N''''
              + N'  AS Measurename,
       Acct.AccountSubaccountID,
       Tr.TierID,
       Pgm.ProgramID,
       SS.SessionID,
       Schd.ScheduleWeekName,
       Lcs.LifecycleStatusName,
        Net.TransactionNumber,
       SUM(Net.NetRevenueAmount) AS Value1,
       Net.SourceSystem AS SourceSystem,
       Std.CSSStudentNumber,
       Spn.CSSCenterNumber,
       Spn.CSSFamilyNumber,
	   Tsp.CSSCustomerCode,
       Tr.CSSTierNumber,
       Pgm.ProgramName,
       SS.SessionName
FROM dbo.FactNetRevenue Net
    INNER JOIN dbo.DimDate DD
        ON Net.DateKey = DD.DateKey
    INNER JOIN dbo.DimStudent Std
        ON Net.StudentKey = Std.StudentKey
    INNER JOIN dbo.DimSponsor Spn
        ON Net.SponsorKey = Spn.SponsorKey
    INNER JOIN dbo.DimTuitionAssistanceProvider Tsp
        ON Net.TuitionAssistanceProviderKey = Tsp.TuitionAssistanceProviderKey
    INNER JOIN dbo.DimCostCenter CC
        ON Net.CostCenterKey = CC.CostCenterKey
    INNER JOIN dbo.DimAccountSubaccount Acct
        ON Net.AccountSubaccountKey = Acct.AccountSubaccountKey
    INNER JOIN dbo.DimTier Tr
        ON Net.TierKey = Tr.TierKey
    INNER JOIN dbo.DimProgram Pgm
        ON Net.ProgramKey = Pgm.ProgramKey
    INNER JOIN dbo.DimSession SS
        ON Net.SessionKey = SS.SessionKey
    INNER JOIN dbo.DimScheduleWeek Schd
        ON Net.ScheduleWeekKey = Schd.ScheduleWeekKey
    INNER JOIN dbo.DimLifecycleStatus Lcs
        ON Net.LifecycleStatusKey = Lcs.LifecycleStatusKey' + N' WHERE DD.FiscalWeekEndDate IN ( ' + N''''
              + CONVERT(VARCHAR,?, 23) + N'''' + N' )' + N' AND Acct.AccountSubaccountKey IN ('
              + N'SELECT AccountSubaccountKey ' + N' FROM model.vAccountSubAccount '
              + ISNULL(
                          NCHAR(10) + N'WHERE '
                          + STUFF(
                            (
                                SELECT NCHAR(10) + N'  OR ' + (f.FieldPath)
                                FROM @Field f
                                FOR XML PATH(N'')
                            ),
                            1,
                            6,
                            N''
                                 ),
                          N''
                      ) + N')'
              + +N'
GROUP BY DD.FullDate,
         DD.FiscalWeekEndDate,
		 Std.StudentID,
         Spn.SponsorID,
		 Spn.PartnerID,
         Tsp.TuitionAssistanceProviderID,
         CC.CostCenterNumber,
         Acct.AccountSubaccountID,
         Tr.TierID,
         Pgm.ProgramID,
         SS.SessionID,
         Schd.ScheduleWeekName,
         Lcs.LifecycleStatusName,
		 Net.SourceSystem,
        Net.TransactionNumber,
         Std.CSSStudentNumber,
         Spn.CSSCenterNumber,
         Spn.CSSFamilyNumber,
		 Tsp.CSSCustomerCode,
         Tr.CSSTierNumber,
         Pgm.ProgramName,
         SS.SessionName';
        INSERT INTO @QueryTable
        (
            SQLQUERY
        )
        SELECT CAST(@SQL AS VARCHAR(MAX));
    END;

    ELSE
    BEGIN
        DECLARE @Field2 AS TABLE
        (
            FieldPath VARCHAR(MAX) NOT NULL,
            TuitionType VARCHAR(50) NULL
        );
        DELETE FROM @Field2;
        INSERT INTO @Field2
        (
            FieldPath,
            TuitionType
        )
        (SELECT FieldPath,
                TuitionType
         FROM GL_Staging.dbo.MartASALookup
         WHERE MeasureName = @Measurename);


        DECLARE @SQL2 NVARCHAR(MAX);

        SET @SQL2
            = N'SELECT 
       DD.FullDate,
	   DD.FiscalWeekEndDate,
       Std.StudentID,
       Spn.SponsorID,
	   COALESCE(Spn.PartnerID, -1) PartnerID,
       Tsp.TuitionAssistanceProviderID,
       CC.CostCenterNumber, ' + N'''' + @Measurename + N''''
              + N'  AS Measurename,
       Acct.AccountSubaccountID,
       Tr.TierID,
       Pgm.ProgramID,
       SS.SessionID,
       Schd.ScheduleWeekName,
       Lcs.LifecycleStatusName,
        Net.TransactionNumber,
       SUM(Net.NetRevenueAmount) AS Value1,
       Net.SourceSystem AS SourceSystem,
       Std.CSSStudentNumber,
       Spn.CSSCenterNumber,
       Spn.CSSFamilyNumber,
	   Tsp.CSSCustomerCode,
       Tr.CSSTierNumber,
       Pgm.ProgramName,
       SS.SessionName
FROM dbo.FactNetRevenue Net
    INNER JOIN dbo.DimDate DD
        ON Net.DateKey = DD.DateKey
    INNER JOIN dbo.DimStudent Std
        ON Net.StudentKey = Std.StudentKey
    INNER JOIN dbo.DimSponsor Spn
        ON Net.SponsorKey = Spn.SponsorKey
    INNER JOIN dbo.DimTuitionAssistanceProvider Tsp
        ON Net.TuitionAssistanceProviderKey = Tsp.TuitionAssistanceProviderKey
    INNER JOIN dbo.DimCostCenter CC
        ON Net.CostCenterKey = CC.CostCenterKey
    INNER JOIN dbo.DimAccountSubaccount Acct
        ON Net.AccountSubaccountKey = Acct.AccountSubaccountKey
    INNER JOIN dbo.DimTier Tr
        ON Net.TierKey = Tr.TierKey
    INNER JOIN dbo.DimProgram Pgm
        ON Net.ProgramKey = Pgm.ProgramKey
    INNER JOIN dbo.DimSession SS
        ON Net.SessionKey = SS.SessionKey
    INNER JOIN dbo.DimScheduleWeek Schd
        ON Net.ScheduleWeekKey = Schd.ScheduleWeekKey
    INNER JOIN dbo.DimLifecycleStatus Lcs
        ON Net.LifecycleStatusKey = Lcs.LifecycleStatusKey' + N' WHERE DD.FiscalWeekEndDate IN ( ' + N''''
              + CONVERT(VARCHAR, ?, 23) + N'''' + N' )' + N' AND Acct.AccountSubaccountKey IN ('
              + N'SELECT AccountSubaccountKey ' + N' FROM model.vAccountSubAccount '
              + ISNULL(
                          NCHAR(10) + N'WHERE '
                          + STUFF(
                            (
                                SELECT NCHAR(10) + N'  OR ' + (f.FieldPath)
                                FROM @Field2 f
                                FOR XML PATH(N'')
                            ),
                            1,
                            6,
                            N''
                                 ),
                          N''
                      ) + +N'AND' + N'[Tuition ' + N'Type]= ' + N''''
              + STUFF(
                (
                    SELECT ',' + TuitionType FROM @Field2 FOR XML PATH('')
                ),
                1,
                1,
                ''
                     ) + N'''' + N')'
              + N'
GROUP BY DD.FullDate,
		 DD.FiscalWeekEndDate,
         Std.StudentID,
         Spn.SponsorID,
		 Spn.PartnerID,
         Tsp.TuitionAssistanceProviderID,
         CC.CostCenterNumber,
         Acct.AccountSubaccountID,
         Tr.TierID,
         Pgm.ProgramID,
         SS.SessionID,
         Schd.ScheduleWeekName,
         Lcs.LifecycleStatusName,
		 Net.SourceSystem,
         Net.TransactionNumber,
         Std.CSSStudentNumber,
         Spn.CSSCenterNumber,
         Spn.CSSFamilyNumber,
		 Tsp.CSSCustomerCode,
         Tr.CSSTierNumber,
         Pgm.ProgramName,
         SS.SessionName';
        INSERT INTO @QueryTable
        (
            SQLQUERY
        )
        SELECT CAST(@SQL2 AS VARCHAR(MAX));

    END;

    FETCH NEXT FROM csr_BaseRevenue
    INTO @Measurename;
END;

CLOSE csr_BaseRevenue;
DEALLOCATE csr_BaseRevenue;




SELECT CAST(REPLACE(
            (
                SELECT STUFF(
                       (
                           SELECT N' UNION ' + (SQLQUERY) FROM @QueryTable FOR XML PATH(N'')
                       ),
                       1,
                       6,
                       N''
                            )
            ),
            '&#x0D;',
            ''
                   ) AS VARCHAR(MAX))
	WHERE CAST(REPLACE(
            (
                SELECT STUFF(
                       (
                           SELECT N' UNION ' + (SQLQUERY) FROM @QueryTable FOR XML PATH(N'')
                       ),
                       1,
                       6,
                       N''
                            )
            ),
            '&#x0D;',
            ''
                   ) AS VARCHAR(MAX)) IS NOT NULL;"
"IF (SELECT TOP 1 MeasureName
FROM GL_Staging..MartASALookup
WHERE MeasureName NOT IN
      (
          SELECT MeasureName FROM BING_EDW..SupportDailyMeasureRev
      )
      AND GLMetricTypeCode = 'USD' ) IS  NULL
	  BEGIN 
	  SELECT d.[FiscalWeekStartDate] AS DataScenarioFiscalWeekStartDate,
       d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate,
    d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber

FROM dbo.FactNetRevenue (NOLOCK) AS f
    JOIN dbo.DimDate (NOLOCK) AS d
        ON f.DateKey = d.DateKey
WHERE [f].[EDWCreatedDate]  BETWEEN '01-01-1900' AND  '01-01-1900'
GROUP BY d.[FiscalWeekNumber],
         d.[FiscalWeekEndDate],
         d.[FiscalYearEndDate],
         d.[FiscalWeekOfYearNumber],
   d.[FiscalWeekStartDate]
   END 
   ELSE 
   BEGIN

SELECT d.[FiscalWeekStartDate] AS DataScenarioFiscalWeekStartDate,
       d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate,
    d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber

FROM dbo.FactNetRevenue (NOLOCK) AS f
    JOIN dbo.DimDate (NOLOCK) AS d
        ON f.DateKey = d.DateKey
WHERE [d].FullDate  BETWEEN  ? AND  ?
GROUP BY d.[FiscalWeekNumber],
         d.[FiscalWeekEndDate],
         d.[FiscalYearEndDate],
         d.[FiscalWeekOfYearNumber],
   d.[FiscalWeekStartDate]
UNION
SELECT [FiscalWeekStartDate] AS DataScenarioFiscalWeekStartDate,
       d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate,
    d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
FROM dbo.FactNetRevenue (NOLOCK) AS f
    JOIN dbo.DimDate (NOLOCK) AS d
        ON f.DateKey = d.DateKey
WHERE [d].[FiscalWeekNumber] > ? AND [d].FullDate<=?
GROUP BY d.[FiscalWeekNumber],
         d.[FiscalWeekEndDate],
         d.[FiscalYearEndDate],
         d.[FiscalWeekOfYearNumber],
   d.[FiscalWeekStartDate]
ORDER BY  DataScenarioFiscalWeekStartDate

END"
TRUNCATE TABLE  BING_EDW..SupportDailyMeasureRev
"DELETE 
    FROM dbo.BaseDailyMeasureFTE
    WHERE MeasureName = ?
        AND FiscalWeekEndDate = ?
        AND DataScenarioName = 'Actual';
SELECT @@ROWCOUNT AS DeleteCount;"
 Exec [dbo].[SpPopulateNSESupportSD]   @DebugMode =1
"DECLARE @LastProcessFiscalWeekNumber int, @LastProcessDate datetime;
WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastProcessFiscalWeekNumber = ja.BatchSplitByValue, @LastProcessDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId;
SELECT ISNULL(@LastProcessFiscalWeekNumber, 201901) AS LastProcessFiscalWeekNumber, ISNULL(@LastProcessDate, '2019-01-04') AS LastProcessDate"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM dbo.FactFTESnapshot(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM dbo.FactFTESnapshot(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]

   UNION 
   SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM CMS_Staging.dbo.enrlScheduleDay AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.EffectiveDate = d.FullDate
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].StgModifiedDate > ?
   AND f.EffectiveDate BETWEEN '2019-01-04' AND GETDATE()
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
     ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactFTESnapshot(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactFTESnapshot(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000100%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 2 
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000100%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 2 
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9300.000300%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 2
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9300.000300%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 2
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000700%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 2
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000700%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 2
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000800%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 2
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000800%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 2
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9300.000300%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 1
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9300.000300%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 1
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000700%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 1
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000700%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 1
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000800%'
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 1
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN [model].vAccountSubaccount (NOLOCK) asa
        ON asa.AccountSubaccountKey = f.AccountSubAccountKey
           AND asa.[Field Path] LIKE '%9200.000800%'
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 1
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
      AND f.GlMetricTypeKey = 1
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactGLBalancePlanAllocation(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
         AND f.GlMetricTypeKey = 1
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"IF EXISTS
(SELECT 1
FROM BaseETLBatchControl(NOLOCK)
WHERE EventName = ?)

BEGIN
 (SELECT COALESCE(LastProcessedDate,'19000101') AS  LastProcessedDate 
 FROM BaseETLBatchControl(NOLOCK)
 WHERE EventName = ?)

END

ELSE 

BEGIN
 INSERT INTO BaseETLBatchControl(EventName, LastProcessedDate, Status) VALUES
  (?, NULL, NULL);

SELECT '1900-01-01' AS  LastProcessedDate;
END"
"SELECT FiscalWeekNumber FROM FactGLBalancePlanAllocation(NOLOCK)f
JOIN DimDate(NOLOCK)d ON f.DateKey = d.DateKey
JOIN BING_EDW.model.vAccountSubaccount(NOLOCK)a ON f.AccountSubaccountKey = a.AccountSubaccountKey
WHERE GLMetricTypeKey = 2 AND [Field Path] LIKE '%9300.000300%'
AND f.EDWCreatedDate > ?
GROUP BY FiscalWeekNumber
ORDER BY FiscalWeekNumber"
"SELECT DISTINCT FiscalWeekEndDate AS FiscalWeekEndDate 
FROM DimDate(NOLOCK) 
WHERE FiscalWeekNumber = ?;"
"DELETE FROM BaseWeeklyMeasure
WHERE MeasureName = 'Labor Hours'
AND DataScenarioName = ('Plan')
AND FiscalWeekEndDate = ?

Select @@ROWCOUNT as DeleteCount "
"SELECT COUNT(1) AS vPreCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Labor Hours'
AND DataScenarioName = ('Plan')"
"SELECT COUNT(1) AS vPostCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Labor Hours'
AND DataScenarioName = ('Plan')"
"DELETE FROM BaseWeeklyMeasure
WHERE MeasureName = 'Labor Hours Childcare'
AND DataScenarioName = ('Plan')
AND FiscalWeekEndDate = ?

Select @@ROWCOUNT as DeleteCount "
"SELECT COUNT(1) AS vPreCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Labor Hours Childcare'
AND DataScenarioName = ('Plan')"
"SELECT COUNT(1) AS vPostCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Labor Hours Childcare'
AND DataScenarioName = ('Plan')"
"DELETE FROM BaseWeeklyMeasure
WHERE MeasureName = 'Labor Hours Operating'
AND DataScenarioName = ('Plan')
AND FiscalWeekEndDate = ?

Select @@ROWCOUNT as DeleteCount "
"SELECT COUNT(1) AS vPreCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Labor Hours Operating'
AND DataScenarioName = ('Plan')"
"SELECT COUNT(1) AS vPostCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Labor Hours Operating'
AND DataScenarioName = ('Plan')"
"DELETE FROM BaseWeeklyMeasure
WHERE MeasureName = 'Labor Hours Overtime'
AND DataScenarioName = ('Plan')
AND FiscalWeekEndDate = ?

Select @@ROWCOUNT as DeleteCount "
"SELECT COUNT(1) AS vPreCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Labor Hours Overtime'
AND DataScenarioName = ('Plan')"
"SELECT COUNT(1) AS vPostCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Labor Hours Overtime'
AND DataScenarioName = ('Plan')"
"DELETE FROM BaseWeeklyMeasure
WHERE MeasureName = 'Labor Hours Special Programs (Memo)'
AND DataScenarioName = ('Plan')
AND FiscalWeekEndDate = ?

Select @@ROWCOUNT as DeleteCount "
"SELECT COUNT(1) AS vPreCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Labor Hours Special Programs (Memo)'
AND DataScenarioName = ('Plan')"
"SELECT COUNT(1) AS vPostCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Labor Hours Special Programs (Memo)'
AND DataScenarioName = ('Plan')"
"DELETE FROM BaseWeeklyMeasure
WHERE MeasureName = 'Labor Hours Training'
AND DataScenarioName = ('Plan')
AND FiscalWeekEndDate = ?

Select @@ROWCOUNT as DeleteCount "
"SELECT COUNT(1) AS vPreCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Labor Hours Training'
AND DataScenarioName = ('Plan')"
"SELECT COUNT(1) AS vPostCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Labor Hours Training'
AND DataScenarioName = ('Plan')"
"DELETE FROM BaseWeeklyMeasure
WHERE MeasureName = 'Total Labor Hours'
AND DataScenarioName = ('Plan')
AND FiscalWeekEndDate = ?

Select @@ROWCOUNT as DeleteCount "
"SELECT COUNT(1) AS vPreCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Total Labor Hours'
AND DataScenarioName = ('Plan')"
"SELECT COUNT(1) AS vPostCount FROM BaseWeeklyMeasure(NOLOCK)
WHERE MeasureName = 'Total Labor Hours'
AND DataScenarioName = ('Plan')"
"UPDATE BaseETLBatchControl
SET LastProcessedDate = ?,
Status = 'Success'
WHERE EventName = 'GLPlanAllocation_LaborHours'"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLaborHour(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLaborHour(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLaborSalary(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLaborSalary(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLeadEvent(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLeadEvent(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLeadEvent (NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLeadEvent (NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLifeCycleStatusSnapshot(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactLifeCycleStatusSnapshot(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
"SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactNetRevenue(NOLOCK) AS f
      JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [f].[EDWCreatedDate] > ?
   GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
UNION
SELECT d.[FiscalWeekNumber] AS DataScenarioFiscalWeekNumber
     , d.[FiscalWeekEndDate] AS DataScenarioFiscalWeekEndDate
     , ISNULL(d_nyr.[FiscalWeekNumber], d.[FiscalWeekNumber] + 100) AS LYFiscalWeekNumber
     , ISNULL(d_nyr.[FiscalWeekEndDate], DATEADD(week, DATEDIFF(week, d.FiscalWeekEndDate, d.FiscalYearEndDate) + d.FiscalWeekOfYearNumber, d.[FiscalWeekEndDate])) AS LYFiscalWeekEndDate
   FROM FactNetRevenue(NOLOCK) AS f
         JOIN DimDate(NOLOCK) AS d
        ON f.DateKey = d.DateKey
      LEFT JOIN DimDate(NOLOCK) AS d_nyr 
        ON d.FiscalWeekOfYearNumber = d_nyr.FiscalWeekOfYearNumber
           AND d.FiscalYearNumber = d_nyr.FiscalYearNumber - 1
           AND d_nyr.FullDate = d_nyr.FiscalWeekEndDate
   WHERE [d].[FiscalWeekNumber] > ?
      GROUP BY d.[FiscalWeekNumber]
     , d.[FiscalWeekEndDate]
  , d.[FiscalYearEndDate]
  , d.[FiscalWeekOfYearNumber]
     , d_nyr.[FiscalWeekNumber]
     , d_nyr.[FiscalWeekEndDate]
   ORDER BY DataScenarioFiscalWeekNumber"
EXEC dbo.spCSS_StagingToEDW_DimARAgencyType
EXEC dbo.spCSS_StagingTransform_DimDiscountType;
EXEC dbo.spCSS_StagingToEDW_DimFeeType;
"Execute spBeginAuditLog ? OUTPUT, ?,?;"
"Execute spEndAuditLog ?,?,?,?,?;"
"SELECT COUNT(*) AS vInsertCount
FROM dbo.DimSponsor
WHERE ETLJobID = ?"
"SELECT COUNT(*) AS vInsertCount
FROM dbo.DimStudent 
WHERE ETLJobID = ?"
SELECT COUNT(1) AS IC FROM  [dbo].[DimTuitionAssistanceProvider] WHERE SourceSystem ='CSS'
EXEC DBO.spCSS_StagingToEDW_DimPaymentType;
EXEC dbo.spCSS_StagingTransform_DimProgram;
EXEC dbo.spCSS_StagingToEDW_DimSession
Execute [dbo].[spCSS_StagingToEDW_DimSponsor]
EXEC dbo.spCSS_StagingToEDW_DimStudent
EXEC dbo.spCSS_StagingToEDW_DimTier
EXEC dbo.spCSS_StagingToEDW_DimTransactionCode;
EXEC dbo.spCSS_StagingToEDW_DimTuitionAssistanceProvider;
Exec [dbo].[spCSS_BatchLoad_StagingToEDW_FactFTESnapshot]
EXEC spCSS_BatchLoad_StagingToEDW_FactLaborHourTarget
EXEC spCSS_BatchLoad_StagingToEDW_FactLifeCycleStatusSnapshot
EXEC spCSS_BatchLoad_StagingToEDW_FactNetRevenue
Execute [dbo].[spGL_StagingToEDW_BridgeCompanyRollup]
Execute [dbo].[spHR_StagingToEDW_BridgeSecurityPersonHRISGroup]
Execute [dbo].[spHR_StagingToEDW_BridgeSecurityPersonOrg]
"DELETE FROM CompNonCompStatus
WHERE FiscalWeekEndDate >= ?

Select @@Rowcount as DeleteCount"
"Execute spEndAuditLog ?,0,?,?,?;"
"IF ? ='01/01/1900'  
SELECT MIN(d.FiscalWeekEndDate) AS FiscalWeekEndDate
FROM DimDate d
WHERE ( d.FullDate >= DATEADD( dd, -180, CAST( GETDATE() AS DATE ) ) ) AND ( d.FullDate <= GETDATE() )
ELSE
SELECT MIN(d.FiscalWeekEndDate) AS FiscalWeekEndDate
FROM DimDate d
WHERE ( d.FullDate >= DATEADD(dd, -180, CAST( ? AS DATE) ) ) AND ( d.FullDate <= GETDATE() )"
EXEC dbo.spGL_StagingToEDW_DimAccountSubAccount
EXEC dbo.spCMS_StagingToEDW_DimAdjustmentReason
EXEC dbo.spCMS_StagingToEDW_DimARAgencyType
EXEC dbo.spHR_StagingToEDW_DimAssessmentType
EXEC dbo.spHR_StagingToEDW_DimAssignmentType
EXEC dbo.spCMS_StagingToEDW_DimClassroom
EXEC dbo.spCSS_StagingToEDW_DimClassroom
EXEC spGL_StagingToEDW_DimCompany
Execute [dbo].[spGL_StagingToEDW_DimCompanyRollup]
EXEC [dbo].[spHR_StagingToEDW_DimComplianceItem]
EXEC dbo.spHR_StagingToEDW_DimComplianceRating
EXEC dbo.spGL_StagingToEDW_DimCostCenter
EXEC dbo.spGL_StagingToEDW_DimCostCenterType
EXEC dbo.spCMS_StagingToEDW_DimCreditMemoType
" SELECT COUNT(1) AS DeleteCount 
From dbo.DimDataScenario"
"WITH DataScenario
     AS (
     SELECT 1 AS Id,
            'Actual' AS DataScenarioName,
            'Actual' AS DataScenarioType,
            'Scenario' AS DataScenarioSubtype,
            'A' AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 2 AS Id,
            'Plan' AS DataScenarioName,
            'Plan' AS DataScenarioType,
            'Scenario' AS DataScenarioSubtype,
            'B' AS GLActualFlag,
            1101 AS GLBudgetVersionID
     UNION
     SELECT 3 AS Id,
            'Plan Var' AS DataScenarioName,
            'Plan' AS DataScenarioType,
            'Scenario v Actual' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 4 AS Id,
            'Plan Var %' AS DataScenarioName,
            'Plan' AS DataScenarioType,
            'Scenario v Actual %' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 5 AS Id,
            'Forecast' AS DataScenarioName,
            'Forecast' AS DataScenarioType,
            'Scenario' AS DataScenarioSubtype,
            'B' AS GLActualFlag,
            1181 AS GLBudgetVersionID
     UNION
     SELECT 6 AS Id,
            'Forecast Var' AS DataScenarioName,
            'Forecast' AS DataScenarioType,
            'Scenario v Actual' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 7 AS Id,
            'Forecast Var %' AS DataScenarioName,
            'Forecast' AS DataScenarioType,
            'Scenario v Actual %' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 8 AS Id,
            'Target' AS DataScenarioName,
            'Target' AS DataScenarioType,
            'Scenario' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 9 AS Id,
            'Target Var' AS DataScenarioName,
            'Target' AS DataScenarioType,
            'Scenario v Actual' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 10 AS Id,
            'Target Var %' AS DataScenarioName,
            'Target' AS DataScenarioType,
            'Scenario v Actual %' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionIDUNION
     UNION
     SELECT 11 AS Id,
            'LY' AS DataScenarioName,
            'Last Year' AS DataScenarioType,
            'Scenario' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 12 AS Id,
            'LY Var' AS DataScenarioName,
            'Last Year' AS DataScenarioType,
            'Scenario v Actual' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 13 AS Id,
            'LY Var %' AS DataScenarioName,
            'Last Year' AS DataScenarioType,
            'Scenario v Actual %' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID)
     INSERT INTO [dbo].[DimDataScenario]
     ([DataScenarioName],
      [DataScenarioType],
      [DataScenarioSubtype],
      [GLActualFlag],
      [GLBudgetVersionID],
      [EffectiveFrom],
      [EffectiveTo],
      [ETLJobID]
     )
            SELECT COALESCE(DataScenarioName, 'Unknown Scenario') AS DataScenarioName,
                   COALESCE(DataScenarioType, 'Unknown Scenario Type') AS DataScenarioType,
                   COALESCE(DataScenarioSubtype, 'Unknown Scenario Subtype') AS DataScenarioSubtype,
                   GLActualFlag,
                   GLBudgetVersionID,
                   '1900-01-01',
                   '12/31/9999 23:59:59.999',
                   ?
            FROM DataScenario
            ORDER BY Id;
SELECT @@ROWCOUNT + 1 AS SourceCount;
"
"DBCC CHECKIDENT('[DimDataScenario]', RESEED, 1);
SET IDENTITY_INSERT dbo.DimDataScenario ON;
INSERT INTO [dbo].[DimDataScenario]
([DataScenarioKey],
 [DataScenarioName],
 [DataScenarioType],
 [DataScenarioSubtype],
 [GLActualFlag],
 [GLBudgetVersionID],
 [Deleted],
 [EffectiveFrom],
 [EffectiveTo],
 [ETLJobID]
)
       SELECT-1,
             'Unknown Scenario',
             'Unknown Scenario Type',
             'Unknown Scenario Subtype',
             NULL,
             NULL,
             NULL,
             '1900-01-01',
             '12/31/9999 23:59:59.999',
             ?
       UNION
       SELECT-2,
             'Not Applicable Scenario',
             'Not Applicable Scenario Type',
             'Not Applicable Scenario Subtype',
             NULL,
             NULL,
             NULL,
             '1900-01-01',
             '12/31/9999 23:59:59.999',
             ?;
SET IDENTITY_INSERT dbo.DimDataScenario OFF;"
"Execute spBeginAuditLog ? OUTPUT, ?;"
 TRUNCATE TABLE dbo.DimDataScenario
EXEC dbo.spGL_StagingToEDW_DimDate
" 

DELETE FROM [dbo].[DimDate]
             WHERE [DateKey] < 0;


             INSERT INTO [dbo].[DimDate]
             ([DateKey],
              [FullDate],
		    [FiscalWeekNumber],
		    [FiscalWeekName],
		    [FiscalWeekStartDateKey],
              [FiscalWeekEndDateKey],
              [HolidayName],
              [HolidayFiscalWeekFlag],
             [FiscalDayNumber],
             [FiscalDayOfWeekNumber],
            [FiscalDayOfPeriodNumber],
            [FiscalDayOfQuarterNumber],
            [FiscalDayOfYearNumber],
              [FiscalWeekOfPeriodNumber],
              [FiscalWeekOfPeriodName],
              [FiscalWeekOfQuarterNumber],
              [FiscalWeekOfQuarterName],
              [FiscalWeekOfYearNumber],
              [FiscalWeekOfYearName],
              [FiscalWeekSequenceNumber],
              [FiscalWeekStartDate],
              [FiscalWeekEndDate],
              [FiscalPeriodNumber],
              [FiscalPeriodName],
              [FiscalPeriodType],
              [FiscalPeriodOfYearNumber],
              [FiscalPeriodOfYearName],
              [FiscalPeriodSequenceNumber],
              [FiscalPeriodStartDate],
              [FiscalPeriodEndDate],
              [FiscalQuarterNumber],
              [FiscalQuarterName],
              [FiscalQuarterOfYearNumber],
              [FiscalQuarterOfYearName],
              [FiscalQuarterSequenceNumber],
              [FiscalQuarterStartDate],
              [FiscalQuarterEndDate],
              [FiscalYearNumber],
              [FiscalYearName],
              [FiscalYearStartDate],
		    [FiscalYearEndDate],
		    [EffectiveFrom],
		    [EffectiveTo],
		    [RowStatus],
		    [ETLJobID]
              )
                    SELECT-1, --[DateKey]
                          '19000101', --[FullDate]
					 -1, --[FiscalWeekNumber]
                          'Unknown Fiscal Week', --[FiscalWeekName]
					 -1,   ---[FiscalWeekStartDateKey]
					 -1,   ---[FiscalWeekEndDateKey]
                          'Unknown Holiday', --[HolidayName]
                          'Unknown Holiday Fiscal Week', --[HolidayFiscalWeekFlag]
						  -1,--- [FiscalDayNumber] 
	                      -1, ---[FiscalDayOfWeekNumber] 
	                      -1, ----[FiscalDayOfPeriodNumber] 
	                      -1, ---[FiscalDayOfQuarterNumber] 
	                      -1, ---[FiscalDayOfYearNumber] 
                          -1, --[FiscalWeekOfPeriodNumber]
                          'Unknown Fiscal Week of Period', --[FiscalWeekOfPeriodName]
                          -1, --[FiscalWeekOfQuarterNumber]
                          'Unknown Fiscal Week of Quarter', --[FiscalWeekOfQuarterName]
                          -1, --[FiscalWeekOfYearNumber]
                          'Unknown Fiscal Week of Year', --[FiscalWeekOfYearName]
                          -1, --[FiscalWeekSequenceNumber]
                          '19000101', --[FiscalWeekStartDate]
                          '19000101', --[FiscalWeekEndDate]
                          -1, --[FiscalPeriodNumber]
                          'Unknown Fiscal Period', --[FiscalPeriodName]
                          'Unknown', --[FiscalPeriodType]
                          -1, --[FiscalPeriodOfYearNumber]
                          'Unknown Fiscal Period of Year', --[FiscalPeriodOfYearName]
                          -1, --[FiscalPeriodSequenceNumber]
                          '19000101', --[FiscalPeriodStartDate]
                          '19000101', --[FiscalPeriodEndDate]
                          -1, --[FiscalQuarterNumber]
                          'Unknown Fiscal Quarter', --[FiscalQuarterName]
                          -1, --[FiscalQuarterOfYearNumber]
                          'Unknown Fiscal Quarter of Year', --[FiscalQuarterOfYearName]
                          -1, --[FiscalQuarterSequenceNumber]
                          '19000101', --[FiscalQuarterStartDate]
                          '19000101', --[FiscalQuarterEndDate]
                          -1, --[FiscalYearNumber]
                          'Unknown Fiscal Year', --[FiscalYearName]
                          '19000101', --[FIscalYearStartDate]
                          '19000101', --[FiscalYearEndDate]
					 '1900-01-01' , --[EffectiveFrom]
					 '12/31/9999 23:59:59.999', ---- [EffectiveTo]
					 'Active', ---RowStatus
					 ?   ---ETLJobID
                          
                    UNION
                    SELECT-2, --[DateKey]
                          '19000102', --[FullDate]
                          -2, --[FiscalWeekNumber]
                          'Not Applicable Fiscal Week', --[FiscalWeekName]
					 -2, --- [FiscalWeekStartDateKey]
                          -2, --- [FiscalWeekEndDateKey]
                          'Not Applicable Holiday', --[HolidayName]
                          'Not Applicable Holiday Fiscal Week', --[HolidayFiscalWeekFlag]
						  -2,--- [FiscalDayNumber] 
	                      -2, ---[FiscalDayOfWeekNumber] 
	                      -2, ----[FiscalDayOfPeriodNumber] 
	                      -2, ---[FiscalDayOfQuarterNumber] 
	                      -2, ---[FiscalDayOfYearNumber] 
                          -2, --[FiscalWeekOfPeriodNumber]
                          'Not Applicable Fiscal Week of Period', --[FiscalWeekOfPeriodName]
                          -2, --[FiscalWeekOfQuarterNumber]
                          'Not Applicable Fiscal Week of Quarter', --[FiscalWeekOfQuarterName]
                          -2, --[FiscalWeekOfYearNumber]
                          'Not Applicable Fiscal Week of Year', --[FiscalWeekOfYearName]
                          -2, --[FiscalWeekSequenceNumber]
                          '19000102', --[FiscalWeekStartDate]
                          '19000102', --[FiscalWeekEndDate]
                          -2, --[FiscalPeriodNumber]
                          'Not Applicable Fiscal Period', --[FiscalPeriodName]
                          'N/A', --[FiscalPeriodType]
                          -2, --[FiscalPeriodOfYearNumber]
                          'Not Applicable Fiscal Period of Year', --[FiscalPeriodOfYearName]
                          -2, --[FiscalPeriodSequenceNumber]
                          '19000102', --[FiscalPeriodStartDate]
                          '19000102', --[FiscalPeriodEndDate]
                          -2, --[FiscalQuarterNumber]
                          'Not Applicable Fiscal Quarter', --[FiscalQuarterName]
                          -2, --[FiscalQuarterOfYearNumber]
                          'Not Applicable Fiscal Quarter of Year', --[FiscalQuarterOfYearName]
                          -2, --[FiscalQuarterSequenceNumber]
                          '19000102', --[FiscalQuarterStartDate]
                          '19000102', --[FiscalQuarterEndDate]
                          -2, --[FiscalYearNumber]
                          'Not Applicable Fiscal Year', --[FiscalYearName]
                          '19000102', --[FIscalYearStartDate]
                          '19000102', --[FiscalYearEndDate]
                           '1900-01-02', --[EffectiveFrom]
					  '12/31/9999 23:59:59.999', ---- [EffectiveTo]
					 'Active', ---RowStatus;
                           ? --ETLJobID
           "
EXEC dbo.spCMS_StagingToEDW_DimDiscountType
EXEC dbo.spCMS_StagingToEDW_DimFeeType
Exec [dbo].[spHR_StagingToEDW_DimHRUser]
EXEC dbo.spCMS_StagingToEDW_DimInvoiceType
EXEC dbo.spSalesForce_StagingToEDW_DimLead
EXEC dbo.spBING_EDW_Generate_DimLeadEventType
EXEC dbo.spSalesForce_StagingToEDW_DimLeadType
EXEC dbo.spHR_StagingToEDW_DimLeaveReason
EXEC [dbo].[spHR_StagingToEDW_DimLeaveType] 
" SELECT COUNT(1) AS DeleteCount 
From dbo.DimLifecycleStatus"
"SET IDENTITY_INSERT dbo.DimLifecycleStatus ON;

WITH LifecycleStatus
                  AS (
                  SELECT-1 AS LifecycleStatusKey,
                        'Unknown Lifecycle Status' AS LifecycleStatusName,
	        'A' AS RowStatus
                  UNION
                  SELECT-2 AS LifecycleStatusKey,
                        'Not Applicable Lifecycle Status' AS LifecycleStatusName,
	        'A' AS RowStatus
                  UNION
                  SELECT 1 AS LifecycleStatusKey,
                         'Pre-Enrolled (New)' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 2 AS LifecycleStatusKey,
                         'Pre-Enrolled (Existing)' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 3 AS LifecycleStatusKey,
                         'New' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 4 AS LifecycleStatusKey,
                         'Transferred' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 5 AS LifecycleStatusKey,
                         'Enrolled' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 6 AS LifecycleStatusKey,
                         'Reserved' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 7 AS LifecycleStatusKey,
                         'At-Risk (Disenrollment)' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 8 AS LifecycleStatusKey,
                         'At-Risk (A/R)' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 9 AS LifecycleStatusKey,
                         'Re-Enrolled (Short Term)' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 10 AS LifecycleStatusKey,
                         'Re-Enrolled (Long Term)' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 11 AS LifecycleStatusKey,
                         'Withdrawing' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 12 AS LifecycleStatusKey,
                         'Withdrawn' AS LifecycleStatusName,
	         'A' AS RowStatus)
                  INSERT INTO dbo.DimLifecycleStatus
                  ([LifecycleStatusKey],
                   [LifecycleStatusName],
	   [RowStatus],
                   [ETLJobID]
                  )
                         SELECT LifecycleStatusKey,
                                LifecycleStatusName,
                                RowStatus,
		?
                         FROM LifecycleStatus;

SELECT @@ROWCOUNT  AS SourceCount;

SET IDENTITY_INSERT dbo.DimLifecycleStatus OFF;"
 TRUNCATE TABLE dbo.DimLifecycleStatus
EXEC spHR_StagingToEDW_DimLocation
"DECLARE @Field MartLookup;
INSERT INTO @Field (FieldPath)
(SELECT FieldPath
FROM dbo.MartASALookup);

DECLARE @vSQL MartLookup;
INSERT @vSQL
EXEC dbo.spGL_Generate_ASA_SQLStatement @Field;

DECLARE @vSQLCommand VARCHAR(4000);
SET @vSQLCommand = (SELECT FieldPath FROM @vSQL)

SELECT @vSQLCommand AS vSQLCommand;"
"Execute dbo.spBeginAuditLog ? OUTPUT, ?,?;"
"IF EXISTS
(
    SELECT 1
    FROM dbo.DimAccountSubaccount
    WHERE AccountSubaccountKey < 0
)
BEGIN
    PRINT 'No Insert';
END;
ELSE
BEGIN
    SET IDENTITY_INSERT dbo.DimAccountSubaccount ON;

    INSERT INTO [dbo].[DimAccountSubaccount]
    (
        [AccountSubaccountKey],
        [AccountSubaccountID],
        [AccountSubaccountName],
        [AccountID],
        [AccountName],
        [SubaccountID],
        [SubaccountName],
        [ASATuitionType],
        [ASAFieldDepth],
        [ASAFieldLevel1ID],
        [ASAFieldLevel1Name],
        [ASAFieldLevel1Unary],
        [ASAFieldLevel1Sort],
        [ASAFieldLevel2ID],
        [ASAFieldLevel2Name],
        [ASAFieldLevel2Unary],
        [ASAFieldLevel2Sort],
        [ASAFieldLevel3ID],
        [ASAFieldLevel3Name],
        [ASAFieldLevel3Unary],
        [ASAFieldLevel3Sort],
        [ASAFieldLevel4ID],
        [ASAFieldLevel4Name],
        [ASAFieldLevel4Unary],
        [ASAFieldLevel4Sort],
        [ASAFieldLevel5ID],
        [ASAFieldLevel5Name],
        [ASAFieldLevel5Unary],
        [ASAFieldLevel5Sort],
        [ASAFieldLevel6ID],
        [ASAFieldLevel6Name],
        [ASAFieldLevel6Unary],
        [ASAFieldLevel6Sort],
        [ASAFieldLevel7ID],
        [ASAFieldLevel7Name],
        [ASAFieldLevel7Unary],
        [ASAFieldLevel7Sort],
        [ASAFieldLevel8ID],
        [ASAFieldLevel8Name],
        [ASAFieldLevel8Unary],
        [ASAFieldLevel8Sort],
        [ASAFieldLevel9ID],
        [ASAFieldLevel9Name],
        [ASAFieldLevel9Unary],
        [ASAFieldLevel9Sort],
        [ASAFieldLevel10ID],
        [ASAFieldLevel10Name],
        [ASAFieldLevel10Unary],
        [ASAFieldLevel10Sort],
        [ASAFieldLevel11ID],
        [ASAFieldLevel11Name],
        [ASAFieldLevel11Unary],
        [ASAFieldLevel11Sort],
        [ASAFieldLevel12ID],
        [ASAFieldLevel12Name],
        [ASAFieldLevel12Unary],
        [ASAFieldLevel12Sort],
        [SourceSystem],
        [EffectiveFrom],
        [EffectiveTo],
        [CreatedDate],
        [ModifiedDate],
        [DeletedDate],
        [RowStatus],
        [ETLJobID]
    )
    SELECT -1,
           -1,
           'Unknown AccountSubaccountName',
           -1,
           'Unknown AccountName',
           -1,
           'Unknown SubaccountName',
           'Unknown ASATuitionType',
           -1,                           -- [ASAFieldDepth]
           '0000.000000',                -- [ASAFieldLevel1ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel1Name]	
           1,                            -- [ASAFieldLevel1Unary]	
           99999,                        -- [ASAFieldLevel1Sort]
           '0000.000000',                -- [ASAFieldLevel2ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel2Name]	
           1,                            -- [ASAFieldLevel2Unary]	
           99999,                        -- [ASAFieldLevel2Sort]
           '0000.000000',                -- [ASAFieldLevel3ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel3Name]	
           1,                            -- [ASAFieldLevel3Unary]	
           99999,                        -- [ASAFieldLevel3Sort]
           '0000.000000',                -- [ASAFieldLevel4ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel4Name]	
           1,                            -- [ASAFieldLevel4Unary]	
           99999,                        -- [ASAFieldLevel4Sort]
           '0000.000000',                -- [ASAFieldLevel5ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel5Name]	
           1,                            -- [ASAFieldLevel5Unary]	
           99999,                        -- [ASAFieldLevel5Sort]
           '0000.000000',                -- [ASAFieldLevel6ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel6Name]	
           1,                            -- [ASAFieldLevel6Unary]	
           99999,                        -- [ASAFieldLevel6Sort]
           '0000.000000',                -- [ASAFieldLevel7ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel7Name]	
           1,                            -- [ASAFieldLevel7Unary]	
           99999,                        -- [ASAFieldLevel7Sort]
           '0000.000000',                -- [ASAFieldLevel8ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel8Name]	
           1,                            -- [ASAFieldLevel8Unary]	
           99999,                        -- [ASAFieldLevel8Sort]
           '0000.000000',                -- [ASAFieldLevel9ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel9Name]	
           1,                            -- [ASAFieldLevel9Unary]	
           99999,                        -- [ASAFieldLevel9Sort]
           '0000.000000',                -- [ASAFieldLevel10ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel10Name]	
           1,                            -- [ASAFieldLevel10Unary]	
           99999,                        -- [ASAFieldLevel10Sort]
           '0000.000000',                -- [ASAFieldLevel11ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel11Name]	
           1,                            -- [ASAFieldLevel11Unary]	
           99999,                        -- [ASAFieldLevel11Sort]
           '0000.000000',                -- [ASAFieldLevel12ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel12Name]	
           1,                            -- [ASAFieldLevel12Unary]	
           99999,                        -- [ASAFieldLevel12Sort]
           'UNK',
           '1900-01-01',
           '9999-12-31 23:59:59.999',
           GETDATE(),
           GETDATE(),
           NULL,
           'A',
           ?
    UNION
    SELECT -2,
           -2,
           'Unknown AccountSubaccountName',
           -2,
           'Unknown AccountName',
           -2,
           'Unknown SubaccountName',
           'Unknown ASATuitionType',
           -1,                           -- [ASAFieldDepth]
           '0000.000000',                -- [ASAFieldLevel1ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel1Name]	
           1,                            -- [ASAFieldLevel1Unary]	
           99999,                        -- [ASAFieldLevel1Sort]
           '0000.000000',                -- [ASAFieldLevel2ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel2Name]	
           1,                            -- [ASAFieldLevel2Unary]	
           99999,                        -- [ASAFieldLevel2Sort]
           '0000.000000',                -- [ASAFieldLevel3ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel3Name]	
           1,                            -- [ASAFieldLevel3Unary]	
           99999,                        -- [ASAFieldLevel3Sort]
           '0000.000000',                -- [ASAFieldLevel4ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel4Name]	
           1,                            -- [ASAFieldLevel4Unary]	
           99999,                        -- [ASAFieldLevel4Sort]
           '0000.000000',                -- [ASAFieldLevel5ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel5Name]	
           1,                            -- [ASAFieldLevel5Unary]	
           99999,                        -- [ASAFieldLevel5Sort]
           '0000.000000',                -- [ASAFieldLevel6ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel6Name]	
           1,                            -- [ASAFieldLevel6Unary]	
           99999,                        -- [ASAFieldLevel6Sort]
           '0000.000000',                -- [ASAFieldLevel7ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel7Name]	
           1,                            -- [ASAFieldLevel7Unary]	
           99999,                        -- [ASAFieldLevel7Sort]
           '0000.000000',                -- [ASAFieldLevel8ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel8Name]	
           1,                            -- [ASAFieldLevel8Unary]	
           99999,                        -- [ASAFieldLevel8Sort]
           '0000.000000',                -- [ASAFieldLevel9ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel9Name]	
           1,                            -- [ASAFieldLevel9Unary]	
           99999,                        -- [ASAFieldLevel9Sort]
           '0000.000000',                -- [ASAFieldLevel10ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel10Name]	
           1,                            -- [ASAFieldLevel10Unary]	
           99999,                        -- [ASAFieldLevel10Sort]
           '0000.000000',                -- [ASAFieldLevel11ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel11Name]	
           1,                            -- [ASAFieldLevel11Unary]	
           99999,                        -- [ASAFieldLevel11Sort]
           '0000.000000',                -- [ASAFieldLevel12ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel12Name]	
           1,                            -- [ASAFieldLevel12Unary]	
           99999,                        -- [ASAFieldLevel12Sort]
           'UNK',
           '1900-01-01',
           '9999-12-31 23:59:59.999',
           GETDATE(),
           GETDATE(),
           NULL,
           'A',
           ?;

    SET IDENTITY_INSERT dbo.DimAccountSubaccount OFF;
END;"
"EXECUTE [spGL_Staging_AccountSubAccountLanding] 
NULL, ? OUTPUT, ? OUTPUT
GO
"
"DECLARE @AuditID int = ?

SET IDENTITY_INSERT dbo.DimCostCenter ON 

IF NOT EXISTS (SELECT 1 FROM dbo.DimCostCenter WHERE CostCenterNumber = -1)
	BEGIN
		INSERT INTO dbo.DimCostCenter
		(
			CostCenterKey,
			CostCenterNumber,
			CostCenterName,
			CompanyID,
			CostCenterTypeID,
			CostCenterTypeName,
			BusinessUnitCode,
			BusinessUnitName,
			OrganizationLevelCode,
			OrganizationLevelName,
			FunctionCode,
			FunctionName,
			LineOfBusinessCode,
			LineOfBusinessName,
			LineOfBusinessCategoryCode,
			LineOfBusinessCategoryName,
			LineOfBusinessSubcategoryCode,
			LineOfBusinessSubcategoryName,
			CCHierarchyLevel1Name,
			CCHierarchyLevel2Name,
			CCHierarchyLevel3Name,
			CCHierarchyLevel4Name,
			CCHierarchyLevel5Name,
			CCHierarchyLevel6Name,
			CCHierarchyLevel7Name,
			CCHierarchyLevel8Name,
			CCHierarchyLevel9Name,
			CCHierarchyLevel10Name,
			CCHierarchyLevel11Name,
			CCOpenDate,
			CCClosedDate,
			CCReopenDate,
			CCReopenDateType,
			CCClassification,
			CCStatus,
			CCConsolidation,
			CCFlexAttribute1,
			CCFlexAttribute2,
			CCFlexAttribute3,
			CCFlexAttribute4,
			CCFlexAttribute5,
			OrgID,
			ParentOrgID,
			DefaultLocationID,
			OrgNumber,
			OrgHierarchyLevel1Name,
			OrgHierarchyLevel2Name,
			OrgHierarchyLevel3Name,
			OrgHierarchyLevel4Name,
			OrgHierarchyLevel5Name,
			OrgHierarchyLevel6Name,
			OrgHierarchyLevel7Name,
			OrgHierarchyLevel8Name,
			OrgHierarchyLevel9Name,
			OrgHierarchyLevel10Name,
			OrgHierarchyLevel11Name,
			AllName,
			ExecutiveFunctionName,
			ExecutiveFunctionLeaderName,
			ExecutiveSubFunctionName,
			ExecutiveSubFunctionLeaderName,
			CorporateFunctionName,
			CorporateSubFunctionName,
			DivisionName,
			DivisionLeaderName,
			RegionNumber,
			RegionName,
			RegionLeaderName,
			MarketNumber,
			MarketName,
			MarketLeaderName,
			SubMarketNumber,
			SubMarketName,
			SubMarketLeaderName,
			DistrictNumber,
			DistrictName,
			InterimDistrictNumber,
			InterimDistrictName,
			DistrictLeaderName,
			ActingDistrictLeaderName,
			InterimDistrictLeaderName,
			GroupNumber,
			GroupName,
			GroupLeaderName,
			SubgroupNumber,
			SubGroupName,
			SubGroupLeaderName,
			CampusNumber,
			CampusName,
			CampusLeaderName,
			CenterLeaderName,
			ActingCenterLeaderName,
			CategoryName,
			TypeCode,
			TypeName,
			PartnerGroupCode,
			PartnerGroupName,
			CenterGroupCode,
			CenterGroupName,
			DivisionLegacyName,
			BrandCode,
			BrandName,
			OrgFlexAttribute1,
			OrgFlexAttribute2,
			OrgFlexAttribute3,
			OrgFlexAttribute4,
			OrgFlexAttribute5,
			CenterCMSID,
			CenterCSSID,
			SiteHorizonID,
			CenterEnrollmentSourceSystem,
			CenterCMSMigrationDate,
			CenterCMSMigrationStatus,
			CenterLicensedCapacity,
			CenterBackupCareFlag,
			CenterChildCareSelectFlag,
			CenterPublicAllowedFlag,
			CenterOpenTime,
			CenterCloseTime,
			CenterStudentMinimumAge,
			CenterStudentMaximumAge,
			CenterOpenSunFlag,
			CenterOpenMonFlag,
			CenterOpenTueFlag,
			CenterOpenWedFlag,
			CenterOpenThuFlag,
			CenterOpenFriFlag,
			CenterOpenSatFlag,
			CenterFoodProgramStartDate,
			CenterFoodProgramEndDate,
			CenterRegistrationType,
			SiteSchoolDistrict,
			SiteClassYear,
			CenterURL,
			CenterMenuURL,
			CenterHasBreakfastFlag,
			CenterHasMorningSlackFlag,
			CenterHasLunchFlag,
			CenterHasAfternoonSnackFlag,
			CenterSpeaksASLFlag,
			CenterSpeaksArabicFlag,
			CenterSpeaksFrenchFlag,
			CenterSpeaksGermanFlag,
			CenterSpeaksHindiFlag,
			CenterSpeaksMandarinFlag,
			CenterSpeaksPunjabiFlag,
			CenterSpeaksSpanishFlag,
			CenterSpeaksOtherLanguages,
			CenterAccreditationAgencyCode,
			CenterAccreditationStartDate,
			CenterAccreditationExpirationDate,
			CenterAccreditationNextActivity,
			CenterAccreditationNextActivityDueDate,
			CenterAccreditationPrimaryStatus,
			CenterAccreditationProgramID,
			CenterQRISRating,
			CenterQRISRatingStartDate,
			CenterQRISRatingExpirationDate,
			CenterLatitude,
			City,
			[State],
			Zipcode,
			CenterOperationalCapacity,
			CenterLongitude,
			CenterCurrentHumanSigmaScore,
			CenterPreviousHumanSigmaScore,
			EDWEffectiveFrom,
			EDWEffectiveTo,
			EDWCreatedDate,
			EDWModifiedDate,
			EDWDeletedDate,
			EDWRowStatus,
			ETLJobId,
			Address1,
			Address2,
			Address3,
			County,
			Country,
			Timezone,
			PhoneNumber,
			Fax
		)
		VALUES
		(
			-1,
			'-1',
			'Unknown CostCenterName',
			'-1',
			'-1',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'1900-01-01',
			'1900-01-01',
			'1900-01-01',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			-1,
			-1,
			-1,
			'-1',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			-1,
			'-1',
			-1,
			'UNK',
			'1900-01-01',
			NULL,
			-1,
			'Unknown',
			'Unknown',
			'Unknown',
			NULL,
			NULL,
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'1900-01-01',
			'1900-01-01',
			'Unknown',
			'Unknown',
			-1,
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'1900-01-01',
			'1900-01-01',
			'Unknown',
			'1900-01-01',
			'Unknown',
			'Unknown',
			'Unknown',
			'1900-01-01',
			'1900-01-01',
			-1,
			'Unknown',
			NULL,
			'Unknown',
			-1,
			-1,
			'Unknown',
			'Unknown',
			'1900-01-01',
			'1900-01-01',
			'1900-01-01',
			'1900-01-01',
			NULL,
			'A',
			@AuditID,
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown'
		)
	END

IF NOT EXISTS (SELECT 1 FROM dbo.DimCostCenter WHERE CostCenterNumber = -2)
	BEGIN
		INSERT INTO dbo.DimCostCenter
		(
			CostCenterKey,
			CostCenterNumber,
			CostCenterName,
			CompanyID,
			CostCenterTypeID,
			CostCenterTypeName,
			BusinessUnitCode,
			BusinessUnitName,
			OrganizationLevelCode,
			OrganizationLevelName,
			FunctionCode,
			FunctionName,
			LineOfBusinessCode,
			LineOfBusinessName,
			LineOfBusinessCategoryCode,
			LineOfBusinessCategoryName,
			LineOfBusinessSubcategoryCode,
			LineOfBusinessSubcategoryName,
			CCHierarchyLevel1Name,
			CCHierarchyLevel2Name,
			CCHierarchyLevel3Name,
			CCHierarchyLevel4Name,
			CCHierarchyLevel5Name,
			CCHierarchyLevel6Name,
			CCHierarchyLevel7Name,
			CCHierarchyLevel8Name,
			CCHierarchyLevel9Name,
			CCHierarchyLevel10Name,
			CCHierarchyLevel11Name,
			CCOpenDate,
			CCClosedDate,
			CCReopenDate,
			CCReopenDateType,
			CCClassification,
			CCStatus,
			CCConsolidation,
			CCFlexAttribute1,
			CCFlexAttribute2,
			CCFlexAttribute3,
			CCFlexAttribute4,
			CCFlexAttribute5,
			OrgID,
			ParentOrgID,
			DefaultLocationID,
			OrgNumber,
			OrgHierarchyLevel1Name,
			OrgHierarchyLevel2Name,
			OrgHierarchyLevel3Name,
			OrgHierarchyLevel4Name,
			OrgHierarchyLevel5Name,
			OrgHierarchyLevel6Name,
			OrgHierarchyLevel7Name,
			OrgHierarchyLevel8Name,
			OrgHierarchyLevel9Name,
			OrgHierarchyLevel10Name,
			OrgHierarchyLevel11Name,
			AllName,
			ExecutiveFunctionName,
			ExecutiveFunctionLeaderName,
			ExecutiveSubFunctionName,
			ExecutiveSubFunctionLeaderName,
			CorporateFunctionName,
			CorporateSubFunctionName,
			DivisionName,
			DivisionLeaderName,
			RegionNumber,
			RegionName,
			RegionLeaderName,
			MarketNumber,
			MarketName,
			MarketLeaderName,
			SubMarketNumber,
			SubMarketName,
			SubMarketLeaderName,
			DistrictNumber,
			DistrictName,
			InterimDistrictNumber,
			InterimDistrictName,
			DistrictLeaderName,
			ActingDistrictLeaderName,
			InterimDistrictLeaderName,
			GroupNumber,
			GroupName,
			GroupLeaderName,
			SubgroupNumber,
			SubGroupName,
			SubGroupLeaderName,
			CampusNumber,
			CampusName,
			CampusLeaderName,
			CenterLeaderName,
			ActingCenterLeaderName,
			CategoryName,
			TypeCode,
			TypeName,
			PartnerGroupCode,
			PartnerGroupName,
			CenterGroupCode,
			CenterGroupName,
			DivisionLegacyName,
			BrandCode,
			BrandName,
			OrgFlexAttribute1,
			OrgFlexAttribute2,
			OrgFlexAttribute3,
			OrgFlexAttribute4,
			OrgFlexAttribute5,
			CenterCMSID,
			CenterCSSID,
			SiteHorizonID,
			CenterEnrollmentSourceSystem,
			CenterCMSMigrationDate,
			CenterCMSMigrationStatus,
			CenterLicensedCapacity,
			CenterBackupCareFlag,
			CenterChildCareSelectFlag,
			CenterPublicAllowedFlag,
			CenterOpenTime,
			CenterCloseTime,
			CenterStudentMinimumAge,
			CenterStudentMaximumAge,
			CenterOpenSunFlag,
			CenterOpenMonFlag,
			CenterOpenTueFlag,
			CenterOpenWedFlag,
			CenterOpenThuFlag,
			CenterOpenFriFlag,
			CenterOpenSatFlag,
			CenterFoodProgramStartDate,
			CenterFoodProgramEndDate,
			CenterRegistrationType,
			SiteSchoolDistrict,
			SiteClassYear,
			CenterURL,
			CenterMenuURL,
			CenterHasBreakfastFlag,
			CenterHasMorningSlackFlag,
			CenterHasLunchFlag,
			CenterHasAfternoonSnackFlag,
			CenterSpeaksASLFlag,
			CenterSpeaksArabicFlag,
			CenterSpeaksFrenchFlag,
			CenterSpeaksGermanFlag,
			CenterSpeaksHindiFlag,
			CenterSpeaksMandarinFlag,
			CenterSpeaksPunjabiFlag,
			CenterSpeaksSpanishFlag,
			CenterSpeaksOtherLanguages,
			CenterAccreditationAgencyCode,
			CenterAccreditationStartDate,
			CenterAccreditationExpirationDate,
			CenterAccreditationNextActivity,
			CenterAccreditationNextActivityDueDate,
			CenterAccreditationPrimaryStatus,
			CenterAccreditationProgramID,
			CenterQRISRating,
			CenterQRISRatingStartDate,
			CenterQRISRatingExpirationDate,
			CenterLatitude,
			City,
			[State],
			Zipcode,
			CenterOperationalCapacity,
			CenterLongitude,
			CenterCurrentHumanSigmaScore,
			CenterPreviousHumanSigmaScore,
			EDWEffectiveFrom,
			EDWEffectiveTo,
			EDWCreatedDate,
			EDWModifiedDate,
			EDWDeletedDate,
			EDWRowStatus,
			ETLJobId,
			Address1,
			Address2,
			Address3,
			County,
			Country,
			Timezone,
			PhoneNumber,
			Fax
		)
		VALUES
		(
			-2,
			'-2',
			'Not Applicable CostCenterName',
			'-2',
			'-2',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'1900-01-01',
			'1900-01-01',
			'1900-01-01',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			-2,
			-2,
			-2,
			'-2',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			-2,
			'-2',
			-2,
			'N/A',
			'1900-01-01',
			NULL,
			-2,
			'N/A',
			'N/A',
			'N/A',
			NULL,
			NULL,
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'1900-01-01',
			'1900-01-01',
			'N/A',
			'N/A',
			-2,
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'1900-01-01',
			'1900-01-01',
			'N/A',
			'1900-01-01',
			'N/A',
			'N/A',
			'N/A',
			'1900-01-01',
			'1900-01-01',
			-2,
			'N/A',
			NULL,
			'N/A',
			-2,
			-2,
			'N/A',
			'N/A',
			'1900-01-01',
			'1900-01-01',
			'1900-01-01',
			'1900-01-01',
			NULL,
			'A',
			@AuditID,
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A'
		)
	END

SET IDENTITY_INSERT dbo.DimCostCenter OFF
"
exec  [dbo].[spBING_EDW_Generate_DimCostCenter]
"UPDATE A
SET A.EDWEffectiveFrom = B.EDWEffectiveTo
FROM DW_MART..DimCostCenter A
    INNER JOIN
    (
        SELECT *
        FROM
        (
            SELECT *,
                   ROW_NUMBER() OVER (PARTITION BY B.CostCenterNumber ORDER BY B.EDWEffectiveTo DESC) AS RW
            FROM DW_MART..DimCostCenter B
            WHERE B.CostCenterNumber IN
                  (
                      SELECT CostCenterNumber
                      FROM DW_MART..DimCostCenter
                      WHERE EDWEffectiveFrom = '1900-01-01 00:00:00.000'
                      GROUP BY CostCenterNumber
                      HAVING COUNT(1) > 1
                  )
                  AND B.EDWRowStatus = 'H'
        ) A
        WHERE A.RW = 1
    ) B
        ON A.CostCenterNumber = B.CostCenterNumber
           AND A.EDWEffectiveFrom = '1900-01-01 00:00:00.000'
           AND A.EDWEffectiveTo = '9999-12-31 23:59:59.999';
"
truncate table dbo.DimMartCostcenterLanding
"UPDATE AuditLog
SET DeleteCount = ?
WHERE AuditID = ?"
"IF EXISTS
( SELECT 1 FROM dbo.DimPartner WHERE PartnerKey < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
		SET IDENTITY_INSERT dbo.DimPartner ON;

INSERT INTO [dbo].[DimPartner]
		([PartnerKey]
		,[PartnerID]
		,[PartnerName]
		,[EffectiveFrom]
		,[EffectiveTo]
		,[CreatedDate]
		,[ModifiedDate]
		,[DeletedDate]
		,[RowStatus]
		,[ETLJobID])
	SELECT-1,
			-1,
			'Unknown PartnerName',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			0
	UNION
	SELECT-2,
			-2,
			'Not Applicable PartnerName',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			0
SET IDENTITY_INSERT dbo.DimPartner OFF;
END;"
"EXECUTE [dbo].[spDimPartnerLoad] null, null, ?, ? output;"
Truncate table DimPartnerLanding
"IF EXISTS
( SELECT 1 FROM dbo.DimProgram WHERE ProgramKey < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
             SET IDENTITY_INSERT dbo.DimProgram ON;
             INSERT INTO [dbo].[DimProgram]
             ([ProgramKey],
              [ProgramID],
              [ProgramName],
              [SourceSystem],
              [EffectiveFrom],
              [EffectiveTo],
              [CreatedDate],
              [ModifiedDate],
              [DeletedDate],
              [RowStatus],
              [ETLJobID]
             )
                    SELECT-1,
                          -1,
                          'Unknown Program',
                          'UNK',
                          '1900-01-01 00:00:00.000',
                          '9999-12-31 23:59:59.999',
                          GETDATE(),
                          GETDATE(),
                          NULL,
                         'A',
                         ?
                    UNION
                    SELECT-2,
                          -2,
                          'Not Applicable Program',
	          'UNK',
                          '1900-01-01 00:00:00.000',
                          '9999-12-31 23:59:59.999',
                          GETDATE(),
                          GETDATE(),
                          NULL,
                         'A',
                         ?;
        
                         SET IDENTITY_INSERT dbo.DimProgram OFF;
						 END;

						"
"IF EXISTS
( SELECT 1 FROM dbo.DimSession WHERE SessionKey < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
		SET IDENTITY_INSERT dbo.DimSession ON;

INSERT INTO [dbo].[DimSession]
		([SessionKey]
		,[SessionID]
		,[SessionName]
		,[SourceSystem]
		,[EffectiveFrom]
		,[EffectiveTo]
		,[CreatedDate]
		,[ModifiedDate]
		,[DeletedDate]
		,[RowStatus]
		,[ETLJobID])
	SELECT-1,
			-1,
			'Unknown SessionName',
			'UNK',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?
	UNION
	SELECT-2,
			-2, 
			'Not Applicable SessionName',
			'UNK',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?;

SET IDENTITY_INSERT dbo.DimSession OFF;
END;"
"
  IF EXISTS
( SELECT 1 FROM dbo.[DimSponsor] WHERE [SponsorKey] < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
 SET IDENTITY_INSERT dbo.DimSponsor ON;
             INSERT INTO [dbo].[DimSponsor]
             ([SponsorKey],
              [SponsorID],
			  [SponsorFirstName],
			  [SponsorLastName],
			  [SponsorFullName],
			  [SponsorStatus],
			  [SourceSystem],
              [CSSCenterNumber],
	          [CSSFamilyNumber],
		      [EffectiveFrom],
		      [EffectiveTo],
		      [CreatedDate],
		      [ModifiedDate],
		      [DeletedDate],
		      [RowStatus],
		      [ETLJobID]
              )
             SELECT-1,
             -1,
			'Unknown FirstName',
			'Unknown LastName',
			'Unknown FullName',
			'Unknown SponsorStatus',
			 'UNK',
            '-1',
            '-1',
		    '1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?
            UNION
            SELECT-2,
            -2,
			'Unknown FirstName',
			'Unknown LastName',
			'Unknown FullName',
			'Unknown SponsorStatus',
			'UNK',
            '-2',
            '-2',
		    '1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?;
            SET IDENTITY_INSERT dbo.DimSponsor OFF;
			END;

SELECT * FROM DW_Mart.dbo.DimSponsor
WHERE SponsorKey<0"
"EXECUTE [dbo].[spDimSponsorLoad] null, null, ?, ? output;"
Truncate table DimSponsorLanding
"IF EXISTS
( SELECT 1 FROM dbo.DimStudent WHERE StudentKey < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
		SET IDENTITY_INSERT dbo.DimStudent ON;

INSERT INTO [dbo].[DimStudent]
		([StudentKey]
		,[StudentID]
		,[StudentFirstName]
		,[StudentLastName]
		,[StudentStatus]
		,[StudentFirstEnrollmentDate]
		,[FiscalWeekNumber]
		,[CSSCenterNumber]
		,[CSSFamilyNumber]
		,[CSSStudentNumber]
		,[SourceSystem]
		,[EffectiveFrom]
		,[EffectiveTo]
		,[CreatedDate]
		,[ModifiedDate]
		,[DeletedDate]
		,[RowStatus]
		,[ETLJobID]
		,[StudentFullName]
		,[StudentBirthDate])
	SELECT-1,
			-1,
			'Unknown StudentFirstName',
			'Unknown StudentLastName',
			'Unknown StudentStatus',
			'1900-01-01',
			-1,
			-1,
			-1,
			-1,
			'UNK',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?,
			'Unknown Student Name',
			'Unknown Student Birth Date'
	UNION
	SELECT-2,
			-2,
			'Unknown StudentFirstName',
			'Unknown StudentLastName',
			'Unknown StudentStatus',
			'1900-01-01',
			-1,
			-1,
			-1,
			-1,
			'UNK',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?,
			'Unknown Student Name',
			'Unknown Student Birth Date';

SET IDENTITY_INSERT dbo.DimStudent OFF;
END;"
"EXECUTE [dbo].[spDimStudentLoad] null, null, ?, ? output;"
Truncate table DimStudentLanding
"IF EXISTS
( SELECT 1 FROM dbo.DimTier WHERE SourceSystem='CSS' )
BEGIN 
 PRINT 'No Insert' 
END
ELSE 


INSERT INTO [dbo].[DimTier]
  ([TierID]
  ,[TierName]
  ,[CSSTierNumber]
  ,[SourceSystem]
  ,[EffectiveFrom]
  ,[EffectiveTo]
  ,[CreatedDate]
  ,[ModifiedDate]
  ,[DeletedDate]
  ,[RowStatus]
  ,[ETLJobID])
 SELECT
   -2,
   'T1CSS',
   1,
   'CSS',
   '1900-01-01',
   '9999-12-31 23:59:59.999',
   GETDATE(),
   GETDATE(),
   NULL,
   'A',
   ?
 UNION
 SELECT
   -2,
   'T2CSS',
   2,
   'CSS',
   '1900-01-01',
   '9999-12-31 23:59:59.999',
   GETDATE(),
   GETDATE(),
   NULL,
   'A',
   ?
   UNION
 SELECT
   -2,
   'T3CSS',
    3,
   'CSS',
   '1900-01-01',
   '9999-12-31 23:59:59.999',
   GETDATE(),
   GETDATE(),
   NULL,
   'A',
   ?
   UNION
 SELECT
   -2,
   'T4CSS',
    4,
   'CSS',
   '1900-01-01',
   '9999-12-31 23:59:59.999',
   GETDATE(),
   GETDATE(),
   NULL,
   'A',
   ?;


"
"IF EXISTS
( SELECT 1 FROM dbo.DimTier WHERE TierKey < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
		SET IDENTITY_INSERT dbo.DimTier ON;

INSERT INTO [dbo].[DimTier]
		([TierKey]
		,[TierID]
		,[TierName]                                
		,[SourceSystem]
                                ,[CSSTierNumber]
		,[EffectiveFrom]
		,[EffectiveTo]
		,[CreatedDate]
		,[ModifiedDate]
		,[DeletedDate]
		,[RowStatus]
		,[ETLJobID])
	SELECT-1,
			-1,
			'Unknown TierName',
			'UNK',
                                                -1,
                                	'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?
	UNION
	SELECT-2,
			-2, 
			'Not Applicable TierName',                                                 
                                                 'UNK',
                                                 -2,
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?;

SET IDENTITY_INSERT dbo.DimTier OFF;
END;"
" 
 IF EXISTS
( SELECT 1 FROM dbo.[DimTuitionAssistanceProvider] WHERE [TuitionAssistanceProviderKey] < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
 SET IDENTITY_INSERT dbo.DimTuitionAssistanceProvider ON;
             INSERT INTO [dbo].[DimTuitionAssistanceProvider]
             ([TuitionAssistanceProviderKey],
              [TuitionAssistanceProviderID],
              [TuitionAssistanceProviderName],
              [TuitionAssistanceProviderType],
			  [SourceSystem],
              [CSSCenterNumber]
             ,[CSSCustomerCode]
		,[EffectiveFrom]
		,[EffectiveTo]
		,[CreatedDate]
		,[ModifiedDate]
		,[DeletedDate]
		,[RowStatus]
		,[ETLJobID]

             )
                    SELECT-1,
                          -1,
                          'Unknown Tuition Assistance Provider',
                          'Unknown Tuition Assistance Provider Type',
						  'UNK',
                           '-1',
                           '-1',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?
                         
                    UNION
                    SELECT-2,
                          -2,
                          'Not Applicable Tuition Assistance Provider',
                          'Not Applicable  Tuition Assistance Provider Type',
                         'UNK',
                        '-2',
                        '-2', 
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?;
          
             SET IDENTITY_INSERT dbo.DimTuitionAssistanceProvider OFF;
			 END;"
SELECT COUNT(1) AS vInsertCount FROM DimMeasureLanding(NOLOCK)
Truncate table DimMeasureLanding
EXEC spHR_StagingToEDW_DimOrganization
Exec [dbo].[spHR_StagingToEDW_DimPayBasis]
EXEC dbo.spHR_StagingToEDW_DimPayGrade
Execute [dbo].[spCMS_StagingToEDW_DimPaymentType];
EXEC dbo.spHR_StagingToEDW_DimPayRateChangeReason
EXEC dbo.spMISC_StagingToEDW_DimPayrollType
EXEC spHR_StagingToEDW_DimPeopleGroup
EXEC dbo.spHR_StagingToEDW_DimPerformanceRating;
EXEC dbo.spHR_StagingToEDW_DimPerson
EXEC dbo.spHR_StagingToEDW_DimPosition
EXEC dbo.spCMS_StagingToEDW_DimProgram
EXEC [dbo].[spHR_StagingToEDW_DimQualificationType]
EXEC dbo.spMISC_StagingToEDW_DimReportProfile
Truncate table DimRetentionBaseWeek
 EXEC [dbo].[spCMS_StagingToEDW_DimScheduleType]
" SELECT COUNT(1) AS DeleteCount 
From dbo.DimScheduleWeek"
"WITH Numbers(N) -- CTE building the 7 weekday numbers
                  AS (
                  SELECT N
                  FROM(VALUES(1), (2), (3), (4), (5), (6), (7)) Numbers(N)),
                  Recur(N,
                        CalendarID) -- CTE building a combinations of Days per Week as a CalendarID
                  AS (
                  SELECT N,
                         CAST(N AS VARCHAR(1000))
                  FROM Numbers
                  UNION ALL
                  SELECT n.N,
                         CAST(r.CalendarID+','+CAST(n.N AS VARCHAR(10)) AS VARCHAR(1000))
                  FROM Recur r
                       INNER JOIN Numbers n ON n.N > r.N),
                  ScheduleWeekFlags -- CTE building a dataset of 7 flag columns for each days of the week, linking to the CalendarID
                  AS (
                  SELECT CalendarID,
                         CASE
                             WHEN CalendarID LIKE '%1%'
                             THEN '1'
                             ELSE '0'
                         END S,
                         CASE
                             WHEN CalendarID LIKE '%2%'
                             THEN '1'
                             ELSE '0'
                         END M,
                         CASE
                             WHEN CalendarID LIKE '%3%'
                             THEN '1'
                             ELSE '0'
                         END T,
                         CASE
                             WHEN CalendarID LIKE '%4%'
                             THEN '1'
                             ELSE '0'
                         END W,
                         CASE
                             WHEN CalendarID LIKE '%5%'
                             THEN '1'
                             ELSE '0'
                         END TH,
                         CASE
                             WHEN CalendarID LIKE '%6%'
                             THEN '1'
                             ELSE '0'
                         END F,
                         CASE
                             WHEN CalendarID LIKE '%7%'
                             THEN '1'
                             ELSE '0'
                         END SA
                  FROM Recur)
                  INSERT INTO dbo.DimScheduleWeek
                  ([ScheduleWeekName],
                  [RowStatus],
                   [ETLJobID]
                 )
                         SELECT CAST(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(r.CalendarID, '1', 'Su'), '2', 'M'), '3', 'Tu'), '4', 'W'), '5', 'Th'), '6', 'F'), '7', 'Sa') AS VARCHAR(50)) AS ScheduleWeekName,
                                'A' AS RowStatus,
                                ?
                         FROM Recur r
                              JOIN ScheduleWeekFlags s ON r.CalendarID = s.CalendarID
                         ORDER BY LEN(r.CalendarID),
                                  r.CalendarID;
             SELECT @@ROWCOUNT + 2 AS SourceCount;
    
                "
"DBCC CHECKIDENT('[DimScheduleWeek]', RESEED, 1);
SET IDENTITY_INSERT dbo.DimScheduleWeek ON;
INSERT INTO [dbo].[DimScheduleWeek]
([ScheduleWeekKey],
 [ScheduleWeekName],
 [RowStatus],
 [ETLJobID]
)
       SELECT-1,
             'Unknown Schedule Week',
              'A',
             ?
       UNION
       SELECT-2,
             'Not Applicable Schedule Week',
             'A',
             ?;
SET IDENTITY_INSERT dbo.DimScheduleWeek OFF;"
 TRUNCATE TABLE dbo.DimScheduleWeek
EXEC dbo.spCMS_StagingToEDW_DimSession
Exec [dbo].[spHR_StagingToEDW_DimSpecialInfo]
Execute [dbo].[spCMS_StagingToEDW_DimSponsor]
EXEC dbo.spCMS_StagingToEDW_DimStudent
Exec [dbo].[spCMS_StagingToEDW_DimTier];
"DECLARE @DelCount INT, @InsCount INT, @AudID INT

SET @AudID = ?
SET @DelCount = (SELECT COUNT(1) FROM dbo.DimTimeCalculation)

TRUNCATE TABLE dbo.DimTimeCalculation

SET IDENTITY_INSERT dbo.DimTimeCalculation ON;


;WITH DimTimeCalc
AS (
	    SELECT -2 AS TCKey,	'Not Applicable Time Calculation' AS CalcName
		UNION ALL
		SELECT -1 AS TCKey,	'Unknown Time Calculation' AS CalcName
		UNION ALL
		SELECT 1 AS TCKey, 'Selection' AS CalcName
		UNION ALL
		SELECT 2 AS TCKey, 'PTD' AS CalcName
		UNION ALL
		SELECT 3 AS TCKey, 'QTD' AS CalcName
		UNION ALL
		SELECT 5 AS TCKey, 'YTD' AS CalcName
)
--SELECT * FROM DimTimeCalc+

INSERT INTO [dbo].[DimTimeCalculation]
(	  [TimeCalculationKey]
	 ,[TimeCalculationName]
     ,[EDWEffectiveFrom]
     ,[EDWEffectiveTo]
     ,[EDWRowStatus]
     ,[ETLJobID]			)
SELECT TCKey AS TimeCalculationKey,
       CalcName AS TimeCalculationName,
       CAST('1900-01-01 00:00:00.000' AS DATE) AS EffectiveFrom,
	   CAST('9999-12-31 23:59:59.999' AS DATE) AS EffectiveTo,
	   'A' AS RowStatus,
       @AudID As ETLJobID
FROM DimTimeCalc
ORDER BY TCKey;


--Get Insert Count
SET @InsCount = (SELECT COUNT(1) FROM dbo.DimTimeCalculation)


SET IDENTITY_INSERT dbo.DimTimeCalculation OFF;

SELECT @InsCount AS InsCount, @DelCount AS DelCount;"
EXEC dbo.spCMS_StagingToEDW_DimTuitionAssistanceProvider;
EXEC dbo.spSalesForce_StagingToEDW_DimWebCampaign;
EXEC dbo.spCMS_StagingToEDW_FactAdjustment
EXEC spBackupTranLog 'BING_EDW'
EXEC spCMS_BatchLoad_StagingToEDW_FactARBalanceSnapshot
Exec [dbo].[spCSS_BatchLoad_StagingToEDW_FactARBalanceSnapshot]
EXEC dbo.spCMS_BatchLoad_StagingToEDW_FactBilling
EXEC spGL_BatchLoad_StagingToEDW_FactCenterStatSnapshot
EXEC dbo.spHR_StagingToEDW_FactEmployeeAssessment
EXEC dbo.spHR_StagingToEDW_FactEmployeeAssignment
EXEC dbo.spHR_StagingToEDW_FactEmployeeCompliance
EXEC dbo.spHR_StagingToEDW_FactEmployeeLeave
EXEC dbo.spHR_StagingToEDW_FactEmployeePayRate
EXEC dbo.spHR_StagingToEDW_FactEmployeePerformance
EXEC [dbo].[spHR_StagingToEDW_FactEmployeeQualification]
EXEC spCMS_BatchLoad_StagingToEDW_FactFTESnapshot
Exec [dbo]. spMISC_StagingToEDW_FactFTESnapshot
Exec [dbo].[spCambridge_BatchLoad_StagingToEDW_FactFTESnapshot]
EXEC spGL_BatchLoad_StagingToEDW_FactGLBalance
EXEC dbo.spMISC_BatchLoad_StagingToEDW_FactGLBalancePlanAllocation
"Exec [dbo].spMISC_StagingToEDW_FactLaborHourACQ
NULL,
?,
NULL"
EXEC spMISC_BatchLoad_StagingToEDW_FactLaborHourActual
EXEC spMISC_BatchLoad_StagingToEDW_FactLaborHourTarget
EXEC spMISC_BatchLoad_StagingToEDW_FactLaborHourTargetLegacy
"EXEC 
spCambridge_BatchLoad_StagingToEDW_FactLaborHourTarget"
EXEC spMISC_BatchLoad_StagingToEDW_FactLaborSalary
EXEC dbo.spSalesForce_StagingToEDW_FactLeadEvent
EXEC dbo.spSalesForce_StagingToEDW_FactLeadPipeline;
EXEC spCMS_BatchLoad_StagingToEDW_FactLifecycleStatusSnapshot
EXEC spCMS_BatchLoad_StagingToEDW_FactNetRevenue
"EXEC spMISC_StagingToEDW_FactNetRevenueACQ
   NULL
  ,?
  ,NULL"
EXEC spHOR_BatchLoad_StagingToEDW_FactNetRevenue
EXEC spPRO_BatchLoad_StagingToEDW_FactNetRevenue
"Execute spEndAuditLog ?,?,?,?,?"
"IF EXISTS
(SELECT 1
FROM ETLBatchControl(NOLOCK)
WHERE EventName = ?)

BEGIN
 (SELECT COALESCE(LastProcessedDate,'19000101') AS  LastProcessedDate 
 FROM ETLBatchControl(NOLOCK)
 WHERE EventName = ?)

END

ELSE 

BEGIN
 INSERT INTO ETLBatchControl(EventName, LastProcessedDate, Status) VALUES
  (?, NULL, NULL);

SELECT '1900-01-01' AS  LastProcessedDate;
END"
SELECT COUNT(1) AS InsertCount FROM dbo.FactPartnerVerifiedSponsor WHERE  CreatedDate>?
"-------------------------------------------------------------------------------------------------------
UPDATE FCT
SET FCT.PartnerAssignmentEndDate = GETDATE()
  , FCT.ModifiedDate = GETDATE()
  , FCT.Effectiveto = CONVERT(Date, GETDATE())
  , FCT.RowStatus='H'
  ,FCT.ETLJobID=?
FROM DW_Mart.dbo.FactPartnerVerifiedSponsor                    FCT
    JOIN DW_Mart.dbo.DimSponsor                                Spon
        ON FCT.SponsorKey = Spon.SponsorKey
    LEFT JOIN DW_Mart.dbo.DimPartner                           Prtnr
        ON FCT.PartnerKey = Prtnr.PartnerKey
     JOIN DW_Landing.dbo.FactPartnerVerifiedSponsorLanding Ldng
        ON Ldng.SponsorID = Spon.SponsorID
WHERE (COALESCE(Ldng.PartnerID, '-1') <> COALESCE(Prtnr.PartnerID, '-1') OR COALESCE(Ldng.PartnerAssignmentStartDate,'1900-01-01')<>COALESCE(FCT.PartnerAssignmentStartDate,'1900-01-01'))
      AND FCT.PartnerAssignmentEndDate IS NULL  AND FCT.RowStatus='A'
-------------------------------------------------------------------------------------------------------
UPDATE FCT
SET FCT.PartnerVerificationEndDate = GETDATE()
  , FCT.ModifiedDate = GETDATE()
  , FCT.EffectiveTo = CONVERT(Date, GETDATE())
  , FCT.RowStatus='H'
  ,FCT.ETLJobID=?
FROM DW_Mart.dbo.FactPartnerVerifiedSponsor                    FCT
    JOIN DW_Mart.dbo.DimSponsor                                Spon
        ON FCT.SponsorKey = Spon.SponsorKey
    LEFT JOIN DW_Mart.dbo.DimPartner                           Prtnr
        ON FCT.PartnerKey = Prtnr.PartnerKey
     JOIN DW_Landing.dbo.FactPartnerVerifiedSponsorLanding Ldng
        ON Ldng.SponsorID = Spon.SponsorID
WHERE (
          COALESCE(Ldng.PartnerID, '-1') <> COALESCE(Prtnr.PartnerID, '-1')
          OR (Ldng.isPartnerVerified <> FCT.isPartnerVerified)
		  OR(COALESCE(Convert(Date,ldng.PartnerVerificationStartDate),'1900-01-01')<>COALESCE(Convert(Date,Fct.PartnerVerificationStartDate),'1900-01-01')) 
      )
      AND FCT.PartnerVerificationEndDate IS NULL  AND FCT.RowStatus='A'
-------------------------------------------------------------------------------------------------------"
"UPDATE ETLBatchControl
SET LastProcessedDate = ?,
Status = 'Success'
WHERE EventName = ?"
SELECT COUNT(1) AS UpdateCount FROM dbo.FactPartnerVerifiedSponsor WHERE CreatedDate<>ModifiedDate AND ModifiedDate>?
TRUNCATE TABLE dbo.FactPartnerVerifiedSponsorLanding
EXEC dbo.spCMS_BatchLoad_StagingToEDW_FactPayment
EXEC dbo.spCMS_StagingToEDW_FactPaymentApplied
EXEC dbo.spHR_StagingToEDW_FactPersonSpecialInfo
"IF OBJECT_ID('FactProgramDetailUpdate', 'U') IS NOT NULL 
	DROP TABLE FactProgramDetailUpdate; 

CREATE TABLE [FactProgramDetailUpdate](
	[ProgramDetailID] [int] NOT NULL,
	[CenterKey] [int] NOT NULL,
	[ProgramKey] [int] NOT NULL,
	[StudentTeacherRatio] [int] NOT NULL,
	[StudentMinimumAgeMonths] [int] NOT NULL,
	[StudentMaximumAgeMonths] [int] NOT NULL,
	[EDWCreatedDate] [datetime2](7) NOT NULL,
	[EDWCreatedBy] [varchar](50) NOT NULL,
	[EDWModifiedDate] [datetime2](7) NOT NULL,
	[EDWModifiedBy] [varchar](50) NOT NULL,
	[Deleted] [datetime2](7) NULL
)
"
DROP TABLE [FactProgramDetailUpdate]
"UPDATE EDWETLBatchControl
SET LastProcessedDate = ?, Status = 'Success'
WHERE EventName = 'FactProgramDetail'"
"DELETE f 
FROM FactProgramDetail f
INNER JOIN FactProgramDetailUpdate u
ON f.ProgramDetailID = u.ProgramDetailID 
AND u.Deleted IS NULL

INSERT INTO FactProgramDetail
SELECT ProgramDetailID, CenterKey, ProgramKey, StudentTeacherRatio, StudentMinimumAgeMonths, StudentMaximumAgeMonths,
EDWCreatedDate, EDWCreatedBy, EDWModifiedDate, EDWModifiedBy, Deleted           
FROM FactProgramDetailUpdate WHERE Deleted IS NULL

SELECT @@ROWCOUNT AS UpdateCount"
"UPDATE dest 
SET	dest.Deleted =  upd.Deleted
   ,dest.EDWModifiedDate = upd.Deleted
FROM FactProgramDetail dest
INNER JOIN FactProgramDetailUpdate upd
ON dest.ProgramDetailID = upd.ProgramDetailID
AND upd.Deleted IS NOT NULL

SELECT @@ROWCOUNT AS DeleteCount"
EXEC dbo.spCMS_StagingToEDW_FactSessionEnrollment
EXEC dbo.spCMS_StagingToEDW_FactTierAssignment
"CREATE VIEW [dbo].[vFactFTESnapshot]
WITH SCHEMABINDING
AS
     SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber, 
            f.AccountSubaccountKey, 
            COUNT_BIG(*) AS [Count], 
            SUM(f.FTE) AS FTE
     FROM dbo.FactFTESnapshot AS f
          JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
          JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
          JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber, 
              f.AccountSubaccountKey;"
"CREATE VIEW  [dbo].[vFactGLBalancePlanAllocation]
WITH SCHEMABINDING
AS
    SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber, 
   dm.GLMetricTypeCode,
   dm.GLMetricTypeKey,
            f.AccountSubaccountKey,
   COUNT_BIG(*) AS [Count],
   SUM(f.GLBalancePlanAllocationAmount) AS GLBalancePlanAllocationAmount
 FROM [dbo].[FactGLBalancePlanAllocation] AS f
      JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
         JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
   JOIN dbo.DimGLMetricType AS dm ON dm.GLMetricTypeKey=f.GLMetricTypeKey
   JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber,
     dm.GLMetricTypeCode,
     dm.GLMetricTypeKey,
              f.AccountSubaccountKey;"
"CREATE VIEW [dbo].[vFactLaborHour]
WITH SCHEMABINDING
AS
     SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber,
   f.DataScenarioKey,
            ds.DataScenarioName, 
            f.AccountSubaccountKey, 
            COUNT_BIG(*) AS [Count], 
            SUM(f.[Hours]) AS [Hours],
            f.IsTSEF
     FROM [dbo].[FactLaborHour] AS f
          JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
          JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
          JOIN dbo.DimDataScenario AS ds ON ds.DataScenarioKey = f.DataScenarioKey
          JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber,
     f.DataScenarioKey,
              ds.DataScenarioName, 
              f.AccountSubaccountKey,
 f.IsTSEF;"
"CREATE VIEW  [dbo].[vFactLaborSalary]
WITH SCHEMABINDING
AS
    SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber, 
            f.AccountSubaccountKey,
   COUNT_BIG(*) AS [Count],
   SUM(f.NetAmount) AS [NetAmount]
 FROM [dbo].[FactLaborSalary] AS f
      JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
         JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
   JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber, 
              f.AccountSubaccountKey;"
"CREATE VIEW [dbo].[vFactNetRevenue] 
WITH SCHEMABINDING
 AS 
SELECT d.FiscalWeekNumber
      ,d.FiscalWeekEndDate 
      ,mcc.CostCenterKey 
      ,mcc.CostCenterNumber 
      ,f.AccountSubaccountKey 
      ,COUNT_BIG(*) AS [Count] 
   ,SUM(f.NetRevenueAmount) AS NetRevenueAmount
 FROM dbo.FactNetRevenue AS f
    JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
          JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
          JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber, 
              f.AccountSubaccountKey;"
"IF OBJECT_ID('dbo.vFactFTESnapshot') IS NOT NULL
	DROP VIEW [dbo].[vFactFTESnapshot];"
"IF OBJECT_ID('[dbo].[vFactGLBalancePlanAllocation]')IS NOT NULL
 DROP VIEW [dbo].[vFactGLBalancePlanAllocation];"
"IF OBJECT_ID('[dbo].[vFactLaborHour]')IS NOT NULL
 DROP VIEW [dbo].[vFactLaborHour];"
"IF OBJECT_ID('[dbo].[vFactLaborSalary]')IS NOT NULL
 DROP VIEW [dbo].[vFactLaborSalary];"
"IF OBJECT_ID('[dbo].[vFactNetRevenue]')IS NOT NULL
 DROP VIEW [dbo].[vFactNetRevenue];"
"CREATE UNIQUE CLUSTERED INDEX CIS_vFactFTESnapshot_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey ON [dbo].[vFactFTESnapshot](FiscalWeekNumber, CostCenterKey, AccountSubaccountKey);"
"CREATE UNIQUE CLUSTERED INDEX [CIS_vFactLaborHour_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_DataScenarioKey]
ON [dbo].[vFactLaborHour]([FiscalWeekNumber] ASC, [CostCenterKey] ASC, [AccountSubaccountKey] ASC, [DataScenarioKey] ASC);
"
"CREATE UNIQUE CLUSTERED INDEX [CIS_vFactLaborSalary_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey]
    ON [dbo].[vFactLaborSalary]([FiscalWeekNumber] ASC, [CostCenterKey] ASC, [AccountSubaccountKey] ASC);"
"CREATE UNIQUE CLUSTERED INDEX [CIS_vFactGLBalancePlanAllocation_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_GLMetricTypeKey]
    ON [dbo].[vFactGLBalancePlanAllocation]([FiscalWeekNumber] ASC, [CostCenterKey] ASC, [AccountSubaccountKey] ASC, [GLMetricTypeKey] ASC);"
"CREATE UNIQUE CLUSTERED INDEX [CIS_vFactNetRevenue_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey]
    ON [dbo].[vFactNetRevenue]([FiscalWeekNumber] ASC, [CostCenterKey] ASC, [AccountSubaccountKey] ASC);"
"/*--------------Comp---------------*/

INSERT INTO [dbo].DimCostCenter
SELECT 
      [CostCenterNumber]
      ,[CostCenterName]
      ,[CompanyID]
      ,[CostCenterTypeID]
      ,[CostCenterTypeName]
      ,[BusinessUnitCode]
      ,[BusinessUnitName]
      ,[OrganizationLevelCode]
      ,[OrganizationLevelName]
      ,[FunctionCode]
      ,[FunctionName]
      ,[LineOfBusinessCode]
      ,[LineOfBusinessName]
      ,[LineOfBusinessCategoryCode]
      ,[LineOfBusinessCategoryName]
      ,[LineOfBusinessSubcategoryCode]
      ,[LineOfBusinessSubcategoryName]
      ,[CCHierarchyLevel1Name]
      ,[CCHierarchyLevel2Name]
      ,[CCHierarchyLevel3Name]
      ,[CCHierarchyLevel4Name]
      ,[CCHierarchyLevel5Name]
      ,[CCHierarchyLevel6Name]
      ,[CCHierarchyLevel7Name]
      ,[CCHierarchyLevel8Name]
      ,[CCHierarchyLevel9Name]
      ,[CCHierarchyLevel10Name]
      ,[CCHierarchyLevel11Name]
      ,[CCOpenDate]
      ,[CCClosedDate]
      ,[CCReopenDate]
      ,[CCReopenDateType]
      ,[CCClassification]
      ,'Active - Non-Comp' AS [CCCompStatus]
      ,[CCStatus]
      ,[CCConsolidation]
      ,[CCFlexAttribute1]
      ,[CCFlexAttribute2]
      ,[CCFlexAttribute3]
      ,[CCFlexAttribute4]
      ,[CCFlexAttribute5]
      ,[OrgID]
      ,[ParentOrgID]
      ,[DefaultLocationID]
      ,[OrgNumber]
      ,[OrgHierarchyLevel1Name]
      ,[OrgHierarchyLevel2Name]
      ,[OrgHierarchyLevel3Name]
      ,[OrgHierarchyLevel4Name]
      ,[OrgHierarchyLevel5Name]
      ,[OrgHierarchyLevel6Name]
      ,[OrgHierarchyLevel7Name]
      ,[OrgHierarchyLevel8Name]
      ,[OrgHierarchyLevel9Name]
      ,[OrgHierarchyLevel10Name]
      ,[OrgHierarchyLevel11Name]
      ,[AllName]
      ,[ExecutiveFunctionName]
      ,[ExecutiveFunctionLeaderName]
      ,[ExecutiveSubFunctionName]
      ,[ExecutiveSubFunctionLeaderName]
      ,[CorporateFunctionName]
      ,[CorporateSubFunctionName]
      ,[DivisionName]
      ,[DivisionLeaderName]
      ,[RegionNumber]
      ,[RegionName]
      ,[RegionLeaderName]
      ,[MarketNumber]
      ,[MarketName]
      ,[MarketLeaderName]
      ,[SubMarketNumber]
      ,[SubMarketName]
      ,[SubMarketLeaderName]
      ,[DistrictNumber]
      ,[DistrictName]
      ,[InterimDistrictNumber]
      ,[InterimDistrictName]
      ,[DistrictLeaderName]
      ,[ActingDistrictLeaderName]
      ,[InterimDistrictLeaderName]
      ,[GroupNumber]
      ,[GroupName]
      ,[GroupLeaderName]
      ,[SubgroupNumber]
      ,[SubGroupName]
      ,[SubGroupLeaderName]
      ,[CampusNumber]
      ,[CampusName]
      ,[CampusLeaderName]
      ,[CenterLeaderName]
      ,[ActingCenterLeaderName]
      ,[CategoryName]
      ,[TypeCode]
      ,[TypeName]
      ,[PartnerGroupCode]
      ,[PartnerGroupName]
      ,[CenterGroupCode]
      ,[CenterGroupName]
      ,[DivisionLegacyName]
      ,[BrandCode]
      ,[BrandName]
      ,[OrgFlexAttribute1]
      ,[OrgFlexAttribute2]
      ,[OrgFlexAttribute3]
      ,[OrgFlexAttribute4]
      ,[OrgFlexAttribute5]
      ,[CenterCMSID]
      ,[CenterCSSID]
      ,[SiteHorizonID]
      ,[CenterEnrollmentSourceSystem]
      ,[CenterCMSMigrationDate]
      ,[CenterCMSMigrationStatus]
      ,[CenterLicensedCapacity]
      ,[CenterBackupCareFlag]
      ,[CenterChildCareSelectFlag]
      ,[CenterPublicAllowedFlag]
      ,[CenterOpenTime]
      ,[CenterCloseTime]
      ,[CenterStudentMinimumAge]
      ,[CenterStudentMaximumAge]
      ,[CenterOpenSunFlag]
      ,[CenterOpenMonFlag]
      ,[CenterOpenTueFlag]
      ,[CenterOpenWedFlag]
      ,[CenterOpenThuFlag]
      ,[CenterOpenFriFlag]
      ,[CenterOpenSatFlag]
      ,[CenterFoodProgramStartDate]
      ,[CenterFoodProgramEndDate]
      ,[CenterRegistrationType]
      ,[SiteSchoolDistrict]
      ,[SiteClassYear]
      ,[CenterURL]
      ,[CenterMenuURL]
      ,[CenterHasBreakfastFlag]
      ,[CenterHasMorningSlackFlag]
      ,[CenterHasLunchFlag]
      ,[CenterHasAfternoonSnackFlag]
      ,[CenterSpeaksASLFlag]
      ,[CenterSpeaksArabicFlag]
      ,[CenterSpeaksFrenchFlag]
      ,[CenterSpeaksGermanFlag]
      ,[CenterSpeaksHindiFlag]
      ,[CenterSpeaksMandarinFlag]
      ,[CenterSpeaksPunjabiFlag]
      ,[CenterSpeaksSpanishFlag]
      ,[CenterSpeaksOtherLanguages]
      ,[CenterAccreditationAgencyCode]
      ,[CenterAccreditationStartDate]
      ,[CenterAccreditationExpirationDate]
      ,[CenterAccreditationNextActivity]
      ,[CenterAccreditationNextActivityDueDate]
      ,[CenterAccreditationPrimaryStatus]
      ,[CenterAccreditationProgramID]
      ,[CenterQRISRating]
      ,[CenterQRISRatingStartDate]
      ,[CenterQRISRatingExpirationDate]
      ,[CenterLatitude]
      ,[CenterLongitude]
      ,[CenterCurrentHumanSigmaScore]
      ,[CenterPreviousHumanSigmaScore]
      ,'1900-01-01 00:00:00.000' AS [EDWEffectiveFrom]
      ,DATEADD(MM, 13, CCOpenDate) AS [EDWEffectiveTo]
      ,GETDATE() AS [EDWCreatedDate]
      ,GETDATE() AS [EDWModifiedDate]
      ,[EDWDeletedDate]
      ,'H' AS [EDWRowStatus]
      ,[ETLJobId] 
  FROM [dbo].[DimCostCenter]
WHERE CCCompStatus = 'Comp'
GO

UPDATE [DimCostCenter]
SET EDWEffectiveFrom = DATEADD(MM, 13, CCOpenDate),
	[EDWModifiedDate] = GETDATE()
WHERE CCCompStatus = 'Comp'
GO

/*--------------Active - Non-Comp---------------*/

INSERT INTO dbo.DimCostCenter
SELECT 
      [CostCenterNumber]
      ,[CostCenterName]
      ,[CompanyID]
      ,[CostCenterTypeID]
      ,[CostCenterTypeName]
      ,[BusinessUnitCode]
      ,[BusinessUnitName]
      ,[OrganizationLevelCode]
      ,[OrganizationLevelName]
      ,[FunctionCode]
      ,[FunctionName]
      ,[LineOfBusinessCode]
      ,[LineOfBusinessName]
      ,[LineOfBusinessCategoryCode]
      ,[LineOfBusinessCategoryName]
      ,[LineOfBusinessSubcategoryCode]
      ,[LineOfBusinessSubcategoryName]
      ,[CCHierarchyLevel1Name]
      ,[CCHierarchyLevel2Name]
      ,[CCHierarchyLevel3Name]
      ,[CCHierarchyLevel4Name]
      ,[CCHierarchyLevel5Name]
      ,[CCHierarchyLevel6Name]
      ,[CCHierarchyLevel7Name]
      ,[CCHierarchyLevel8Name]
      ,[CCHierarchyLevel9Name]
      ,[CCHierarchyLevel10Name]
      ,[CCHierarchyLevel11Name]
      ,[CCOpenDate]
      ,[CCClosedDate]
      ,[CCReopenDate]
      ,[CCReopenDateType]
      ,[CCClassification]
      ,'UnOpened' AS [CCCompStatus]
      ,[CCStatus]
      ,[CCConsolidation]
      ,[CCFlexAttribute1]
      ,[CCFlexAttribute2]
      ,[CCFlexAttribute3]
      ,[CCFlexAttribute4]
      ,[CCFlexAttribute5]
      ,[OrgID]
      ,[ParentOrgID]
      ,[DefaultLocationID]
      ,[OrgNumber]
      ,[OrgHierarchyLevel1Name]
      ,[OrgHierarchyLevel2Name]
      ,[OrgHierarchyLevel3Name]
      ,[OrgHierarchyLevel4Name]
      ,[OrgHierarchyLevel5Name]
      ,[OrgHierarchyLevel6Name]
      ,[OrgHierarchyLevel7Name]
      ,[OrgHierarchyLevel8Name]
      ,[OrgHierarchyLevel9Name]
      ,[OrgHierarchyLevel10Name]
      ,[OrgHierarchyLevel11Name]
      ,[AllName]
      ,[ExecutiveFunctionName]
      ,[ExecutiveFunctionLeaderName]
      ,[ExecutiveSubFunctionName]
      ,[ExecutiveSubFunctionLeaderName]
      ,[CorporateFunctionName]
      ,[CorporateSubFunctionName]
      ,[DivisionName]
      ,[DivisionLeaderName]
      ,[RegionNumber]
      ,[RegionName]
      ,[RegionLeaderName]
      ,[MarketNumber]
      ,[MarketName]
      ,[MarketLeaderName]
      ,[SubMarketNumber]
      ,[SubMarketName]
      ,[SubMarketLeaderName]
      ,[DistrictNumber]
      ,[DistrictName]
      ,[InterimDistrictNumber]
      ,[InterimDistrictName]
      ,[DistrictLeaderName]
      ,[ActingDistrictLeaderName]
      ,[InterimDistrictLeaderName]
      ,[GroupNumber]
      ,[GroupName]
      ,[GroupLeaderName]
      ,[SubgroupNumber]
      ,[SubGroupName]
      ,[SubGroupLeaderName]
      ,[CampusNumber]
      ,[CampusName]
      ,[CampusLeaderName]
      ,[CenterLeaderName]
      ,[ActingCenterLeaderName]
      ,[CategoryName]
      ,[TypeCode]
      ,[TypeName]
      ,[PartnerGroupCode]
      ,[PartnerGroupName]
      ,[CenterGroupCode]
      ,[CenterGroupName]
      ,[DivisionLegacyName]
      ,[BrandCode]
      ,[BrandName]
      ,[OrgFlexAttribute1]
      ,[OrgFlexAttribute2]
      ,[OrgFlexAttribute3]
      ,[OrgFlexAttribute4]
      ,[OrgFlexAttribute5]
      ,[CenterCMSID]
      ,[CenterCSSID]
      ,[SiteHorizonID]
      ,[CenterEnrollmentSourceSystem]
      ,[CenterCMSMigrationDate]
      ,[CenterCMSMigrationStatus]
      ,[CenterLicensedCapacity]
      ,[CenterBackupCareFlag]
      ,[CenterChildCareSelectFlag]
      ,[CenterPublicAllowedFlag]
      ,[CenterOpenTime]
      ,[CenterCloseTime]
      ,[CenterStudentMinimumAge]
      ,[CenterStudentMaximumAge]
      ,[CenterOpenSunFlag]
      ,[CenterOpenMonFlag]
      ,[CenterOpenTueFlag]
      ,[CenterOpenWedFlag]
      ,[CenterOpenThuFlag]
      ,[CenterOpenFriFlag]
      ,[CenterOpenSatFlag]
      ,[CenterFoodProgramStartDate]
      ,[CenterFoodProgramEndDate]
      ,[CenterRegistrationType]
      ,[SiteSchoolDistrict]
      ,[SiteClassYear]
      ,[CenterURL]
      ,[CenterMenuURL]
      ,[CenterHasBreakfastFlag]
      ,[CenterHasMorningSlackFlag]
      ,[CenterHasLunchFlag]
      ,[CenterHasAfternoonSnackFlag]
      ,[CenterSpeaksASLFlag]
      ,[CenterSpeaksArabicFlag]
      ,[CenterSpeaksFrenchFlag]
      ,[CenterSpeaksGermanFlag]
      ,[CenterSpeaksHindiFlag]
      ,[CenterSpeaksMandarinFlag]
      ,[CenterSpeaksPunjabiFlag]
      ,[CenterSpeaksSpanishFlag]
      ,[CenterSpeaksOtherLanguages]
      ,[CenterAccreditationAgencyCode]
      ,[CenterAccreditationStartDate]
      ,[CenterAccreditationExpirationDate]
      ,[CenterAccreditationNextActivity]
      ,[CenterAccreditationNextActivityDueDate]
      ,[CenterAccreditationPrimaryStatus]
      ,[CenterAccreditationProgramID]
      ,[CenterQRISRating]
      ,[CenterQRISRatingStartDate]
      ,[CenterQRISRatingExpirationDate]
      ,[CenterLatitude]
      ,[CenterLongitude]
      ,[CenterCurrentHumanSigmaScore]
      ,[CenterPreviousHumanSigmaScore]
      ,'1900-01-01 00:00:00.000' AS [EDWEffectiveFrom]
      ,CCOpenDate AS [EDWEffectiveTo]
      ,GETDATE() AS [EDWCreatedDate]
      ,GETDATE() AS [EDWModifiedDate]
      ,[EDWDeletedDate]
      ,'H' AS [EDWRowStatus]
      ,[ETLJobId] 
  FROM [dbo].[DimCostCenter]
WHERE CCCompStatus = 'Active - Non-Comp'
GO

UPDATE [DimCostCenter]
SET EDWEffectiveFrom = CCOpenDate,
	[EDWModifiedDate] = GETDATE()
WHERE CCCompStatus = 'Active - Non-Comp'
GO"
Truncate table DimCostCenter
Truncate table DimMartCostCenter
"CREATE VIEW  [dbo].[vFactGLBalancePlanAllocation]
WITH SCHEMABINDING
AS
    SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber, 
			dm.GLMetricTypeCode,
			dm.GLMetricTypeKey,
            f.AccountSubaccountKey,
			COUNT_BIG(*) AS [Count],
			SUM(f.GLBalancePlanAllocationAmount) AS GLBalancePlanAllocationAmount
	FROM [dbo].[FactGLBalancePlanAllocation] AS f
	     JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
         JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
		 JOIN dbo.DimGLMetricType AS dm ON dm.GLMetricTypeKey=f.GLMetricTypeKey
		 JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber,
			  dm.GLMetricTypeCode,
			  dm.GLMetricTypeKey,
              f.AccountSubaccountKey;"
"CREATE VIEW [dbo].[vFactLaborHour]
WITH SCHEMABINDING
AS
     SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber,
			f.DataScenarioKey,
            ds.DataScenarioName, 
            f.AccountSubaccountKey, 
            COUNT_BIG(*) AS [Count], 
            SUM(f.[Hours]) AS [Hours],
            f.IsTSEF
     FROM [dbo].[FactLaborHour] AS f
          JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
          JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
          JOIN dbo.DimDataScenario AS ds ON ds.DataScenarioKey = f.DataScenarioKey
          JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber,
			  f.DataScenarioKey,
              ds.DataScenarioName, 
              f.AccountSubaccountKey,
 f.IsTSEF;"
"CREATE VIEW  [dbo].[vFactLaborSalary]
WITH SCHEMABINDING
AS
    SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber, 
            f.AccountSubaccountKey,
			COUNT_BIG(*) AS [Count],
			SUM(f.NetAmount) AS [NetAmount]
	FROM [dbo].[FactLaborSalary] AS f
	     JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
         JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
		 JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber, 
              f.AccountSubaccountKey;"
"CREATE VIEW [dbo].[vFactNetRevenue] 
WITH SCHEMABINDING
	AS 
SELECT d.FiscalWeekNumber
      ,d.FiscalWeekEndDate 
      ,mcc.CostCenterKey 
      ,mcc.CostCenterNumber 
      ,f.AccountSubaccountKey 
      ,COUNT_BIG(*) AS [Count] 
	  ,SUM(f.NetRevenueAmount) AS NetRevenueAmount
	FROM dbo.FactNetRevenue AS f
		  JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
          JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
          JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber, 
              f.AccountSubaccountKey;"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactFTESnapshot_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactFTESnapshot_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey ON vFactFTESnapshot Disable;
"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactGLBalancePlanAllocation_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_GLMetricTypeKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactGLBalancePlanAllocation_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_GLMetricTypeKey ON vFactGLBalancePlanAllocation DISABLE;"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactLaborHour_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_DataScenarioKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactLaborHour_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_DataScenarioKey ON vFactLaborHour DISABLE;"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactLaborSalary_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactLaborSalary_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey ON vFactLaborSalary DISABLE;"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM [sys].[sysobjects] [O]
         INNER JOIN [sys].[sysindexes] [I] ON [O].[id] = [I].[id]
    WHERE [I].[name] = 'CIS_FactNetRevenueConsolidated_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey'
);
IF @view = 1
    DROP INDEX [CIS_FactNetRevenueConsolidated_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey] ON [dbo].[FactNetRevenueConsolidated];"
"TRUNCATE TABLE [dbo].[FactNetRevenueConsolidated];

INSERT INTO [dbo].[FactNetRevenueConsolidated] (
	[FiscalWeekNumber], [FiscalWeekEndDate], [CostCenterKey], [CostCenterNumber], [AccountSubaccountKey], [Count], [NetRevenueAmount]
)
SELECT
	[D].[FiscalWeekNumber],
	[D].[FiscalWeekEndDate],
	[MCC].[CostCenterKey],
	[MCC].[CostCenterNumber],
	[F].[AccountSubaccountKey],
	COUNT_BIG(*) AS [Count],
	SUM([F].[NetRevenueAmount]) AS [NetRevenueAmount]
FROM [dbo].[FactNetRevenue] [F]
INNER JOIN [dbo].[DimDate] [D] ON [F].[DateKey] = [D].[DateKey]
INNER JOIN [dbo].[DimCostCenter] [C] ON [F].[CostCenterKey] = [C].[CostCenterKey]
INNER JOIN [dbo].[DimMartCostCenter] [MCC] ON [C].[CostCenterNumber] = [MCC].[CostCenterNumber]
	AND [D].[FullDate] BETWEEN [MCC].[EDWEffectiveFrom] AND [MCC].[EDWEffectiveTo]
GROUP BY
	[D].[FiscalWeekNumber], [D].[FiscalWeekEndDate],
	[MCC].[CostCenterKey], [MCC].[CostCenterNumber],
	[F].[AccountSubaccountKey];

CREATE UNIQUE CLUSTERED INDEX [CIS_FactNetRevenueConsolidated_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey]
    ON [dbo].[FactNetRevenueConsolidated]([FiscalWeekNumber] ASC, [CostCenterKey] ASC, [AccountSubaccountKey] ASC);"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactFTESnapshot_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactFTESnapshot_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey ON vFactFTESnapshot  REBUILD PARTITION=ALL With (SORT_IN_TEMPDB = OFF);"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactLaborHour_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_DataScenarioKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactLaborHour_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_DataScenarioKey ON vFactLaborHour  REBUILD PARTITION=ALL With (SORT_IN_TEMPDB = OFF);"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactLaborSalary_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactLaborSalary_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey ON vFactLaborSalary  REBUILD PARTITION=ALL With (SORT_IN_TEMPDB = OFF);"
"
DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactGLBalancePlanAllocation_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_GLMetricTypeKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactGLBalancePlanAllocation_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_GLMetricTypeKey ON vFactGLBalancePlanAllocation  REBUILD PARTITION=ALL With (SORT_IN_TEMPDB = OFF);"
"UPDATE [dbo].[DimAccountSubaccount]
SET [ASAFieldDepth] = -1,                                 -- [ASAFieldDepth]
    [ASAFieldLevel1ID] = '0000.000000',                   -- [ASAFieldLevel1ID]	
    [ASAFieldLevel1Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel1Name]	
    [ASAFieldLevel1Unary] = 1,                            -- [ASAFieldLevel1Unary]	
    [ASAFieldLevel1Sort] = 99999,                         -- [ASAFieldLevel1Sort]
    [ASAFieldLevel2ID] = '0000.000000',                   -- [ASAFieldLevel2ID]	
    [ASAFieldLevel2Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel2Name]	
    [ASAFieldLevel2Unary] = 1,                            -- [ASAFieldLevel2Unary]	
    [ASAFieldLevel2Sort] = 99999,                         -- [ASAFieldLevel2Sort]
    [ASAFieldLevel3ID] = '0000.000000',                   -- [ASAFieldLevel3ID]	
    [ASAFieldLevel3Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel3Name]	
    [ASAFieldLevel3Unary] = 1,                            -- [ASAFieldLevel3Unary]	
    [ASAFieldLevel3Sort] = 99999,                         -- [ASAFieldLevel3Sort]
    [ASAFieldLevel4ID] = '0000.000000',                   -- [ASAFieldLevel4ID]	
    [ASAFieldLevel4Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel4Name]	
    [ASAFieldLevel4Unary] = 1,                            -- [ASAFieldLevel4Unary]	
    [ASAFieldLevel4Sort] = 99999,                         -- [ASAFieldLevel4Sort]
    [ASAFieldLevel5ID] = '0000.000000',                   -- [ASAFieldLevel5ID]	
    [ASAFieldLevel5Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel5Name]	
    [ASAFieldLevel5Unary] = 1,                            -- [ASAFieldLevel5Unary]	
    [ASAFieldLevel5Sort] = 99999,                         -- [ASAFieldLevel5Sort]
    [ASAFieldLevel6ID] = '0000.000000',                   -- [ASAFieldLevel6ID]	
    [ASAFieldLevel6Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel6Name]	
    [ASAFieldLevel6Unary] = 1,                            -- [ASAFieldLevel6Unary]	
    [ASAFieldLevel6Sort] = 99999,                         -- [ASAFieldLevel6Sort]
    [ASAFieldLevel7ID] = '0000.000000',                   -- [ASAFieldLevel7ID]	
    [ASAFieldLevel7Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel7Name]	
    [ASAFieldLevel7Unary] = 1,                            -- [ASAFieldLevel7Unary]	
    [ASAFieldLevel7Sort] = 99999,                         -- [ASAFieldLevel7Sort]
    [ASAFieldLevel8ID] = '0000.000000',                   -- [ASAFieldLevel8ID]	
    [ASAFieldLevel8Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel8Name]	
    [ASAFieldLevel8Unary] = 1,                            -- [ASAFieldLevel8Unary]	
    [ASAFieldLevel8Sort] = 99999,                         -- [ASAFieldLevel8Sort]
    [ASAFieldLevel9ID] = '0000.000000',                   -- [ASAFieldLevel9ID]	
    [ASAFieldLevel9Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel9Name]	
    [ASAFieldLevel9Unary] = 1,                            -- [ASAFieldLevel9Unary]	
    [ASAFieldLevel9Sort] = 99999,                         -- [ASAFieldLevel9Sort]
    [ASAFieldLevel10ID] = '0000.000000',                  -- [ASAFieldLevel10ID]	
    [ASAFieldLevel10Name] = 'Unknown Account Subaccount', -- [ASAFieldLevel10Name]	
    [ASAFieldLevel10Unary] = 1,                           -- [ASAFieldLevel10Unary]	
    [ASAFieldLevel10Sort] = 99999,                        -- [ASAFieldLevel10Sort]
    [ASAFieldLevel11ID] = '0000.000000',                  -- [ASAFieldLevel11ID]	
    [ASAFieldLevel11Name] = 'Unknown Account Subaccount', -- [ASAFieldLevel11Name]	
    [ASAFieldLevel11Unary] = 1,                           -- [ASAFieldLevel11Unary]	
    [ASAFieldLevel11Sort] = 99999,                        -- [ASAFieldLevel11Sort]
    [ASAFieldLevel12ID] = '0000.000000',                  -- [ASAFieldLevel12ID]	
    [ASAFieldLevel12Name] = 'Unknown Account Subaccount', -- [ASAFieldLevel12Name]	
    [ASAFieldLevel12Unary] = 1,                           -- [ASAFieldLevel12Unary]	
    [ASAFieldLevel12Sort] = 99999                         -- [ASAFieldLevel12Sort]
WHERE AccountSubaccountKey = '-1';

UPDATE dbo.DimAccountSubaccount
SET [ASAFieldDepth] = -1,                                 -- [ASAFieldDepth]
    [ASAFieldLevel1ID] = '0000.000000',                   -- [ASAFieldLevel1ID]	
    [ASAFieldLevel1Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel1Name]	
    [ASAFieldLevel1Unary] = 1,                            -- [ASAFieldLevel1Unary]	
    [ASAFieldLevel1Sort] = 99999,                         -- [ASAFieldLevel1Sort]
    [ASAFieldLevel2ID] = '0000.000000',                   -- [ASAFieldLevel2ID]	
    [ASAFieldLevel2Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel2Name]	
    [ASAFieldLevel2Unary] = 1,                            -- [ASAFieldLevel2Unary]	
    [ASAFieldLevel2Sort] = 99999,                         -- [ASAFieldLevel2Sort]
    [ASAFieldLevel3ID] = '0000.000000',                   -- [ASAFieldLevel3ID]	
    [ASAFieldLevel3Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel3Name]	
    [ASAFieldLevel3Unary] = 1,                            -- [ASAFieldLevel3Unary]	
    [ASAFieldLevel3Sort] = 99999,                         -- [ASAFieldLevel3Sort]
    [ASAFieldLevel4ID] = '0000.000000',                   -- [ASAFieldLevel4ID]	
    [ASAFieldLevel4Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel4Name]	
    [ASAFieldLevel4Unary] = 1,                            -- [ASAFieldLevel4Unary]	
    [ASAFieldLevel4Sort] = 99999,                         -- [ASAFieldLevel4Sort]
    [ASAFieldLevel5ID] = '0000.000000',                   -- [ASAFieldLevel5ID]	
    [ASAFieldLevel5Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel5Name]	
    [ASAFieldLevel5Unary] = 1,                            -- [ASAFieldLevel5Unary]	
    [ASAFieldLevel5Sort] = 99999,                         -- [ASAFieldLevel5Sort]
    [ASAFieldLevel6ID] = '0000.000000',                   -- [ASAFieldLevel6ID]	
    [ASAFieldLevel6Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel6Name]	
    [ASAFieldLevel6Unary] = 1,                            -- [ASAFieldLevel6Unary]	
    [ASAFieldLevel6Sort] = 99999,                         -- [ASAFieldLevel6Sort]
    [ASAFieldLevel7ID] = '0000.000000',                   -- [ASAFieldLevel7ID]	
    [ASAFieldLevel7Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel7Name]	
    [ASAFieldLevel7Unary] = 1,                            -- [ASAFieldLevel7Unary]	
    [ASAFieldLevel7Sort] = 99999,                         -- [ASAFieldLevel7Sort]
    [ASAFieldLevel8ID] = '0000.000000',                   -- [ASAFieldLevel8ID]	
    [ASAFieldLevel8Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel8Name]	
    [ASAFieldLevel8Unary] = 1,                            -- [ASAFieldLevel8Unary]	
    [ASAFieldLevel8Sort] = 99999,                         -- [ASAFieldLevel8Sort]
    [ASAFieldLevel9ID] = '0000.000000',                   -- [ASAFieldLevel9ID]	
    [ASAFieldLevel9Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel9Name]	
    [ASAFieldLevel9Unary] = 1,                            -- [ASAFieldLevel9Unary]	
    [ASAFieldLevel9Sort] = 99999,                         -- [ASAFieldLevel9Sort]
    [ASAFieldLevel10ID] = '0000.000000',                  -- [ASAFieldLevel10ID]	
    [ASAFieldLevel10Name] = 'Unknown Account Subaccount', -- [ASAFieldLevel10Name]	
    [ASAFieldLevel10Unary] = 1,                           -- [ASAFieldLevel10Unary]	
    [ASAFieldLevel10Sort] = 99999,                        -- [ASAFieldLevel10Sort]
    [ASAFieldLevel11ID] = '0000.000000',                  -- [ASAFieldLevel11ID]	
    [ASAFieldLevel11Name] = 'Unknown Account Subaccount', -- [ASAFieldLevel11Name]	
    [ASAFieldLevel11Unary] = 1,                           -- [ASAFieldLevel11Unary]	
    [ASAFieldLevel11Sort] = 99999,                        -- [ASAFieldLevel11Sort]
    [ASAFieldLevel12ID] = '0000.000000',                  -- [ASAFieldLevel12ID]	
    [ASAFieldLevel12Name] = 'Unknown Account Subaccount', -- [ASAFieldLevel12Name]	
    [ASAFieldLevel12Unary] = 1,                           -- [ASAFieldLevel12Unary]	
    [ASAFieldLevel12Sort] = 99999                         -- [ASAFieldLevel12Sort]
WHERE AccountSubaccountKey = '-2';"
TRUNCATE TABLE [dbo].[ReportMeasure]
"DECLARE @SummaryOfChanges TABLE (Change VARCHAR(20));
DECLARE @InsertCount INT,
		@UpdateCount INT,
		@DeleteCount INT;

MERGE [DW_Mart].[dbo].[ReportMeasure] AS [T]
USING (
	SELECT
		[ReportID], [ReportName], [MeasureOrder], [MeasureLabel], [MeasureName], [NumberFormat], [IsHeader], [PageOrder], [PageName], [HasRightBorder], [Font], [PlanDisplay], [PlanVarDisplay], [PlanVarPctDisplay],
		[LYDisplay], [LYVarDisplay], [LYVarPctDisplay], [ActualToDateDisplay], [PlanVarInverse], [LYVarInverse], [AbsDivisor], [TargetForPlan], [CreatedDate]
	FROM [DW_Landing].[dbo].[ReportMeasure]
) AS [S]
	(
		[ReportID], [ReportName], [MeasureOrder], [MeasureLabel], [MeasureName], [NumberFormat], [IsHeader], [PageOrder], [PageName], [HasRightBorder], [Font], [PlanDisplay], [PlanVarDisplay], [PlanVarPctDisplay],
		[LYDisplay], [LYVarDisplay], [LYVarPctDisplay], [ActualToDateDisplay], [PlanVarInverse], [LYVarInverse], [AbsDivisor], [TargetForPlan], [CreatedDate]
	)
	ON
		[T].[ReportID] = [S].[ReportID]
		AND [T].[MeasureOrder] = [S].[MeasureOrder]
		AND [T].[MeasureLabel] = [S].[MeasureLabel]
WHEN MATCHED
	THEN
		UPDATE
			SET [ReportName] = [S].[ReportName],
				[MeasureName] = [S].[MeasureName],
				[NumberFormat] = [S].[NumberFormat],
				[IsHeader] = [S].[IsHeader],
				[PageOrder] = [S].[PageOrder],
				[PageName] = [S].[PageName],
				[HasRightBorder] = [S].[HasRightBorder],
				[Font] = [S].[Font],
				[PlanDisplay] = [S].[PlanDisplay],
				[PlanVarDisplay] = [S].[PlanVarDisplay],
				[PlanVarPctDisplay] = [S].[PlanVarPctDisplay],
				[LYDisplay] = [S].[LYDisplay],
				[LYVarDisplay] = [S].[LYVarDisplay],
				[LYVarPctDisplay] = [S].[LYVarPctDisplay],
				[ActualToDateDisplay] = [S].[ActualToDateDisplay],
				[PlanVarInverse] = [S].[PlanVarInverse],
				[LYVarInverse] = [S].[LYVarInverse],
				[AbsDivisor] = [S].[AbsDivisor],
				[TargetForPlan] = [S].[TargetForPlan]

WHEN NOT MATCHED BY TARGET
	THEN
		INSERT (
			[ReportID], [ReportName], [MeasureOrder], [MeasureLabel], [MeasureName], [NumberFormat], [IsHeader], [PageOrder], [PageName], [HasRightBorder], [Font], [PlanDisplay], [PlanVarDisplay], [PlanVarPctDisplay],
			[LYDisplay], [LYVarDisplay], [LYVarPctDisplay], [ActualToDateDisplay], [PlanVarInverse], [LYVarInverse], [AbsDivisor], [TargetForPlan], [CreatedDate]
		)
		VALUES (
			[S].[ReportID], [S].[ReportName], [S].[MeasureOrder], [S].[MeasureLabel], [S].[MeasureName], [S].[NumberFormat], [S].[IsHeader], [S].[PageOrder], [S].[PageName], [S].[HasRightBorder], [S].[Font],
			[S].[PlanDisplay], [S].[PlanVarDisplay], [S].[PlanVarPctDisplay], [S].[LYDisplay], [S].[LYVarDisplay], [S].[LYVarPctDisplay], [S].[ActualToDateDisplay], [S].[PlanVarInverse], [S].[LYVarInverse],
			[S].[AbsDivisor], [S].[TargetForPlan], GETDATE()
		)
WHEN NOT MATCHED BY SOURCE
	THEN
		DELETE
OUTPUT $action
INTO @SummaryOfChanges;

SELECT @InsertCount = COUNT(*) FROM @SummaryOfChanges WHERE [Change] = 'INSERT';
SELECT @UpdateCount = COUNT(*) FROM @SummaryOfChanges WHERE [Change] = 'UPDATE';
SELECT @DeleteCount = COUNT(*) FROM @SummaryOfChanges WHERE [Change] = 'DELETE';

SELECT
	@InsertCount AS [InsertCount],
	@UpdateCount AS [UpdateCount],
	@DeleteCount AS [DeleteCount];"
 SELECT COUNT(1) AS DeleteCount  From [dbo].[ReportProfile]
 SELECT COUNT(1) AS InsertCount  From [dbo].[ReportProfile]
"SET IDENTITY_INSERT [dbo].[ReportProfile] ON;
INSERT INTO [dbo].[ReportProfile]
([ReportProfileKey], 
 [ReportProfileID], 
 [ReportProfileName], 
 [ReportProfileLogoImage], 
 [ReportProfileSmallImage], 
 [ReportProfileLegalNoticeDescription], 
 [MartCreatedDate]
)
       SELECT-1, 
             -1, 
             '-1', 
             0x00, 
             0x00, 
             'Unknown Description', 
             GETDATE()
       UNION
       SELECT-2, 
             -2, 
             '-2', 
             0x00, 
             0x00, 
             'Not Applicable Description', 
             GETDATE();
SET IDENTITY_INSERT [dbo].[ReportProfile] OFF;"
 TRUNCATE TABLE dbo.ReportProfile
EXEC dbo.spBING_EDW_Build_DimensionStaticData
"INSERT INTO dbo.EDWAuditLog 
(StartTime,
 StatusCode,
 StatusName,
 TaskName,
 EndTime
)
VALUES
(GETDATE(),
 1,
 'Completed',
 'EDW Dimension BNG-1262 - 2/26/2018',
 GETDATE()
);"
EXEC dbo.spCMS_StagingToEDW_DimAdjustmentReason;
EXEC dbo.spCMS_StagingToEDW_DimScheduleType
EXEC dbo.spCMS_StagingToEDW_DimARAgencyType;
EXEC dbo.spCSS_StagingToEDW_DimARAgencyType;
EXEC dbo.spCMS_StagingToEDW_DimClassroom;
EXEC dbo.spCSS_StagingToEDW_DimClassroom;
EXEC dbo.spCMS_StagingToEDW_DimCreditMemoType;
EXEC dbo.spCSS_StagingToEDW_DimDiscountType;
EXEC dbo.spCMS_StagingToEDW_DimPaymentType
EXEC dbo.spCSS_StagingToEDW_DimProgram
EXEC dbo.spCMS_StagingToEDW_DimSponsor;
EXEC dbo.spCSS_StagingToEDW_DimSponsor;
EXEC dbo.spCMS_StagingToEDW_DimStudent;
"IF EXISTS -- This Package is getting merged before the proc is present, so put in safety net for now...
(
    SELECT *
    FROM sys.objects
    WHERE type = 'P'
          AND name = 'spCMS_StagingToEDW_DimTier'
)
    EXEC dbo.spCMS_StagingToEDW_DimTier;
GO"
EXEC dbo.spGL_StagingGenerate_HrAllOrganizationUnits
EXEC dbo.spGL_StagingToEDW_BridgeCompanyRollup;
EXEC dbo.spGL_StagingToEDW_DimCompany
EXEC dbo.spGL_StagingToEDW_DimCompanyRollup;
EXEC dbo.spHR_StagingGenerate_OrgLeaderAccess
EXEC dbo.spHR_StagingToEDW_BridgeSecurityPersonHRISGroup;
EXEC dbo.spHR_StagingToEDW_BridgeSecurityPersonOrg;
EXEC dbo.spHR_StagingToEDW_DimComplianceItem
EXEC dbo.spHR_StagingToEDW_DimComplianceRating; 
EXEC dbo.spHR_StagingToEDW_DimHRUser;
EXEC dbo.spHR_StagingToEDW_DimLeaveType
EXEC dbo.spHR_StagingToEDW_DimLocation
EXEC dbo.spHR_StagingToEDW_DimOrganization
EXEC dbo.spHR_StagingToEDW_DimPayBasis
EXEC dbo.spHR_StagingToEDW_DimPayGrade;
EXEC dbo.spHR_StagingToEDW_DimPeopleGroup;
EXEC dbo.spHR_StagingToEDW_DimPerformanceRating
EXEC dbo.spHR_StagingToEDW_DimPerson;
EXEC dbo.spHR_StagingToEDW_DimQualificationType;
EXEC dbo.spHR_StagingToEDW_DimSpecialInfo
EXEC dbo.spSalesforce_StagingToEDW_DimLead
EXEC dbo.spSalesForce_StagingToEDW_DimWebCampaign
EXEC dbo.spCMS_BatchLoad_StagingToEDW_FactARBalanceSnapshot;
EXEC dbo.spCSS_BatchLoad_StagingToEDW_FactARBalanceSnapshot;
EXEC dbo.spCMS_StagingToEDW_FactAdjustment;
EXEC dbo.spCMS_BatchLoad_StagingToEDW_FactBilling;
EXEC dbo.spCMS_StagingToEDW_FactSessionEnrollment;
EXEC dbo.spCMS_StagingToEDW_FactTierAssignment;
EXEC dbo.spGL_BatchLoad_StagingToEDW_FactCenterStatSnapshot;
"TRUNCATE TABLE [dbo].[FactNetRevenueConsolidated];

INSERT INTO [dbo].[FactNetRevenueConsolidated] (
 [FiscalWeekNumber], [FiscalWeekEndDate], [CostCenterKey], [CostCenterNumber], [AccountSubaccountKey], [Count], [NetRevenueAmount]
)
SELECT
 [D].[FiscalWeekNumber],
 [D].[FiscalWeekEndDate],
 [MCC].[CostCenterKey],
 [MCC].[CostCenterNumber],
 [F].[AccountSubaccountKey],
 COUNT_BIG(*) AS [Count],
 SUM([F].[NetRevenueAmount]) AS [NetRevenueAmount]
FROM [dbo].[FactNetRevenue] [F]
INNER JOIN [dbo].[DimDate] [D] ON [F].[DateKey] = [D].[DateKey]
INNER JOIN [dbo].[DimCostCenter] [C] ON [F].[CostCenterKey] = [C].[CostCenterKey]
INNER JOIN [dbo].[DimMartCostCenter] [MCC] ON [C].[CostCenterNumber] = [MCC].[CostCenterNumber]
 AND [D].[FullDate] BETWEEN [MCC].[EDWEffectiveFrom] AND [MCC].[EDWEffectiveTo]
GROUP BY
 [D].[FiscalWeekNumber], [D].[FiscalWeekEndDate],
 [MCC].[CostCenterKey], [MCC].[CostCenterNumber],
 [F].[AccountSubaccountKey];

CREATE UNIQUE CLUSTERED INDEX [CIS_FactNetRevenueConsolidated_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey]
    ON [dbo].[FactNetRevenueConsolidated]([FiscalWeekNumber] ASC, [CostCenterKey] ASC, [AccountSubaccountKey] ASC);"
EXEC dbo.spPRO_BatchLoad_StagingToEDW_FactNetRevenue;
EXEC dbo.spCMS_BatchLoad_StagingToEDW_FactNetRevenue;
"EXEC [dbo].[spUpdateStatistics];
EXEC [dbo].[spRecompile];"
EXEC dbo.spHOR_BatchLoad_StagingToEDW_FactNetRevenue;
EXEC dbo.spMISC_BatchLoad_StagingToEDW_FactGLBalancePlanAllocation;
EXEC dbo.spGL_BatchLoad_StagingToEDW_FactGLBalance
EXEC dbo.spHR_StagingToEDW_FactEmployeeAssessment;
EXEC dbo.spHR_StagingToEDW_FactEmployeeAssignment;
EXEC dbo.spHR_StagingToEDW_FactEmployeeCompliance;
EXEC dbo.spHR_StagingToEDW_FactEmployeeLeave;
EXEC dbo.spHR_StagingToEDW_FactEmployeePayRate;
EXEC dbo.spHR_StagingToEDW_FactEmployeePerformance;
EXEC dbo.spHR_StagingToEDW_FactEmployeeQualification;
EXEC dbo.spHR_StagingToEDW_FactPersonSpecialInfo;
EXEC [dbo].[spCMS_BatchLoad_StagingToEDW_FactLifecycleStatusSnapshot];
EXEC dbo.spSalesForce_StagingToEDW_FactLeadPipeline
EXEC dbo.spSalesForce_StagingGenerate_LookupMethodOfContact
