SqlTaskData
""
"EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, ?, ?
GO"
"EXECUTE [dbo].[spEndAuditLog] ?, ?, ?, ?, ?
GO"
"IF NOT EXISTS (SELECT 1 FROM dbo.DimAccreditation WHERE AccreditationKey  IN (-1,-2))
	BEGIN
			SET IDENTITY_INSERT dbo.DimAccreditation ON;
			INSERT INTO [dbo].[DimAccreditation]
			           ([AccreditationKey]
			           ,[QualificationID]
			           ,[Accreditation]
			           ,[AreaOfStudy]
			           ,[AccreditationDate]
			           ,[Comments]
			           ,[CreatedDate]
			           ,[ModifiedDate]
			           ,[InsertAuditID])
			SELECT		-1
						, -1
						, 'Unknown Accredititaion'
						, 'Unknown Area of Study'
						, '1900-01-01'
						, 'Unknown Comments'
						, GETDATE()
						, GETDATE()
						,?
			UNION 
			SELECT		-2
						, -2
						, 'Not Applicable Accredititaion'
						, 'Not Applicable Area of Study'
						, '1900-01-01'
						, 'Not Applicable Comments'
						, GETDATE()
						, GETDATE()
						,?;
SELECT @@ROWCOUNT  + ? AS InsertCount;
SET IDENTITY_INSERT dbo.DimAccreditation OFF;
END
ELSE SELECT 0 as InsertCount;"
User::vLandingCountQuery
"UPDATE  dbo.ETLBatchControl 
SET LastProcessedDate = GETDATE()
, Status = 'Success'
WHERE Tablename = ?;"
"UPDATE dima
   SET dima.ModifiedDate  =   GETDATE()    
            , dima.Deleted   = source.Deleted
            , dima.UpdateAuditID  =   ?       
FROM dbo.DimAccreditation dima
JOIN DW_Landing.dbo.DimAccreditationLanding source ON source.QualificationID = dima.QualificationID 
WHERE source.Deleted <> COALESCE(dima.Deleted, 'N')

SELECT @@ROWCOUNT AS DeleteCount;"
"UPDATE dima
   SET  dima.Accreditation  =   source.Accreditation  
      , dima.AreaOfStudy  =   source.AreaOfStudy  
      , dima.AccreditationDate  =   source.AccreditationDate  
      , dima.Comments      =   source.Comments      
      , dima.ModifiedDate  =   GETDATE()    
      , dima.UpdateAuditID  =   ?       
FROM dbo.DimAccreditation dima
JOIN DW_Landing.dbo.DimAccreditationLanding source ON source.QualificationID = dima.QualificationID 
WHERE COALESCE(source.Deleted, 'N') = COALESCE(dima.Deleted, 'N')

SELECT @@ROWCOUNT AS UpdateCount ;"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)
	BEGIN
		INSERT INTO dbo.ETLBatchControl (TableName) VALUES (?)
	END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);
DECLARE @CreatedDate DATETIME = (SELECT MAX(CreatedDate) FROM DW_MART.dbo.DimAccreditation);

IF @LastProcessedDate IS NULL OR @CreatedDate IS NULL
SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));

SELECT @LastProcessedDate AS LastProcessedDate;"
User::vLandingTruncateQuery
"DECLARE @InsertAuditID BIGINT = ?
DECLARE @CurDate datetime = GETDATE()

IF NOT EXISTS (SELECT 1 FROM dbo.DimAge WHERE MinimumDays = -1)
	BEGIN
                  SET IDENTITY_INSERT dbo.DimAge ON;
		INSERT INTO dbo.DimAge
		(
			AgeKey,
                                                      AgeID,
			MinimumDays,
			MaximumDays,
			AgeGrouping,
			CreatedDate,
			ModifiedDate,
			InsertAuditID
		)
		VALUES
		(
			-1,
                                                      -1,
			-1,
			-1,
			'Unknown',
			@CurDate,
			@CurDate,
			@InsertAuditID
		)
	END

IF NOT EXISTS (SELECT 1 FROM dbo.DimAge WHERE MinimumDays = -2)
	BEGIN
		INSERT INTO dbo.DimAge
		(
			AgeKey,
                                                      AgeID,
			MinimumDays,
			MaximumDays,
			AgeGrouping,
			CreatedDate,
			ModifiedDate,
			InsertAuditID
		)
		VALUES
		(
			-2,
                                                      -2,
			-2,
			-2,
			'N/A',
			@CurDate,
			@CurDate,
			@InsertAuditID
		)
SET IDENTITY_INSERT dbo.DimAge OFF;
	END"
"IF NOT EXISTS (SELECT 1 FROM dbo.DimAssessment WHERE AssessmentKey  IN (-1,-2))
	BEGIN
			SET IDENTITY_INSERT dbo.DimAssessment ON;
			INSERT INTO [dbo].[DimAssessment]
			           ([AssessmentKey]
			           ,[AssessmentID]
                       ,[AssessmentType]
                       ,[AssessmentBand]
                       ,[CreatedDate]
                       ,[ModifiedDate]
			           ,[InsertAuditID])
			SELECT		-1
						, 'Unknown Assessment ID'
						, 'Unknown Assessment Type'
						, 'Unknown Assessment Band'
						, GETDATE()
						, GETDATE()
						,?
			UNION 
			SELECT		-2
						, 'Not Applicable'
						, 'Not Applicable'
						, 'Not Applicable'
						, GETDATE()
						, GETDATE()
						,?;
SELECT @@ROWCOUNT  + ? AS InsertCount;
SET IDENTITY_INSERT dbo.DimAssessment OFF;
END
ELSE SELECT ? as InsertCount;"
"UPDATE tgt
   SET tgt.ModifiedDate = GETDATE()    
       ,tgt.Deleted   = src.Deleted
       ,tgt.UpdateAuditID  =   ?     
FROM dbo.DimAssessment tgt
JOIN DW_Landing.dbo.DimAssessmentLanding src ON src.AssessmentID = tgt.AssessmentID 
WHERE src.Deleted <> COALESCE(tgt.Deleted, 'N')

SELECT @@ROWCOUNT AS DeleteCount"
"UPDATE tgt
   SET tgt.AssessmentType = src.AssessmentType
      ,tgt.AssessmentBand = src.AssessmentBand
      ,tgt.ModifiedDate = GETDATE()    
      ,tgt.UpdateAuditID = ?
FROM	 dbo.DimAssessment tgt
JOIN  DW_Landing.dbo.DimAssessmentLanding src ON src.AssessmentID = tgt.AssessmentID
WHERE COALESCE(src.Deleted, 'N') = COALESCE(tgt.Deleted, 'N')

SELECT @@ROWCOUNT AS UpdateCount ;"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)
	BEGIN
		INSERT INTO dbo.ETLBatchControl (TableName) VALUES (?)
	END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);
DECLARE @CreatedDate DATETIME = (SELECT MAX(CreatedDate) FROM DW_MART.dbo.DimTermination);

IF @LastProcessedDate IS NULL OR @CreatedDate IS NULL
SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));

SELECT @LastProcessedDate AS LastProcessedDate;"
"DECLARE @LastProcessedDate DATETIME = ?
DELETE p
FROM dbo.DimAssignment p 
JOIN (SELECT *
FROM DW_Landing.dbo.DimAssignmentLanding dpl
WHERE (dpl.BaseCreatedDate > @LastProcessedDate  OR dpl.BaseModifiedDate > @LastProcessedDate )
AND EXISTS
(
    SELECT 1
    FROM dbo.DimAssignment dp
    WHERE dp.AssignmentID = dpl.AssignmentID
 AND dp.EffectiveStartDate = dpl.EffectiveStartDate
    AND dp.EffectiveFrom = dpl.BaseEffectiveDate
)
)a ON p.AssignmentID = a.AssignmentID AND p.EffectiveStartDate = a.EffectiveStartDate AND p.EffectiveFrom = a.BaseEffectiveDate

SELECT @@ROWCOUNT AS DeleteCount ;"
"DELETE dp
FROM dbo.DimAssignment dp
WHERE NOT EXISTS
(
    SELECT 1
    FROM DW_Landing.dbo.DimAssignmentLanding dpl
    WHERE dp.AssignmentID = dpl.AssignmentID
	AND dp.EffectiveStartDate = dpl.EffectiveStartDate
    AND dp.EffectiveFrom = dpl.BaseEffectiveDate
)
AND dp.AssignmentKey > 0

SELECT @@ROWCOUNT + ? AS DeleteCount ;"
"IF NOT EXISTS (SELECT 1 FROM dbo.DimAssignment WHERE AssignmentID  IN (-1,-2))
	BEGIN
		SET IDENTITY_INSERT dbo.DimAssignment ON;

		INSERT INTO dbo.DimAssignment
		(
			AssignmentKey,
			AssignmentID,
			PersonID,
			AssignmentNumber,
			AssignmentType,
			AssignmentStatusType,
			WorkAtHomeIndicator,
			NormalWorkingHours,
			NDQCFlag,
			BonusPercent,
			ChangeReason,
			AssignmentSubType,
			IVRCode,
			Title,
			ExecutiveAssistant,
			CAWaiverIndicator,
			EmploymentCategory,
			EmployeePayBasis,
			SpecialInfoTypeName,
			SecondaryRateStartDate,
			SecondaryRateEndDate,
			SecondaryJobName,
			SecondaryPayRate,
                                                      SecondaryHoursType,
			Vendor,
			PeopleGroup,
			KLCLineOfBusiness,
			KLCPeopleGroup,
			KCLOTLLink,
			ProjectedAssignmentEndDate,
			PayGradeID,
			PositionID,
			LocationID,
			OrganizationID,
			EffectiveStartDate,
			ExpirationDate,
			EffectiveFrom,
			EffectiveTo,
			Deleted,
			RowStatus,
			CreatedDate,
			ModifiedDate,
			InsertAuditID,
			UpdateAuditID,
                                                      SourceUpdateDate
		)
		SELECT
			-1,
			-1,
			-1,
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			-1,
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'1900-01-01',
			'4712-12-31',
			'Unknown',
			-1,
                                                      'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'4712-12-31',
			-1,
			-1,
			-1,
			-1,
			'1900-01-01',
			'4712-12-31',
			'1900-01-01',
			'9999-12-31',
			NULL,
			'A',
			GETDATE(),
			GETDATE(),
			?,
			NULL,
                                                      '1900-01-01'
		UNION
		SELECT
			-2,
			-2,
			-2,
			'Not Applicable',
			'Not Applicable',
			'Not Applicable',
			'N/A',
			-2,
			'N/A',
			'N/A',
			'Not Applicable',
			'Not Applicable',
			'Not Applicable',
			'Not Applicable',
			'Not Applicable',
			'N/A',
			'Not Applicable',
			'Not Applicable',
			'Not Applicable',
			'1900-01-01',
			'4712-12-31',
			'Not Applicable',
	  		-2,
            'Not Applicable',
			'Not Applicable',
			'Not Applicable',
			'Not Applicable',
			'Not Applicable',
			'Not Applicable',
			'4712-12-31',
			-2,
			-2,
			-2,
			-2,
			'1900-01-01',
			'4712-12-31',
			'1900-01-01',
			'9999-12-31',
			NULL,
			'A',
			GETDATE(),
			GETDATE(),
			?,
			NULL,
                                                      '1900-01-01'

		SELECT @@ROWCOUNT + ? AS InsertCount;

		SET IDENTITY_INSERT dbo.DimAssignment OFF;
	END
ELSE
	BEGIN
		SELECT 0 + ? AS InsertCount;
	END"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)
	BEGIN
		INSERT INTO dbo.ETLBatchControl (TableName) VALUES (?)
	END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);
DECLARE @CreatedDate DATETIME = (SELECT MAX(CreatedDate) FROM DW_MART.dbo.DimAssignment);

IF @LastProcessedDate IS NULL OR @CreatedDate IS NULL
SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));

SELECT @LastProcessedDate AS LastProcessedDate;"
"DECLARE @InsertAuditID bigint = ?
DECLARE @CurDate datetime = GETDATE()

IF NOT EXISTS (SELECT 1 FROM dbo.DimEvent WHERE EventID = -1)
	BEGIN
                 SET IDENTITY_INSERT dbo.DimEvent ON;
		INSERT INTO dbo.DimEvent
		(
			EventKey,
                                                      EventID,
			EventName,
			CreatedDate,
			ModifiedDate,
			InsertAuditID
		)
		VALUES
		(
                                                     -1,
			-1,
			'Unknown',
			@CurDate,
			@CurDate,
			@InsertAuditID
		)
	END

IF NOT EXISTS (SELECT 1 FROM dbo.DimEvent WHERE EventID = -2)
	BEGIN
		INSERT INTO dbo.DimEvent
		(
			EventKey,
                                                      EventID,
			EventName,
			CreatedDate,
			ModifiedDate,
			InsertAuditID
		)
		VALUES
		(
                                                      -2,
			-2,
			'N/A',
			@CurDate,
			@CurDate,
			@InsertAuditID
		)
   SET IDENTITY_INSERT dbo.DimEvent OFF;
	END"
"IF NOT EXISTS (SELECT 1 FROM dbo.DimPayGrade WHERE PayGradeKey  IN (-1,-2))
 BEGIN
   SET IDENTITY_INSERT dbo.DimPayGrade ON;
INSERT INTO [dbo].[DimPayGrade]
           ([PayGradeKey]
           ,[GradeID]
           ,[PayGrade]
           ,[Status]
           ,[MaximumPayRate]
           ,[MedianPayRate]
           ,[MinimumPayRate]
           ,[GradeRuleID]
           ,[EffectiveStartDate]
           ,[ExpirationDate]
           ,[EffectiveFrom]
           ,[EffectiveTo]
           ,[RowStatus]
           ,[CreatedDate]
           ,[ModifiedDate]
           ,[InsertAuditID]
		   )
   SELECT  -1
      , -1
      , 'Unknown'
      , 'Unknown'
	  , 0
	  , 0
	  , 0
      , -1
      , '1900-01-01'
	  , '4712-12-31'
      , '1900-01-01'
	  , '9999-12-31'
	  , 'A'
      , GETDATE()
      , GETDATE()
      , ?
   UNION 
   SELECT  -2
      , -2
      , 'Not Applicable'
      , 'N/A'
	  , 0
	  , 0
	  , 0
      , -2
      , '1900-01-01'
	  , '4712-12-31'
      , '1900-01-01'
	  , '9999-12-31'
	  , 'A'
      , GETDATE()
      , GETDATE()
      , ?;
SELECT @@ROWCOUNT  + ? AS InsertCount;
SET IDENTITY_INSERT dbo.DimPayGrade OFF;
END
ELSE SELECT 0 + ? AS InsertCount;"
"UPDATE dimpg
   SET dimpg.Deleted			= source.Deleted
       , dimpg.ModifiedDate		= GETDATE()    
       , dimpg.UpdateAuditID	=   ?   
FROM dbo.DimPayGrade dimpg
JOIN DW_Landing.dbo.DimPayGradeLanding source ON source.GradeID = dimpg.GradeID AND source.EffectiveStartDate = dimpg.EffectiveStartDate
	AND source.Deleted != COALESCE(dimpg.Deleted, 'N')

SELECT @@ROWCOUNT AS DeleteCount;"
"UPDATE dimpg
   SET dimpg.PayGrade               = source.PayGrade
	   , dimpg.Status				= source.Status
	   , dimpg.MaximumPayRate		= source.MaximumPayRate
	   , dimpg.MedianPayRate		= source.MedianPayRate
	   , dimpg.MinimumPayRate		= source.MinimumPayRate
	   , dimpg.GradeRuleID			= source.GradeRuleID
	   , dimpg.EffectiveStartDate	= source.EffectiveStartDate
	   , dimpg.ExpirationDate		= source.ExpirationDate
	   , dimpg.EffectiveFrom		= source.BaseEffectiveDate
	   , dimpg.EffectiveTo			= source.BaseEndDate
	   , dimpg.RowStatus			= source.RowStatus
       , dimpg.ModifiedDate			= GETDATE()    
       , dimpg.UpdateAuditID		=   ?   
FROM dbo.DimPayGrade dimpg
JOIN DW_Landing.dbo.DimPayGradeLanding source ON source.GradeID = dimpg.GradeID AND source.EffectiveStartDate = dimpg.EffectiveStartDate
	AND source.RowStatus != dimpg.RowStatus AND source.RowStatus = 'H' AND COALESCE(source.Deleted, 'N') = COALESCE(dimpg.Deleted, 'N')

SELECT @@ROWCOUNT AS UpdateCount;"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName) VALUES (?)
 END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);
DECLARE @CreatedDate DATETIME =  (SELECT MAX(CreatedDate) FROM DW_MART.dbo.DimPayGrade);

IF @LastProcessedDate IS NULL OR @CreatedDate IS NULL
SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));

SELECT @LastProcessedDate AS LastProcessedDate;"
"DECLARE @LastProcessedDate DATETIME = ?
DELETE p
FROM dbo.DimPerson p 
JOIN (SELECT *
FROM DW_Landing.dbo.DimPersonLanding dpl
WHERE (dpl.BaseCreatedDate > @LastProcessedDate  OR dpl.BaseModifiedDate > @LastProcessedDate )
AND EXISTS
(
    SELECT 1
    FROM dbo.DimPerson dp
    WHERE dp.PersonID = dpl.PersonID
 AND dp.EffectiveStartDate = dpl.EffectiveStartDate
    AND dp.EffectiveFrom = dpl.BaseEffectiveDate
)
)a ON p.PersonID = a.PersonID AND p.EffectiveStartDate = a.EffectiveStartDate AND p.EffectiveFrom = a.BaseEffectiveDate

SELECT @@ROWCOUNT AS DeleteCount ;"
"DELETE dp
FROM dbo.DimPerson dp
WHERE NOT EXISTS
(
    SELECT 1
    FROM DW_Landing.dbo.DimPersonLanding dpl
    WHERE dp.PersonID = dpl.PersonID
	AND dp.EffectiveStartDate = dpl.EffectiveStartDate
    AND dp.EffectiveFrom = dpl.BaseEffectiveDate
)
AND dp.PersonKey > 0

SELECT @@ROWCOUNT + ? AS DeleteCount ;"
"IF NOT EXISTS (SELECT 1 FROM dbo.DimPerson WHERE PersonKey  IN (-1,-2))
 BEGIN
   SET IDENTITY_INSERT dbo.DimPerson ON;
INSERT INTO [dbo].[DimPerson]
           ([PersonKey]
           ,[PersonID]
           ,[PersonType]
           ,[PersonName]
           ,[Title]
           ,[PersonFirstName]
           ,[PersonMiddleName]
           ,[PersonLastName]
           ,[PersonSuffix]
           ,[PersonPreferredName]
           ,[SocialSecurityNumber]
           ,[BirthDate]
           ,[EmployeeNumber]
           ,[MaritalStatus]
           ,[Gender]
           ,[Ethnicity]
           ,[VeteranStatus]
           ,[EmailAddressKinderCare]
           ,[EmailAddressPersonal]
           ,[OriginalHireDate]
           ,[StartDate]
           ,[TerminationDate]
           ,[AdjustedServiceDate]
           ,[DeathDate]
           ,[PreviousEmployeeNumber]
           ,[PreviousEmployeeSource]
           ,[WOTCNotifiedIndicator]
           ,[WOTCNumber]
           ,[CheckSendToLocationID]
           ,[VestingDate]
           ,[MealPeriodWaived]
           ,[AlaskaWaiveDailyOTIndicator]
           ,[PersonAcquisitionDate]
           ,[TaleoCandidateID]
           ,[ContingentWorkerEmployeeID]
           ,[ContingentWorkerEmployeeNumber]
           ,[I9ReceivedIndicator]
           ,[WorkSchedule]
           ,[EmployeePerformanceRating]
           ,[EffectiveStartDate]
           ,[ExpirationDate]
           ,[EffectiveFrom]
           ,[EffectiveTo]
           ,[RowStatus]
           ,[CreatedDate]
           ,[ModifiedDate]
           ,[InsertAuditID]
            )  
   SELECT -1
      , -1
      , 'Unknown'    
	  , 'Unknown'
      , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  ,  '1900-01-01'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , '1900-01-01'
	  , '1900-01-01'
	  , '1900-01-01'
	  , '1900-01-01'
	  , '1900-01-01'
	  , 'Unknown'
	  , 'Unknown'
	  , 'UNK'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'UNK'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , '1900-01-01'
	  , '4712-12-31'
      , '1900-01-01'
	  , '9999-12-31'
	  , 'A'
      , GETDATE()
      , GETDATE()
      , ?
  
   UNION 
   SELECT  -2
      , -2
      , 'Not Applicable'
	  , 'Not Applicable'
      , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  ,  '1900-01-01'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , '1900-01-01'
	  , '1900-01-01'
	  , '1900-01-01'
	  , '1900-01-01'
	  , '1900-01-01'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'N/A'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'N/A'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , '1900-01-01'
	  , '4712-12-31'
      , '1900-01-01'
	  , '9999-12-31'
	  , 'A'
      , GETDATE()
      , GETDATE()
      , ?;
	
SELECT @@ROWCOUNT  + ?  AS InsertCount;
SET IDENTITY_INSERT dbo.DimPerson OFF;
END
ELSE SELECT 0 + ?  AS InsertCount;"
"EXECUTE [dbo].[spDimPersonSupervisorLoad]
GO"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)
	BEGIN
		INSERT INTO dbo.ETLBatchControl (TableName) VALUES (?)
	END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);
DECLARE @CreatedDate DATETIME = (SELECT MAX(CreatedDate) FROM DW_MART.dbo.DimPerson);

IF @LastProcessedDate IS NULL OR @CreatedDate IS NULL
SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));

SELECT @LastProcessedDate AS LastProcessedDate;"
"IF NOT EXISTS (SELECT 1 FROM dbo.DimPosition WHERE PositionKey  IN (-1,-2))
 BEGIN
   SET IDENTITY_INSERT dbo.DimPosition ON;
INSERT INTO [dbo].[DimPosition]
           (PositionKey
	   ,[PositionID]
      ,[JobID]
      ,[Position]
      ,[Job]
      ,[PositionPayBasis]
      ,[PayBasisAnnualizationFactor]
      ,[PositionStatus]
      ,[PermTempIndicator]
      ,[PeopleGroup]
      ,[JobCategory]
      ,[JobLevel]
      ,[ManagerIndicator]
      ,[PurchaseApprovalLevel]
      ,[ADPJobActivity]
      ,[PcardApprovalIndicator]
      ,[JobGroup]
      ,[EEOCategory]
      ,[LaborType]
      ,[FSLAClassification]
      ,[KLCJobGroup]
      ,[PositionCode]
      ,[FunctionalArea]
      ,[SubFunctionalArea]
      ,[CorporateOverheadValue]
      ,[JobLevelCode]
      ,[BonusEligibleIndicator]
      ,[BonusPlan]
      ,[BonusTargetPercent]
      ,[LTIPEligibleIndicator]
      ,[JobType]
      ,[JobFamily]
      ,[PositionRollup]
      ,[LTPPercent]
      ,[PositionType]
      ,[PayFrequency]
      ,[OriginalEffectiveDate]
      ,[LocationID]
      ,[GradeID]
      ,[EffectiveStartDate]
      ,[ExpirationDate]
      ,[EffectiveFrom]
      ,[EffectiveTo]
      ,[RowStatus]
      ,[CreatedDate]
      ,[ModifiedDate]
      ,[InsertAuditID]
	)   
   SELECT  -1
      , -1
      , -1
      , 'Unknown'
	  , 'Unknown'
      , 'Unknown'
	  ,  -1
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'UNK'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'Unknown'
	  , 'UNK'
      , '1900-01-01'
	  , -1
	  , -1
	  , '1900-01-01'
	  , '4712-12-31'
      , '1900-01-01'
	  , '9999-12-31'
	  , 'A'
      , GETDATE()
      , GETDATE()
      , ?
  
   UNION 
   SELECT  -2
      , -2
      , -2
      , 'Not Applicable'
	  , 'Not Applicable'
      , 'Not Applicable'
	  ,  -2
	  , 'Not Applicable'
	  , 'N/A'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'N/A'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'Not Applicable'
	  , 'N/A'
      , '1900-01-01'
	  , -2
	  , -2
	  , '1900-01-01'
	  , '4712-12-31'
      , '1900-01-01'
	  , '9999-12-31'
	  , 'A'
      , GETDATE()
      , GETDATE()
      , ?;
	
SELECT @@ROWCOUNT  + ?  AS InsertCount;
SET IDENTITY_INSERT dbo.DimPosition OFF;
END
ELSE SELECT 0 + ? AS InsertCount;"
"UPDATE dimp
   SET dimp.Deleted			= source.Deleted
       , dimp.ModifiedDate		= GETDATE()    
       , dimp.UpdateAuditID	=   ?   
FROM dbo.DimPosition dimp
JOIN DW_Landing.dbo.DimPositionLanding source ON source.PositionID = dimp.PositionID AND source.EffectiveStartDate = dimp.EffectiveStartDate
	AND source.Deleted != COALESCE(dimp.Deleted, 'N')

SELECT @@ROWCOUNT AS DeleteCount;
"
"UPDATE dimp
   SET dimp.PositionID = source.PositionID
      ,dimp.JobID = source.JobID
      ,dimp.Position = source.Position
      ,dimp.Job = source.Job
      ,dimp.PositionPayBasis = source.PositionPayBasis
      ,dimp.PayBasisAnnualizationFactor = source.PayBasisAnnualizationFactor
      ,dimp.PositionStatus = source.PositionStatus
      ,dimp.PermTempIndicator = source.PermTempIndicator
      ,dimp.PeopleGroup = source.PeopleGroup
      ,dimp.JobCategory = source.JobCategory
      ,dimp.JobLevel = source.JobLevel
      ,dimp.ManagerIndicator = source.ManagerIndicator
      ,dimp.PurchaseApprovalLevel = source.PurchaseApprovalLevel
      ,dimp.ADPJobActivity = source.ADPJobActivity
      ,dimp.PcardApprovalIndicator = source.PcardApprovalIndicator
      ,dimp.JobGroup = source.JobGroup
      ,dimp.EEOCategory = source.EEOCategory
      ,dimp.LaborType = source.LaborType
      ,dimp.FSLAClassification = source.FSLAClassification
      ,dimp.KLCJobGroup = source.KLCJobGroup
      ,dimp.PositionCode = source.PositionCode
      ,dimp.FunctionalArea = source.FunctionalArea
      ,dimp.SubFunctionalArea = source.SubFunctionalArea
      ,dimp.CorporateOverheadValue = source.CorporateOverheadValue
      ,dimp.JobLevelCode = source.JobLevelCode
      ,dimp.BonusEligibleIndicator = source.BonusEligibleIndicator
      ,dimp.BonusPlan = source.BonusPlan
      ,dimp.BonusTargetPercent = source.BonusTargetPercent
      ,dimp.LTIPEligibleIndicator = source.LTIPEligibleIndicator
      ,dimp.JobType = source.JobType
      ,dimp.JobFamily = source.JobFamily
      ,dimp.PositionRollup = source.PositionRollup
      ,dimp.LTPPercent = source.LTPPercent
      ,dimp.PositionType = source.PositionType
      ,dimp.PayFrequency = source.PayFrequency
      ,dimp.OriginalEffectiveDate = source.OriginalEffectiveDate
      ,dimp.LocationID = source.LocationID
      ,dimp.GradeID = source.GradeID
      , dimp.EffectiveStartDate	= source.EffectiveStartDate
	   , dimp.ExpirationDate		= source.ExpirationDate
	   , dimp.EffectiveFrom		= source.BaseEffectiveDate
	   , dimp.EffectiveTo			= source.BaseEndDate
	   , dimp.RowStatus			= source.RowStatus
       , dimp.ModifiedDate			= GETDATE()    
       , dimp.UpdateAuditID		=   ?   
FROM  dbo.DimPosition dimp
 JOIN DW_Landing.dbo.DimPositionLanding source ON source.PositionID = dimp.PositionID AND source.EffectiveStartDate = dimp.EffectiveStartDate
	--AND source.RowStatus != dimp.RowStatus AND COALESCE(source.Deleted, 'N') = COALESCE(dimp.Deleted, 'N')
	AND source.RowStatus != dimp.RowStatus AND source.RowStatus = 'H' AND COALESCE(source.Deleted, 'N') = COALESCE(dimp.Deleted, 'N')

SELECT @@ROWCOUNT AS UpdateCount;"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName) VALUES (?)
 END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);
DECLARE @CreatedDate DATETIME =  (SELECT MAX(CreatedDate) FROM DW_MART.dbo.DimPosition);

IF @LastProcessedDate IS NULL OR @CreatedDate IS NULL
SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));

SELECT @LastProcessedDate AS LastProcessedDate;"
"IF NOT EXISTS (SELECT 1 FROM dbo.DimTermination WHERE TerminationKey  IN (-1,-2))
	BEGIN
			SET IDENTITY_INSERT dbo.DimTermination ON;
			INSERT INTO [dbo].[DimTermination]
			           ([TerminationKey]
			           ,[PeriodofServiceID]
                          ,[TerminationReason]
                          ,[TerminationType]
                          ,[EligibleforRehireIndicator]
                          ,[TwoWeekNoticeIndicator]
                          ,[RegrettableTerminationIndicator]
                          ,[TerminationComments]
                          ,[TerminationNotifiedDate]
                          ,[LastWorkedDate]
                          ,[CreatedDate]
                          ,[ModifiedDate]
			           ,[InsertAuditID])
			SELECT		-1
						, -1
						, 'Unknown Termination Reason'
						, 'Unknown'
						, 'Unknown'
						, 'Unknown'
						, 'Unknown'
						, 'Unknown Termination Comments'
						, '1900-01-01'
						, '1900-01-01'
						, GETDATE()
						, GETDATE()
						,?
			UNION 
			SELECT		-2
						, -2
						, 'Not Applicable Termination Reason'
						, 'Not Applicable'
						, 'Not Applicable'
						, 'Not Applicable'
						, 'Not Applicable'
						, 'Not Applicable Termination Comments'
						, '1900-01-01'
						, '1900-01-01'
						, GETDATE()
						, GETDATE()
						,?;
SELECT @@ROWCOUNT  + ? AS InsertCount;
SET IDENTITY_INSERT dbo.DimTermination OFF;
END
ELSE SELECT 0 as InsertCount;"
"
UPDATE dmt
   SET dmt.ModifiedDate = GETDATE()    
       ,dmt.Deleted   = source.Deleted
            , dmt.UpdateAuditID  =   ?     
FROM dbo.DimTermination dmt
JOIN DW_Landing.dbo.DimTerminationLanding source ON source.PeriodofServiceID = dmt.PeriodofServiceID 
WHERE source.Deleted <> COALESCE(dmt.Deleted, 'N')

SELECT @@ROWCOUNT AS DeleteCount
"
"UPDATE dmt
   SET dmt.TerminationReason = Source.TerminationReason
      ,dmt.TerminationType = Source.TerminationType
      ,dmt.EligibleforRehireIndicator = Source.EligibleforRehireIndicator
      ,dmt.TwoWeekNoticeIndicator = Source.TwoWeekNoticeIndicator
      ,dmt.RegrettableTerminationIndicator = Source.RegrettableTerminationIndicator
      ,dmt.TerminationComments = Source.TerminationComments
      ,dmt.TerminationNotifiedDate = Source.TerminationNotifiedDate
      ,dmt.LastWorkedDate = Source.LastWorkedDate
      ,dmt.ModifiedDate = GETDATE()    
      ,dmt.UpdateAuditID = ?
FROM	 dbo.DimTermination dmt
JOIN  DW_Landing.dbo.DimTerminationLanding Source ON Source.PeriodofServiceID=dmt.PeriodofServiceID
WHERE COALESCE(source.Deleted, 'N') = COALESCE(dmt.Deleted, 'N')

SELECT @@ROWCOUNT AS UpdateCount ;"
"DECLARE @InsertAuditID BIGINT = ?
DECLARE @CurDate datetime = GETDATE()

IF NOT EXISTS (SELECT 1 FROM dbo.DimTimeIn WHERE MinimumDays = -1)
	BEGIN
   SET IDENTITY_INSERT dbo.DimTimeIn ON;
		INSERT INTO dbo.DimTimeIn
		(
			TimeInKey,
                                                     TimeInID,
			MinimumDays,
			MaximumDays,
			TimeInGrouping,
			CreatedDate,
			ModifiedDate,
			InsertAuditID
		)
		VALUES
		(
                                                      -1,
			-1,
			-1,
			-1,
			'Unknown',
			@CurDate,
			@CurDate,
			@InsertAuditID
		)
	END

IF NOT EXISTS (SELECT 1 FROM dbo.DimTimeIn WHERE MinimumDays = -2)
	BEGIN
		INSERT INTO dbo.DimTimeIn
		(
			TimeInKey,
                                                    TimeInID,
			MinimumDays,
			MaximumDays,
			TimeInGrouping,
			CreatedDate,
			ModifiedDate,
			InsertAuditID
		)
		VALUES
		(
                                                      -2,
			-2,
			-2,
			-2,
			'N/A',
			@CurDate,
			@CurDate,
			@InsertAuditID
		)
 SET IDENTITY_INSERT dbo.DimTimeIn OFF;
	END"
Select GetDate() AS RowInsertDate ;
"DECLARE @BatchSplitByName VARCHAR(10) = 'FiscalDate';

EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, ?, ?, @BatchSplitByName, ?
GO"
"DELETE FROM [dbo].[FactCosting] WHERE [FiscalWeekEndDateKey] = ?;


SELECT @@ROWCOUNT AS Deleted"
"Execute spEndAuditLog ?,?,?,?,?"
"exec [dbo].[spFactCostingLoad] ? OUTPUT, ?, ?"
" EXEC [dbo].[spFactCostingUpdateKeys]  ?,?"
"SELECT Distinct [FiscalWeekStartDate], [FiscalWeekEndDate], [FiscalWeekEndDateKey]
FROM [dbo].[DimDate]
WHERE [FullDate] >= ?
AND [FullDate] <= GETDATE()"
"IF EXISTS
(SELECT 1
FROM ETLBatchControl(NOLOCK)
WHERE TableName = ? )

BEGIN
 (SELECT COALESCE(LastProcessedDate,'1900-01-01') AS  LastProcessedDate 
 FROM ETLBatchControl(NOLOCK)
 WHERE TableName = ? )

END

ELSE 

BEGIN
 INSERT INTO ETLBatchControl(TableName, LastProcessedDate, Status) VALUES
  (?, NULL, NULL);

SELECT '1900-01-01' AS  LastProcessedDate;
END"
"SELECT COALESCE(MIN([PayPeriodEndFullDate]), GETDATE()) AS PayPeriodEndFullDate FROM [dbo].[FactADPCostingBN] WHERE [InsertedDate] > ?"
"TRUNCATE TABLE [dbo].[FactPersonJobEntryDateRank];

INSERT INTO [dbo].[FactPersonJobEntryDateRank] (
	[PersonID], [JobEntryDate], [JobEntryDateRank]
)
SELECT
	[PersonID],
	[JobEntryDate],
	DENSE_RANK() OVER (PARTITION BY [PersonID] ORDER BY [JobEntryDate]) AS [Job Entry Date Rank]
FROM (
	SELECT DISTINCT [PersonID], [JobEntryDate] FROM [DW_Mart].[dbo].[FactCosting] (NOLOCK)
) AS [Rank];"
"DECLARE @PackageName VARCHAR(30) = ?;
DECLARE @ExecutionID VARCHAR(300) = ?;
DECLARE @CurrentDate DATE = CAST(GETDATE() AS DATE);
DECLARE @AuditID BIGINT;

IF ((SELECT MAX([avg_fragmentation_in_percent]) FROM [sys].[dm_db_index_physical_stats](DB_ID('DW_Mart'), OBJECT_ID('[dbo].[FactCosting]'), NULL, NULL, 'LIMITED')) > 10.00)
	BEGIN
		EXEC [dbo].[spBeginAuditLog]
			@AuditId = @AuditID OUTPUT,
			@SourceName = @PackageName,
			@ExecutionID = @ExecutionID,
			@BatchSplitByName = 'RebuildIndex',
			@BatchSplitByValue = @CurrentDate,
			@IsOverride = 0;

		ALTER INDEX [XAK1FactCosting] ON [dbo].[FactCosting] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = COLUMNSTORE);

		EXEC [dbo].[spEndAuditLog] 
			@InsertCount = 0,
			@UpdateCount = 0,
			@DeleteCount = 0,
			@SourceCount = 0,
			@AuditId = @AuditID,
			@IsOverride = 0;
	END;"
"UPDATE [dbo].[ETLBatchControl]
SET [LastProcessedDate] = GETDATE(),
[Status] = 'Success'
WHERE [TableName] = ?"
exec [dbo].[spFactEarningLoad] ? OUTPUT
"DELETE FROM [dbo].[FactEarning] WHERE [FiscalWeekEndDateKey] = ?;


SELECT @@ROWCOUNT AS Deleted"
"exec [dbo].[spFactEarningUpdateKeys] ?,?"
"SELECT COALESCE(MIN([PayPeriodEndFullDate]), GETDATE()) AS PayPeriodEndFullDate FROM [dbo].[FactADPEarningBN] WHERE [InsertedDate] > ?"
"DECLARE @PackageName VARCHAR(30) = ?;
DECLARE @ExecutionID VARCHAR(300) = ?;
DECLARE @CurrentDate DATE = CAST(GETDATE() AS DATE);
DECLARE @AuditID BIGINT;

IF ((SELECT MAX([avg_fragmentation_in_percent]) FROM [sys].[dm_db_index_physical_stats](DB_ID('DW_Mart'), OBJECT_ID('[dbo].[FactEarning]'), NULL, NULL, 'LIMITED')) > 10.00)
	BEGIN
		EXEC [dbo].[spBeginAuditLog]
			@AuditId = @AuditID OUTPUT,
			@SourceName = @PackageName,
			@ExecutionID = @ExecutionID,
			@BatchSplitByName = 'RebuildIndex',
			@BatchSplitByValue = @CurrentDate,
			@IsOverride = 0;

		ALTER INDEX [XAK1FactEarning] ON [dbo].[FactEarning] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = COLUMNSTORE);

		EXEC [dbo].[spEndAuditLog] 
			@InsertCount = 0,
			@UpdateCount = 0,
			@DeleteCount = 0,
			@SourceCount = 0,
			@AuditId = @AuditID,
			@IsOverride = 0;
	END;"
SELECT COUNT(1) AS DeleteCount FROM dbo.FactEmployeeCensus(NOLOCK)
TRUNCATE TABLE dbo.FactEmployeeCensus
SELECT COUNT(1) AS DeleteCount FROM dbo.FactEmployeeCensusLanding(NOLOCK)
SELECT MAX(FullDate) AS FullDate FROM BaseEmployeeCensusBN(NOLOCK)
"UPDATE f
 SET f.AssignmentKey = p.AssignmentKey
, DateTimeModified = GETDATE()
, UpdateAuditID = ?
FROM dbo.FactEmployeeCensusArchive f
JOIN dbo.DimDate d ON f.DateKey = d.DateKey
LEFT JOIN dbo.DimAssignment p ON f.AssignmentID = p.AssignmentID AND (d.FullDate BETWEEN p.EffectiveFrom AND p.EffectiveTo) AND p.Deleted IS NULL AND  CreatedDate > ?
WHERE p.AssignmentKey <> f.AssignmentKey 

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE f
 SET f.PersonKey = p.PersonKey
, DateTimeModified = GETDATE()
, UpdateAuditID = ?
FROM dbo.FactEmployeeCensusArchive f
JOIN dbo.DimDate d ON f.DateKey = d.DateKey
LEFT JOIN dbo.DimPerson p ON f.PersonID = p.PersonID AND (d.FullDate BETWEEN p.EffectiveFrom AND p.EffectiveTo) AND p.Deleted IS NULL AND  CreatedDate > ?
WHERE p.PersonKey <> f.PersonKey 

SELECT @@ROWCOUNT AS UpdateCount;"
"DECLARE @BatchSplitByName VARCHAR(10) = 'FiscalWeekDate';

EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, ?, ?, @BatchSplitByName, ?
GO"
"DECLARE @FiscalDate DATE = ?;

/* Delete if data exists before loading during the reload */
		
DELETE f
FROM dbo.FactEmployeeCensusArchive f
JOIN  dbo.DimDate d ON f.DateKey = d.DateKey 
WHERE FullDate =  @FiscalDate;

SELECT @@ROWCOUNT AS DeleteCount;
"
"EXECUTE [dbo].[spEndAuditLog] ?, ?, ?, ?, ?, ?
GO"
"DECLARE @BatchSplitByName VARCHAR(10) = 'FiscalWeek';

EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, ?, ?, @BatchSplitByName, ?
GO"
"/* Get Last Fiscal Date processed successfully from AuditLog */

DECLARE @LastSuccessfulFiscalDate DATE;

DECLARE @DateKey INT = (SELECT MAX(DateKey) FROM dbo.FactEmployeeCensusArchive(NOLOCK));

WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?) AND IsOverride = 0
      GROUP BY TaskName)

SELECT @LastSuccessfulFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT CASE WHEN @DateKey IS NULL THEN ?
  ELSE ISNULL(@LastSuccessfulFiscalDate, '1900-01-01') 
    END AS LastSuccessfulFiscalDate;  "
"/* Get Last Fiscal Date processed successfully from AuditLog for override only */

DECLARE @BatchOverrideID BIGINT = ?;
DECLARE @NewExecutionID VARCHAR(300) = ?;
DECLARE @ExecutionIDS TABLE (ExecutionID VARCHAR(300));
DECLARE @LastSuccessfulFiscalDate DATE;

/*If there are no ExecutionID's for the BatchOverride then Insert into the table*/
IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID)
BEGIN 
 INSERT INTO dbo.ETLBatchOverrideExecutions (BatchOverrideID, ExecutionID) VALUES(@BatchOverrideID, @NewExecutionID )
END 
ELSE
 INSERT INTO @ExecutionIDS 
SELECT COALESCE(ExecutionID, '' )ExecutionID FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID;

/*If there are ExecutionID's for the BatchOverride then join on ExecutionID to get the Last fiscal date loaded successfully*/
WITH LatestJobAuditByTaskName AS (
SELECT TaskName, MAX(AuditId) AS LatestJobAudit
FROM dbo.AuditLog (NOLOCK)a
JOIN @ExecutionIDS e ON a.ExecutionID = e.ExecutionID
WHERE (StatusCode = 1) AND (TaskName = ?) AND IsOverride = 1 
      GROUP BY TaskName)


SELECT @LastSuccessfulFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT ISNULL(@LastSuccessfulFiscalDate, '1900-01-01') AS LastSuccessfulFiscalDate"
"DECLARE @StartDate DATETIME = ?;
DECLARE @CurrentDate DATE = CAST(GETDATE() AS DATE);
DECLARE @LastSuccessfulFiscalDate DATE = CAST(NULLIF(?, '1900-01-01') AS DATE);
DECLARE @FiscalDatesToProcess TABLE (FullDate DATE);

IF (@LastSuccessfulFiscalDate IS NULL)
BEGIN
	INSERT INTO @FiscalDatesToProcess
	SELECT DISTINCT FullDate
	FROM dbo.BaseEmployeeCensusBN
	WHERE FullDate BETWEEN  @StartDate AND @CurrentDate
	ORDER BY FullDate
END 
ELSE 
BEGIN
	INSERT INTO @FiscalDatesToProcess
	SELECT DISTINCT FullDate
	FROM dbo.BaseEmployeeCensusBN
	WHERE BaseCreatedDate > @StartDate
	UNION
	SELECT DISTINCT FullDate
	FROM dbo.BaseEmployeeCensusBN
	WHERE FullDate > @LastSuccessfulFiscalDate
	ORDER BY FullDate
END

SELECT FullDate
FROM @FiscalDatesToProcess
WHERE DATENAME(WEEKDAY, FullDate) = 'Sunday'
ORDER BY FullDate;"
"DECLARE @OverrideStartDate DATE = ?;
DECLARE @OverrideEndDate DATE = ?;
DECLARE @LastSuccessfulFiscalDate DATE = CAST(NULLIF(?, '1900-01-01') AS DATE); 
DECLARE @FiscalDatesToProcess TABLE (FullDate DATE);

IF (@LastSuccessfulFiscalDate IS NULL)
BEGIN
	INSERT INTO @FiscalDatesToProcess
	SELECT DISTINCT FullDate
	FROM dbo.BaseEmployeeCensusBN
	WHERE FullDate BETWEEN  @OverrideStartDate AND @OverrideEndDate
	ORDER BY FullDate
END 
ELSE 
BEGIN
	INSERT INTO @FiscalDatesToProcess
	SELECT DISTINCT FullDate
	FROM dbo.BaseEmployeeCensusBN
	WHERE FullDate > @LastSuccessfulFiscalDate AND FullDate<= @OverrideEndDate
	ORDER BY FullDate
END

SELECT FullDate
FROM @FiscalDatesToProcess
WHERE DATENAME(WEEKDAY, FullDate) = 'Sunday'
ORDER BY FullDate;
"
SELECT MIN(FullDate) AS FullDate FROM BaseEmployeeCensusBN(NOLOCK)
"DECLARE @OverrideStartDate DATE;
DECLARE @OverrideEndDate DATE;
DECLARE @BatchOverrideID BIGINT;
DECLARE @IsOverride BIT;
DECLARE @PackageName VARCHAR(50) = ?;

IF EXISTS
(
    SELECT 1
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
)
BEGIN
    SELECT TOP 1
           @BatchOverrideID = BatchOverrideID,
           @OverrideStartDate = OverrideStartDate,
           @OverrideEndDate = OverrideEndDate
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
    ORDER BY CreatedDate DESC;
    SET @IsOverride = 1;
END;
ELSE
BEGIN
    SET @OverrideStartDate =
    (
        SELECT COALESCE(LastProcessedDate, ?)
        FROM DW_Landing.dbo.ETLBatchControl
        WHERE TableName = @PackageName
    );
    SET @OverrideEndDate = GETDATE();
    SET @IsOverride = 0;
END;
SELECT @BatchOverrideID AS BatchOverrideID,
       @OverrideStartDate AS OverrideStartDate,
       @OverrideEndDate AS OverrideEndDate,
       @IsOverride AS IsOverride;
"
"DECLARE @PackageName VARCHAR(MAX) = ?;
DECLARE @MinFullDate DATE = CAST(? AS DATE);


IF (NOT EXISTS ( SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = @PackageName ))
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName, LastProcessedDate) VALUES (@PackageName, @MinFullDate);
 END
ELSE IF (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = @PackageName) = NULL
 BEGIN
  UPDATE dbo.ETLBatchControl
  SET LastProcessedDate = @MinFullDate
  WHERE TableName = @PackageName
 END
ELSE IF (NOT EXISTS (SELECT 1 FROM DW_MART.dbo.FactEmployeeCensusArchive ))
 BEGIN
  UPDATE dbo.ETLBatchControl
  SET LastProcessedDate = @MinFullDate
  WHERE TableName = @PackageName
 END

SELECT LastProcessedDate 
FROM dbo.ETLBatchControl WHERE TableName = @PackageName;  "
"DECLARE @CurrentDate DATE = ?;
DECLARE @YearBackDate DATE = (SELECT DATEADD(DAY, -365, @CurrentDate));
DECLARE @DeleteCount INT;


/*Delete records more than one year */

DELETE f 
FROM dbo.FactEmployeeCensusArchive f
JOIN dbo.DimDate d on f.DateKey = d.DateKey
WHERE FullDate < @YearBackDate;
  
  SET @DeleteCount = (SELECT @@ROWCOUNT);


SELECT @DeleteCount AS DeleteCount;
"
"DECLARE @PreviousDeleteCount INT = ?;
DECLARE @DeleteCount INT = @PreviousDeleteCount;


SET @DeleteCount = @DeleteCount + (SELECT COALESCE(SUM(DeleteCount), 0) 
FROM dbo.AuditLog(NOLOCK)
WHERE ExecutionID = ? AND TaskName = ?)


SELECT ? = @DeleteCount;"
"SELECT SUM(SourceCount) AS SourceCount, SUM(InsertCount) AS InsertCount, SUM(UpdateCount) AS UpdateCount
FROM dbo.AuditLog(NOLOCK)
WHERE ExecutionID = ? AND TaskName = ?"
"UPDATE dbo.ETLBatchOverride
SET IsActive = 0
         , LastProcessedDate = ?
WHERE TaskName = ?
AND IsActive = 1"
"UPDATE dbo.ETLBatchControl 
SET LastProcessedDate = ?
, Status = 'Success'
WHERE TableName = ?;"
"DECLARE @TableName VARCHAR(100) = ?

SELECT COALESCE(LastProcessedDate, '2016-01-01') AS LastProcessedDate
FROM dbo.ETLBatchControl
WHERE TableName = @TableName"
"UPDATE f 
SET f.AssignmentKey = p.AssignmentKey
, DateTimeModified = GETDATE()
, UpdateAuditID = ?
FROM dbo.FactEmployeeEvent f
JOIN dbo.DimDate d ON f.DateKey = d.DateKey
LEFT JOIN dbo.DimAssignment p ON f.AssignmentID = p.AssignmentID AND (d.FullDate BETWEEN p.EffectiveFrom AND p.EffectiveTo) AND p.Deleted IS NULL AND CreatedDate > ?
WHERE p.AssignmentKey <> f.AssignmentKey 

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE f 
SET f.PersonKey = p.PersonKey
, DateTimeModified = GETDATE()
, UpdateAuditID = ?
FROM dbo.FactEmployeeEvent f
JOIN dbo.DimDate d ON f.DateKey = d.DateKey
LEFT JOIN dbo.DimPerson p ON f.PersonID = p.PersonID AND (d.FullDate BETWEEN p.EffectiveFrom AND p.EffectiveTo) AND p.Deleted IS NULL AND CreatedDate > ?
WHERE p.PersonKey <> f.PersonKey 

SELECT @@ROWCOUNT AS UpdateCount;"
"DECLARE @FiscalDate DATE = ?;

/* Delete if data exists before loading during the reload */
  
DELETE f
FROM dbo.FactEmployeeEvent f
JOIN  dbo.DimDate d ON f.DateKey = d.DateKey 
WHERE FullDate =  @FiscalDate;

SELECT @@ROWCOUNT AS DeleteCount;
"
"Execute spBeginAuditLog ? OUTPUT, ?,?,?,?;"
TRUNCATE TABLE FactEmployeeEventLanding;
"DECLARE @StartDate DATETIME = ?;
DECLARE @CurrentDate DATE = CAST(GETDATE() AS DATE);
DECLARE @LastProcessedDate DATETIME = cast(? as date);


IF (@LastProcessedDate='2001-01-01')
BEGIN
	SELECT DISTINCT fulldate as vFiscalEndDate
FROM hr_base.dbo.BaseEmployeeEventBN (NOLOCK) AS b
WHERE fulldate >=cast(@StartDate as date) and fulldate is not null 
order by fulldate asc
END
ELSE 
BEGIN
SELECT DISTINCT fulldate as vFiscalEndDate
FROM hr_base.dbo.BaseEmployeeEventBN (NOLOCK) AS b
WHERE fulldate >=cast(@StartDate as date) and fulldate is not null 
UNION 
SELECT DISTINCT fulldate as vFiscalEndDate
FROM hr_base.dbo.BaseEmployeeEventBN (NOLOCK) AS b
WHERE BaseCreatedDate  BETWEEN  ?  AND getdate() and fulldate is not null order by fulldate asc	
END


"
"

DECLARE @LastProcessFiscalWeekEndDate datetime, @LastProcessDate datetime, @LastsuccessfulDate DateTime;
WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(BatchSplitByValue) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastProcessFiscalWeekEndDate = 
ja.BatchSplitByValue, @LastProcessDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.BatchSplitByValue;

WITH LatestJobAuditBySuccessfulRun AS (
   SELECT TaskName, MAX(BatchSplitByValue) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastsuccessfulDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditBySuccessfulRun AS lja ON lja.LatestJobAudit = ja.BatchSplitByValue;


SELECT ISNULL(@LastProcessFiscalWeekEndDate, '2001-01-01') AS LastProcessFiscalWeekEndDate

"
"DECLARE @OverrideStartDate DATE = ?;
DECLARE @OverrideEndDate DATE = ?;
DECLARE @LastProcessedFiscalDate DATE = CAST(NULLIF(?, '1900-01-01') AS DATE); 
DECLARE @CurrentDate DATE = CAST(? AS DATE);
DECLARE @Weekday VARCHAR(15) = (SELECT DATENAME(WEEKDAY, @OverrideEndDate));
DECLARE @FiscalWeekStartDate DATE = (SELECT FiscalWeekStartDate FROM dbo.DimDate WHERE FullDate = @CurrentDate)

IF (@Weekday <> 'Sunday' AND @OverrideEndDate > @FiscalWeekStartDate)
 BEGIN
  IF (@LastProcessedFiscalDate IS NULL)
   BEGIN
    SELECT DISTINCT FullDate as vFiscalEndDate
    FROM dbo.DimDate
    WHERE FullDate  BETWEEN @OverrideStartDate AND @OverrideEndDate
    UNION 
    SELECT @CurrentDate AS vFiscalEndDate
    ORDER BY FullDate 
   END
  ELSE 
   BEGIN
    SELECT DISTINCT FullDate as vFiscalEndDate
    FROM dbo.DimDate
    WHERE (FullDate  BETWEEN @OverrideStartDate AND @OverrideEndDate)
    AND FullDate > @LastProcessedFiscalDate
    UNION 
    SELECT @CurrentDate AS vFiscalEndDate
    ORDER BY FullDate 
   END
 END 
ELSE 
 BEGIN
  IF (@LastProcessedFiscalDate IS NULL)
   BEGIN
    SELECT DISTINCT FullDate as vFiscalEndDate
    FROM dbo.DimDate
    WHERE FullDate BETWEEN @OverrideStartDate AND @OverrideEndDate
   END
  ELSE 
   BEGIN
    SELECT DISTINCT FullDate as vFiscalEndDate
    FROM dbo.DimDate
    WHERE (FullDate  BETWEEN @OverrideStartDate AND @OverrideEndDate)
    AND FullDate > @LastProcessedFiscalDate
    ORDER BY FullDate 
   END
 END "
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName,LastProcessedDate) VALUES (?,'2001-01-01')
 END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);



SELECT @LastProcessedDate AS LastProcessedDate;"
"SELECT SUM(SourceCount) AS TotalSourceCount, SUM(InsertCount) AS TotalInsertCount, SUM(UpdateCount) AS TotalUpdateCount, SUM(DeleteCount) AS TotalDeleteCount
FROM AuditLog(NOLOCK)
WHERE ExecutionID = ?
"
"Execute spBeginAuditLog ? OUTPUT, ?, ?;"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)
	BEGIN
		INSERT INTO dbo.ETLBatchControl (TableName) VALUES (?)
	END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.AccreditationBN);

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));

SELECT @LastProcessedDate AS LastProcessedDate;"
"WITH PerQualifications AS 
(
SELECT 
pq.qualification_id AS QualificationID
FROM dbo.PER_QUALIFICATIONS_B0 pq
LEFT JOIN dbo.PER_QUALIFICATION_TYPES_B0 pqt ON pq.qualification_type_id = pqt.qualification_type_id
WHERE pq.person_id IS NOT NULL
)

UPDATE abn 
SET abn.Deleted = 'Y'
  , abn.BaseModifiedDate = GETDATE()
  , abn.UpdateAuditID = ?
FROM dbo.AccreditationBN abn
WHERE NOT EXISTS
(
    SELECT 1
    FROM PerQualifications pq
    WHERE pq.QualificationID = abn.QualificationID
)
AND abn.Deleted IS NULL;

SELECT @@ROWCOUNT AS DeleteCount ;"
"WITH PerQualifications AS 
(
SELECT 
pq.qualification_id AS QualificationID
, COALESCE(pqt.name, 'N/A') AS Accreditation
, COALESCE(pq.title, '') AS AreaOfStudy
, COALESCE(pq.start_date, '9999-12-31') AS AccreditationDate
, COALESCE(pq.comments, '') AS Comments
, CAST(HASHBYTES('MD5',
(SELECT pq.qualification_id
      , COALESCE(pqt.name, 'N/A') Accreditation
      , pq.title
      , pq.start_date
      , pq.comments FOR XML RAW)) AS BINARY(16)) AS RowHash
FROM dbo.PER_QUALIFICATIONS_B0 pq
LEFT JOIN dbo.PER_QUALIFICATION_TYPES_B0 pqt ON pq.qualification_type_id = pqt.qualification_type_id
WHERE pq.person_id IS NOT NULL
)
, PerQualificationUpdate AS
(
SELECT *
FROM PerQualifications pq
WHERE EXISTS
(
    SELECT 1
    FROM dbo.AccreditationBN abn
    WHERE pq.QualificationID = abn.QualificationID AND pq.RowHash <> abn.RowHash
)
)

UPDATE bn
   SET  bn.Accreditation	  =   base.Accreditation		
      , bn.AreaOfStudy		  =   base.AreaOfStudy		
      , bn.AccreditationDate  =   base.AccreditationDate  
      , bn.Comments		      =   base.Comments		    
      , bn.BaseModifiedDate	  =   GETDATE()    
      , bn.UpdateAuditID	  =   ?	    
      , bn.RowHash			  =   base.RowHash			
FROM dbo.AccreditationBN bn
JOIN PerQualificationUpdate base ON bn.QualificationID = base.QualificationID

SELECT @@ROWCOUNT AS UpdateCount ;"
"DELETE FROM base
FROM dbo.[AP_SUPPLIERS_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[AP_SUPPLIERS_B0Landing] landing
    WHERE base.vendor_id = landing.vendor_id
);

SELECT @@ROWCOUNT AS DeleteCount;"
"UPDATE base SET 
	base.last_update_date = landing.last_update_date,
	base.last_updated_by = landing.last_updated_by,
	base.vendor_name = landing.vendor_name,
	base.vendor_name_alt = landing.vendor_name_alt,
	base.segment1 = landing.segment1,
	base.summary_flag = landing.summary_flag,
	base.enabled_flag = landing.enabled_flag,
	base.segment2 = landing.segment2,
	base.segment3 = landing.segment3,
	base.segment4 = landing.segment4,
	base.segment5 = landing.segment5,
	base.last_update_login = landing.last_update_login,
	base.creation_date = landing.creation_date,
	base.created_by = landing.created_by,
	base.employee_id = landing.employee_id,
	base.vendor_type_lookup_code = landing.vendor_type_lookup_code,
	base.customer_num = landing.customer_num,
	base.one_time_flag = landing.one_time_flag,
	base.parent_vendor_id = landing.parent_vendor_id,
	base.min_order_amount = landing.min_order_amount,
	base.ship_to_location_id = landing.ship_to_location_id,
	base.bill_to_location_id = landing.bill_to_location_id,
	base.ship_via_lookup_code = landing.ship_via_lookup_code,
	base.freight_terms_lookup_code = landing.freight_terms_lookup_code,
	base.fob_lookup_code = landing.fob_lookup_code,
	base.terms_id = landing.terms_id,
	base.set_of_books_id = landing.set_of_books_id,
	base.credit_status_lookup_code = landing.credit_status_lookup_code,
	base.credit_limit = landing.credit_limit,
	base.always_take_disc_flag = landing.always_take_disc_flag,
	base.pay_date_basis_lookup_code = landing.pay_date_basis_lookup_code,
	base.pay_group_lookup_code = landing.pay_group_lookup_code,
	base.payment_priority = landing.payment_priority,
	base.invoice_currency_code = landing.invoice_currency_code,
	base.payment_currency_code = landing.payment_currency_code,
	base.invoice_amount_limit = landing.invoice_amount_limit,
	base.exchange_date_lookup_code = landing.exchange_date_lookup_code,
	base.hold_all_payments_flag = landing.hold_all_payments_flag,
	base.hold_future_payments_flag = landing.hold_future_payments_flag,
	base.hold_reason = landing.hold_reason,
	base.distribution_set_id = landing.distribution_set_id,
	base.accts_pay_code_combination_id = landing.accts_pay_code_combination_id,
	base.disc_lost_code_combination_id = landing.disc_lost_code_combination_id,
	base.disc_taken_code_combination_id = landing.disc_taken_code_combination_id,
	base.expense_code_combination_id = landing.expense_code_combination_id,
	base.prepay_code_combination_id = landing.prepay_code_combination_id,
	base.num_1099 = landing.num_1099,
	base.type_1099 = landing.type_1099,
	base.withholding_status_lookup_code = landing.withholding_status_lookup_code,
	base.withholding_start_date = landing.withholding_start_date,
	base.organization_type_lookup_code = landing.organization_type_lookup_code,
	base.vat_code = landing.vat_code,
	base.start_date_active = landing.start_date_active,
	base.end_date_active = landing.end_date_active,
	base.minority_group_lookup_code = landing.minority_group_lookup_code,
	base.payment_method_lookup_code = landing.payment_method_lookup_code,
	base.bank_account_name = landing.bank_account_name,
	base.bank_account_num = landing.bank_account_num,
	base.bank_num = landing.bank_num,
	base.bank_account_type = landing.bank_account_type,
	base.women_owned_flag = landing.women_owned_flag,
	base.small_business_flag = landing.small_business_flag,
	base.standard_industry_class = landing.standard_industry_class,
	base.hold_flag = landing.hold_flag,
	base.purchasing_hold_reason = landing.purchasing_hold_reason,
	base.hold_by = landing.hold_by,
	base.hold_date = landing.hold_date,
	base.terms_date_basis = landing.terms_date_basis,
	base.price_tolerance = landing.price_tolerance,
	base.inspection_required_flag = landing.inspection_required_flag,
	base.receipt_required_flag = landing.receipt_required_flag,
	base.qty_rcv_tolerance = landing.qty_rcv_tolerance,
	base.qty_rcv_exception_code = landing.qty_rcv_exception_code,
	base.enforce_ship_to_location_code = landing.enforce_ship_to_location_code,
	base.days_early_receipt_allowed = landing.days_early_receipt_allowed,
	base.days_late_receipt_allowed = landing.days_late_receipt_allowed,
	base.receipt_days_exception_code = landing.receipt_days_exception_code,
	base.receiving_routing_id = landing.receiving_routing_id,
	base.allow_substitute_receipts_flag = landing.allow_substitute_receipts_flag,
	base.allow_unordered_receipts_flag = landing.allow_unordered_receipts_flag,
	base.hold_unmatched_invoices_flag = landing.hold_unmatched_invoices_flag,
	base.exclusive_payment_flag = landing.exclusive_payment_flag,
	base.ap_tax_rounding_rule = landing.ap_tax_rounding_rule,
	base.auto_tax_calc_flag = landing.auto_tax_calc_flag,
	base.auto_tax_calc_override = landing.auto_tax_calc_override,
	base.amount_includes_tax_flag = landing.amount_includes_tax_flag,
	base.tax_verification_date = landing.tax_verification_date,
	base.name_control = landing.name_control,
	base.state_reportable_flag = landing.state_reportable_flag,
	base.federal_reportable_flag = landing.federal_reportable_flag,
	base.attribute_category = landing.attribute_category,
	base.attribute1 = landing.attribute1,
	base.attribute2 = landing.attribute2,
	base.attribute3 = landing.attribute3,
	base.attribute4 = landing.attribute4,
	base.attribute5 = landing.attribute5,
	base.attribute6 = landing.attribute6,
	base.attribute7 = landing.attribute7,
	base.attribute8 = landing.attribute8,
	base.attribute9 = landing.attribute9,
	base.attribute10 = landing.attribute10,
	base.attribute11 = landing.attribute11,
	base.attribute12 = landing.attribute12,
	base.attribute13 = landing.attribute13,
	base.attribute14 = landing.attribute14,
	base.attribute15 = landing.attribute15,
	base.request_id = landing.request_id,
	base.program_application_id = landing.program_application_id,
	base.program_id = landing.program_id,
	base.program_update_date = landing.program_update_date,
	base.offset_vat_code = landing.offset_vat_code,
	base.vat_registration_num = landing.vat_registration_num,
	base.auto_calculate_interest_flag = landing.auto_calculate_interest_flag,
	base.validation_number = landing.validation_number,
	base.exclude_freight_from_discount = landing.exclude_freight_from_discount,
	base.tax_reporting_name = landing.tax_reporting_name,
	base.check_digits = landing.check_digits,
	base.bank_number = landing.bank_number,
	base.allow_awt_flag = landing.allow_awt_flag,
	base.awt_group_id = landing.awt_group_id,
	base.global_attribute1 = landing.global_attribute1,
	base.global_attribute2 = landing.global_attribute2,
	base.global_attribute3 = landing.global_attribute3,
	base.global_attribute4 = landing.global_attribute4,
	base.global_attribute5 = landing.global_attribute5,
	base.global_attribute6 = landing.global_attribute6,
	base.global_attribute7 = landing.global_attribute7,
	base.global_attribute8 = landing.global_attribute8,
	base.global_attribute9 = landing.global_attribute9,
	base.global_attribute10 = landing.global_attribute10,
	base.global_attribute11 = landing.global_attribute11,
	base.global_attribute12 = landing.global_attribute12,
	base.global_attribute13 = landing.global_attribute13,
	base.global_attribute14 = landing.global_attribute14,
	base.global_attribute15 = landing.global_attribute15,
	base.global_attribute16 = landing.global_attribute16,
	base.global_attribute17 = landing.global_attribute17,
	base.global_attribute18 = landing.global_attribute18,
	base.global_attribute19 = landing.global_attribute19,
	base.global_attribute20 = landing.global_attribute20,
	base.global_attribute_category = landing.global_attribute_category,
	base.edi_transaction_handling = landing.edi_transaction_handling,
	base.edi_payment_method = landing.edi_payment_method,
	base.edi_payment_format = landing.edi_payment_format,
	base.edi_remittance_method = landing.edi_remittance_method,
	base.edi_remittance_instruction = landing.edi_remittance_instruction,
	base.bank_charge_bearer = landing.bank_charge_bearer,
	base.bank_branch_type = landing.bank_branch_type,
	base.match_option = landing.match_option,
	base.future_dated_payment_ccid = landing.future_dated_payment_ccid,
	base.create_debit_memo_flag = landing.create_debit_memo_flag,
	base.offset_tax_flag = landing.offset_tax_flag,
	base.party_id = landing.party_id,
	base.parent_party_id = landing.parent_party_id,
	base.ni_number = landing.ni_number,
	base.tca_sync_num_1099 = landing.tca_sync_num_1099,
	base.tca_sync_vendor_name = landing.tca_sync_vendor_name,
	base.tca_sync_vat_reg_num = landing.tca_sync_vat_reg_num,
	base.unique_tax_reference_num = landing.unique_tax_reference_num,
	base.partnership_utr = landing.partnership_utr,
	base.partnership_name = landing.partnership_name,
	base.cis_enabled_flag = landing.cis_enabled_flag,
	base.first_name = landing.first_name,
	base.second_name = landing.second_name,
	base.last_name = landing.last_name,
	base.salutation = landing.salutation,
	base.trading_name = landing.trading_name,
	base.work_reference = landing.work_reference,
	base.company_registration_number = landing.company_registration_number,
	base.national_insurance_number = landing.national_insurance_number,
	base.verification_number = landing.verification_number,
	base.verification_request_id = landing.verification_request_id,
	base.match_status_flag = landing.match_status_flag,
	base.cis_verification_date = landing.cis_verification_date,
	base.individual_1099 = landing.individual_1099,
	base.pay_awt_group_id = landing.pay_awt_group_id,
	base.cis_parent_vendor_id = landing.cis_parent_vendor_id,
	base.bus_class_last_certified_date = landing.bus_class_last_certified_date,
	base.bus_class_last_certified_by = landing.bus_class_last_certified_by,
	base.datalakeinserttime = landing.datalakeinserttime,
	base.[RowHash] = landing.RowHash,
	base.[BaseCreatedDate] = GETDATE(),
	base.[BaseCreatedBy] = SUSER_SNAME()
FROM [HR_Base].dbo.[AP_SUPPLIERS_B0] base
JOIN [HR_Landing].dbo.[AP_SUPPLIERS_B0Landing] landing 
	ON base.vendor_id = landing.vendor_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target SET 
	target.RowHash = src.RowHash
FROM 
(SELECT 
	vendor_id,
	HASHBYTES('MD5',
(SELECT
	vendor_name,
	vendor_name_alt,
	segment1,
	summary_flag,
	enabled_flag,
	segment2,
	segment3,
	segment4,
	segment5,
	employee_id,
	vendor_type_lookup_code,
	customer_num,
	one_time_flag,
	parent_vendor_id,
	min_order_amount,
	ship_to_location_id,
	bill_to_location_id,
	ship_via_lookup_code,
	freight_terms_lookup_code,
	fob_lookup_code,
	terms_id,
	set_of_books_id,
	credit_status_lookup_code,
	credit_limit,
	always_take_disc_flag,
	pay_date_basis_lookup_code,
	pay_group_lookup_code,
	payment_priority,
	invoice_currency_code,
	payment_currency_code,
	invoice_amount_limit,
	exchange_date_lookup_code,
	hold_all_payments_flag,
	hold_future_payments_flag,
	hold_reason,
	distribution_set_id,
	accts_pay_code_combination_id,
	disc_lost_code_combination_id,
	disc_taken_code_combination_id,
	expense_code_combination_id,
	prepay_code_combination_id,
	num_1099,
	type_1099,
	withholding_status_lookup_code,
	withholding_start_date,
	organization_type_lookup_code,
	vat_code,
	start_date_active,
	end_date_active,
	minority_group_lookup_code,
	payment_method_lookup_code,
	bank_account_name,
	bank_account_num,
	bank_num,
	bank_account_type,
	women_owned_flag,
	small_business_flag,
	standard_industry_class,
	hold_flag,
	purchasing_hold_reason,
	hold_by,
	hold_date,
	terms_date_basis,
	price_tolerance,
	inspection_required_flag,
	receipt_required_flag,
	qty_rcv_tolerance,
	qty_rcv_exception_code,
	enforce_ship_to_location_code,
	days_early_receipt_allowed,
	days_late_receipt_allowed,
	receipt_days_exception_code,
	receiving_routing_id,
	allow_substitute_receipts_flag,
	allow_unordered_receipts_flag,
	hold_unmatched_invoices_flag,
	exclusive_payment_flag,
	ap_tax_rounding_rule,
	auto_tax_calc_flag,
	auto_tax_calc_override,
	amount_includes_tax_flag,
	tax_verification_date,
	name_control,
	state_reportable_flag,
	federal_reportable_flag,
	attribute_category,
	attribute1,
	attribute2,
	attribute3,
	attribute4
	attribute5,
	attribute6,
	attribute7,
	attribute8,
	attribute9,
	attribute10,
	attribute11,
	attribute12,
	attribute13,
	attribute14,
	attribute15,
	request_id,
	program_application_id,
	program_id,
	program_update_date,
	offset_vat_code,
	vat_registration_num,
	auto_calculate_interest_flag,
	validation_number,
	exclude_freight_from_discount,
	tax_reporting_name,
	check_digits,
	bank_number,
	allow_awt_flag,
	awt_group_id,
	global_attribute1,
	global_attribute2,
	global_attribute3,
	global_attribute4,
	global_attribute5,
	global_attribute6,
	global_attribute7,
	global_attribute8,
	global_attribute9,
	global_attribute10,
	global_attribute11,
	global_attribute12,
	global_attribute13,
	global_attribute14,
	global_attribute15,
	global_attribute16,
	global_attribute17,
	global_attribute18,
	global_attribute19,
	global_attribute20,
	global_attribute_category,
	edi_transaction_handling,
	edi_payment_method,
	edi_payment_format,
	edi_remittance_method,
	edi_remittance_instruction,
	bank_charge_bearer,
	bank_branch_type,
	match_option,
	future_dated_payment_ccid,
	create_debit_memo_flag,
	offset_tax_flag,
	party_id,
	parent_party_id,
	ni_number,
	tca_sync_num_1099,
	tca_sync_vendor_name,
	tca_sync_vat_reg_num,
	unique_tax_reference_num,
	partnership_utr,
	partnership_name,
	cis_enabled_flag,
	first_name,
	second_name,
	last_name,
	salutation,
	trading_name,
	work_reference,
	company_registration_number,
	national_insurance_number,
	verification_number,
	verification_request_id,
	match_status_flag,
	cis_verification_date,
	individual_1099,
	pay_awt_group_id,
	cis_parent_vendor_id,
	bus_class_last_certified_date,
	bus_class_last_certified_by
	FOR XML RAW)) AS RowHash
FROM dbo.AP_SUPPLIERS_B0Landing l) src
JOIN dbo.AP_SUPPLIERS_B0Landing target ON src.vendor_id = target.vendor_id

SELECT @@ROWCOUNT AS UpdateCount;"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName) VALUES (?)
 END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.AssessmentBN);

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));

SELECT @LastProcessedDate AS LastProcessedDate;"
"WITH Assessment AS
(
SELECT  
	    ( coalesce(PAC.segment1,'') + case when PAC.segment1 is not null or PAC.segment3 is not null then   '_' end  + coalesce (PAC.segment3,'')) AS  AssessmentID 
FROM dbo.PER_ANALYSIS_CRITERIA_B0 PAC
     LEFT JOIN dbo.FND_ID_FLEX_STRUCTURES_TL_B0 FIFST
        ON PAC.id_flex_num = FIFST.id_flex_num
WHERE  FIFST.id_flex_structure_name='Assessment -'
)

UPDATE Trmn
SET Trmn.Deleted = 'Y',
    Trmn.BaseModifiedDate = GETDATE(),
   Trmn.UpdateAuditID = ?
FROM AssessmentBN Trmn
WHERE NOT EXISTS
      (
          SELECT 1
		  FROM Assessment pps
		  WHERE pps.AssessmentID=Trmn.AssessmentID
)		  
      
      AND Trmn.deleted IS NULL;

SELECT @@RowCount AS DeleteCount;"
"
UPDATE  dbo.ETLBatchControl 
SET LastProcessedDate = GETDATE()
, Status = 'Success'
WHERE Tablename = ?;"
"
WITH B0Query AS 
(
SELECT 
 DISTINCT PAC.segment1 as AssessmentType,
  PAC.segment3 as AssessmentBand,
( coalesce(PAC.segment1,'') + case when PAC.segment1 is not null or PAC.segment3 is not null then   '_' end  + coalesce (PAC.segment3,'')) AS  AssessmentID 
, CAST(HASHBYTES('MD5',
(SELECT PAC.segment1 as AssessmentType,
  PAC.segment3 as AssessmentBand,
( coalesce(PAC.segment1,'') + case when PAC.segment1 is not null or PAC.segment3 is not null then   '_' end  + coalesce (PAC.segment3,'')) AS  AssessmentID FOR XML RAW)) AS BINARY(16)) AS RowHash
FROM dbo.PER_ANALYSIS_CRITERIA_B0 PAC
     LEFT JOIN dbo.FND_ID_FLEX_STRUCTURES_TL_B0 FIFST
        ON PAC.id_flex_num = FIFST.id_flex_num
WHERE  FIFST.id_flex_structure_name='Assessment -' 
)

, AssessmentBNUpdate AS (SELECT * FROM B0Query B0

WHERE EXISTS 
(SELECT 1 FROM dbo.AssessmentBN BN
WHERE BN.AssessmentID=B0.AssessmentID AND B0.RowHash<>BN.RowHash  )
)
UPDATE BN 

SET  [AssessmentType] =                      Upd.[AssessmentType],
    [AssessmentBand] =              Upd.[AssessmentBand],     
    [BaseModifiedDate] = GETDATE(),
    [UpdateAuditID] = ?,

    [RowHash] =upd.RowHash
	

	FROM dbo.AssessmentBN BN 
	JOIN AssessmentBNUpdate Upd ON BN.AssessmentID=Upd.AssessmentID

	
SELECT @@ROWCOUNT AS UpdateCount
    
"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)
	BEGIN
		INSERT INTO dbo.ETLBatchControl (TableName) VALUES (?)
	END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.PersonBN);

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));

SELECT @LastProcessedDate AS LastProcessedDate;

"
TRUNCATE TABLE dbo.AssignmentB1
"DELETE p
FROM dbo.AssignmentBN p 
JOIN (SELECT *
FROM HR_Landing.dbo.AssignmentB1 vpbn
WHERE EXISTS
(
    SELECT 1
    FROM dbo.AssignmentBN pbn
    WHERE pbn.AssignmentID = vpbn.AssignmentID
 AND pbn.EffectiveStartDate = vpbn.EffectiveStartDate
    AND pbn.BaseEffectiveDate = vpbn.BaseEffectiveDate
)
)A ON p.AssignmentID = a.AssignmentID AND p.EffectiveStartDate = a.EffectiveStartDate AND p.BaseEffectiveDate = a.BaseEffectiveDate

SELECT @@ROWCOUNT AS DeleteCount ;"
"DELETE pbn
FROM dbo.AssignmentBN pbn
WHERE NOT EXISTS
(
    SELECT 1
    FROM dbo.vAssignmentBN vpbn
    WHERE pbn.AssignmentID = vpbn.AssignmentID
	AND pbn.EffectiveStartDate = vpbn.EffectiveStartDate
    AND pbn.BaseEffectiveDate = vpbn.BaseEffectiveDate
)

SELECT @@ROWCOUNT + ? AS DeleteCount ;"
"WITH Updates AS 
(
SELECT * 
FROM dbo.vAssignmentBN vabn
WHERE EXISTS
(
    SELECT 1
    FROM dbo.AssignmentBN abn
    WHERE abn.AssignmentID = vabn.AssignmentID
	AND abn.EffectiveStartDate = vabn.EffectiveStartDate
    AND abn.BaseEffectiveDate = vabn.BaseEffectiveDate
	AND abn.BaseEndDate = vabn.BaseEndDate
	AND abn.RowHash <> vabn.RowHash
)
)

UPDATE a
SET [AssignmentNumber] = u.AssignmentNumber
,[AssignmentType] = u.AssignmentType	
,[AssignmentStatusType] = u.AssignmentStatusType
,[WorkAtHomeIndicator] = u.WorkAtHomeIndicator
,[NormalWorkingHours] = u.NormalWorkingHours
,[NDQCFlag] = u.NDQCFlag
,[BonusPercent] = u.BonusPercent
,[ChangeReason] = u.ChangeReason
,[AssignmentSubType] = u.AssignmentSubType
,[IVRCode] = u.IVRCode
,[Title] = u.Title
,[ExecutiveAssistant] = u.ExecutiveAssistant
,[CAWaiverIndicator] = u.CAWaiverIndicator
,[EmploymentCategory] = u.EmploymentCategory
,[EmployeePayBasis] = u.EmployeePayBasis
,[SpecialInfoTypeName] = u.SpecialInfoTypeName
,[SecondaryRateStartDate] = u.SecondaryRateStartDate
,[SecondaryRateEndDate] = u.SecondaryRateEndDate
,[SecondaryJobName] = u.SecondaryJobName
,[SecondaryPayRate] = u.SecondaryPayRate
,[SecondaryHoursType] = u.SecondaryHoursType
,[Vendor] = u.Vendor
,[PeopleGroup] = u.PeopleGroup
,[KLCLineOfBusiness] = u.KLCLineOfBusiness
,[KLCPeopleGroup] = u.KLCPeopleGroup
,[KCLOTLLink] = u.KCLOTLLink
,[ProjectedAssignmentEndDate] = u.ProjectedAssignmentEndDate
,[PayGradeID] = u.PayGradeID
,[PositionID] = u.PositionID
,[LocationID] = u.LocationID
,[OrganizationID] = u.OrganizationID
,[EffectiveStartDate] = u.EffectiveStartDate
,[ExpirationDate] = u.ExpirationDate
,[BaseEffectiveDate] = u.BaseEffectiveDate
,[BaseEndDate] = u.BaseEndDate
,[BaseModifiedDate] = GETDATE()
,[UpdateAuditID] = ?
,[RowHash] = u.RowHash
,[SourceUpdateDate] = u.SourceUpdateDate
FROM dbo.AssignmentBN a
JOIN Updates u ON a.AssignmentID = u.AssignmentID AND a.EffectiveStartDate = u.EffectiveStartDate 
		AND a.BaseEffectiveDate = u.BaseEffectiveDate AND a.BaseEndDate = u.BaseEndDate

SELECT @@ROWCOUNT  AS UpdateCount;"
"UPDATE dbo.AssignmentBN 
SET RowStatus = 'H'
, BaseModifiedDate = GETDATE()
, UpdateAuditID = ?
WHERE
 CAST(BaseEndDate AS DATE)< CAST(GETDATE() AS DATE) 
 AND RowStatus <> 'H'

SELECT @@ROWCOUNT + ? AS UpdateCount;"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);
DECLARE @Day VARCHAR(20) = (SELECT DATENAME(WEEKDAY, @FiscalDate ) );

IF @Day = 'Sunday' 
	BEGIN
		SET @BatchSplitByName = 'FiscalWeekDate'
	END
ELSE 
	SET @BatchSplitByName = 'FiscalDate'

EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, ?, ?,@BatchSplitByName, @FiscalDate;
GO"
"DECLARE @FiscalDate DATE = ?
DECLARE @CurrentDate DATE = ?
DECLARE @PreviousWeek DATE = (SELECT DATEADD(week, (DATEDIFF(week,-1,@FiscalDate)),-1));
DECLARE @ReloadDate DATE = (SELECT DATEADD(DAY, -365, @CurrentDate));
DECLARE @DeleteCount INT = ?;
DECLARE @ISOverride BIT = ?

IF @ISOverride = 1
	BEGIN
		DELETE FROM dbo.BaseEmployeeCensusBN WHERE FullDate =  @FiscalDate;

		SET @DeleteCount = (SELECT @@ROWCOUNT );
		SELECT @DeleteCount AS DeleteCount;
	END 
ELSE 
	BEGIN
    
		/* Delete records more than one year */
		
		DELETE FROM dbo.BaseEmployeeCensusBN WHERE FullDate < @ReloadDate;
		
		SET @DeleteCount = (SELECT @@ROWCOUNT);
		
		
		/* Delete previous day record */
		
		IF @FiscalDate = @CurrentDate
			BEGIN 
					IF (EXISTS ( SELECT 1 FROM dbo.BaseEmployeeCensusBN ))
						BEGIN
							DELETE FROM dbo.BaseEmployeeCensusBN WHERE FullDate > @PreviousWeek;
					
							SET @DeleteCount = (SELECT @@ROWCOUNT + @DeleteCount );
						END
			END
		ELSE 
			SET @DeleteCount = (SELECT 0 + @DeleteCount) ;
		
			   	 
		/* Delete if data exists before loading during the reload */
		
		IF (EXISTS ( SELECT 1 FROM dbo.BaseEmployeeCensusBN WHERE FullDate = @FiscalDate))
			BEGIN
				DELETE FROM dbo.BaseEmployeeCensusBN WHERE FullDate =  @FiscalDate;
		
				SET @DeleteCount = (SELECT @@ROWCOUNT + @DeleteCount);
			END
		ELSE 
				SET @DeleteCount = (SELECT 0 + @DeleteCount);
		
		SELECT @DeleteCount AS DeleteCount;
	END"
"EXECUTE [dbo].[spEndAuditLog] ?, ?, ?, ?, ?, ?, ?
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeCensusBN
WHERE InsertAuditID = ?;

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"/* Get Last Fiscal Date processed successfully from AuditLog */

DECLARE @LastProcessedFiscalDate DATE;
DECLARE @FullDate DATE = (SELECT MAX(FullDate) FROM dbo.BaseEmployeeCensusBN(NOLOCK));

WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?) AND IsOverride = 0
      GROUP BY TaskName)

SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT CASE WHEN @FullDate IS NULL THEN ?
		ELSE ISNULL(@LastProcessedFiscalDate, '1900-01-01') 
	   END AS LastProcessedFiscalDate;	 "
"/* Get Last Fiscal Date processed successfully from AuditLog for override only */

DECLARE @BatchOverrideID BIGINT = ?;
DECLARE @NewExecutionID VARCHAR(300) = ?;
DECLARE @ExecutionIDS TABLE (ExecutionID VARCHAR(300));
DECLARE @LastProcessedFiscalDate DATE;

IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID)
BEGIN 
	INSERT INTO dbo.ETLBatchOverrideExecutions (BatchOverrideID, ExecutionID) VALUES(@BatchOverrideID, @NewExecutionID )
END 
ELSE
	INSERT INTO @ExecutionIDS 
SELECT COALESCE(ExecutionID, '' )ExecutionID FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID;

WITH LatestJobAuditByTaskName AS (
SELECT TaskName, MAX(AuditId) AS LatestJobAudit
FROM dbo.AuditLog (NOLOCK)a
JOIN @ExecutionIDS e ON a.ExecutionID = e.ExecutionID
WHERE (StatusCode = 1) AND (TaskName = ?) AND IsOverride = 1 
      GROUP BY TaskName)



SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT ISNULL(@LastProcessedFiscalDate, '1900-01-01') AS LastProcessedFiscalDate
"
"DECLARE @StartDate DATE = (SELECT CASE WHEN FullDate > FiscalWeekStartDate THEN DATEADD(DAY, 7, FiscalWeekStartDate)
									   ELSE FiscalWeekStartDate 
								  END AS FiscalWeekStartDate
						   FROM dbo.DimDate WHERE FullDate = ?)
DECLARE @CurrentDate DATE = CAST(? AS DATE);
DECLARE @LastProcessedFiscalDate DATE = CAST(NULLIF(?, '1900-01-01') AS DATE);


IF (@LastProcessedFiscalDate IS NULL) 
	BEGIN
		SELECT DISTINCT FiscalWeekStartDate
		FROM dbo.DimDate
		WHERE FiscalWeekStartDate BETWEEN  @StartDate AND @CurrentDate
		UNION 
		SELECT @CurrentDate AS FiscalWeekStartDate
		ORDER BY FiscalWeekStartDate

	END
ELSE 
	BEGIN
		SELECT DISTINCT FiscalWeekStartDate
		FROM dbo.DimDate
		WHERE (FiscalWeekStartDate BETWEEN  @StartDate AND @CurrentDate)
		AND FiscalWeekStartDate > @LastProcessedFiscalDate
		UNION 
		SELECT @CurrentDate AS FiscalWeekStartDate
		ORDER BY FiscalWeekStartDate
	END"
"DECLARE @OverrideStartDate DATE = ?;
DECLARE @OverrideEndDate DATE = ?;
DECLARE @LastProcessedFiscalDate DATE = CAST(NULLIF(?, '1900-01-01') AS DATE); 
DECLARE @CurrentDate DATE = CAST(? AS DATE);
DECLARE @Weekday VARCHAR(15) = (SELECT DATENAME(WEEKDAY, @OverrideEndDate));
DECLARE @FiscalWeekStartDate DATE = (SELECT FiscalWeekStartDate FROM dbo.DimDate WHERE FullDate = @CurrentDate)

IF (@Weekday <> 'Sunday' AND @OverrideEndDate > @FiscalWeekStartDate)
	BEGIN
		IF (@LastProcessedFiscalDate IS NULL)
			BEGIN
				SELECT DISTINCT FiscalWeekStartDate
				FROM dbo.DimDate
				WHERE FiscalWeekStartDate BETWEEN @OverrideStartDate AND @OverrideEndDate
				UNION 
				SELECT @CurrentDate AS FiscalWeekStartDate
				ORDER BY FiscalWeekStartDate
			END
		ELSE 
			BEGIN
				SELECT DISTINCT FiscalWeekStartDate
				FROM dbo.DimDate
				WHERE (FiscalWeekStartDate BETWEEN @OverrideStartDate AND @OverrideEndDate)
				AND FiscalWeekStartDate > @LastProcessedFiscalDate
				UNION 
				SELECT @CurrentDate AS FiscalWeekStartDate
				ORDER BY FiscalWeekStartDate
			END
	END 
ELSE 
	BEGIN
		IF (@LastProcessedFiscalDate IS NULL)
			BEGIN
				SELECT DISTINCT FiscalWeekStartDate
				FROM dbo.DimDate
				WHERE FiscalWeekStartDate BETWEEN @OverrideStartDate AND @OverrideEndDate
			END
		ELSE 
			BEGIN
				SELECT DISTINCT FiscalWeekStartDate
				FROM dbo.DimDate
				WHERE (FiscalWeekStartDate BETWEEN @OverrideStartDate AND @OverrideEndDate)
				AND FiscalWeekStartDate > @LastProcessedFiscalDate
				ORDER BY FiscalWeekStartDate
			END
	END "
"DECLARE @PackageName VARCHAR(MAX) = ?;
DECLARE @CurrentDate DATE = CAST(? AS DATE);
DECLARE @ReloadDate DATE = (SELECT DATEADD(DAY, -365, @CurrentDate));


IF (NOT EXISTS ( SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = @PackageName ))
	BEGIN
		INSERT INTO dbo.ETLBatchControl (TableName, LastProcessedDate) VALUES (@PackageName, @ReloadDate);
	END
ELSE IF (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = @PackageName) = NULL
	BEGIN
		UPDATE dbo.ETLBatchControl
		SET LastProcessedDate = @ReloadDate
		WHERE TableName = @PackageName
	END
ELSE IF (NOT EXISTS (SELECT 1 FROM dbo.BaseEmployeeCensusBN ))
	BEGIN
		UPDATE dbo.ETLBatchControl
		SET LastProcessedDate = @ReloadDate
		WHERE TableName = @PackageName
	END

SELECT CAST(LastProcessedDate AS DATE) AS LoadStartDate 
FROM dbo.ETLBatchControl WHERE TableName = @PackageName;
	 "
"DECLARE @OverrideStartDate DATE;
DECLARE @OverrideEndDate DATE;
DECLARE @BatchOverrideID BIGINT;
DECLARE @IsOverride BIT;
DECLARE @PackageName VARCHAR(50) = ?;

IF EXISTS
(
    SELECT 1
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
)
BEGIN
    SELECT TOP 1
           @BatchOverrideID = BatchOverrideID,
           @OverrideStartDate = OverrideStartDate,
           @OverrideEndDate = OverrideEndDate
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
    ORDER BY CreatedDate DESC;
    SET @IsOverride = 1;
END;
ELSE
BEGIN
    SET @OverrideStartDate =
    (
        SELECT LastProcessedDate
        FROM dbo.ETLBatchControl
        WHERE TableName = @PackageName
    );
    SET @OverrideEndDate = GETDATE();
    SET @IsOverride = 0;
END;
SELECT @BatchOverrideID AS BatchOverrideID,
       @OverrideStartDate AS OverrideStartDate,
       @OverrideEndDate AS OverrideEndDate,
       @IsOverride AS IsOverride;
"
"SELECT SUM(SourceCount) AS SourceCount, SUM(InsertCount) AS InsertCount, SUM(UpdateCount) AS UpdateCount, SUM(DeleteCount) AS DeleteCount, SUM(RejectCount) AS RejectCount
FROM dbo.AuditLog(NOLOCK)
WHERE ExecutionID = ?"
"UPDATE dbo.ETLBatchControl
SET LastProcessedDate = ?
, Status = 'Success'
WHERE TableName = ?;"
"DECLARE @FiscalUpdateDate DATE = ?

    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalUpdateDate  and EventName='Anniversary';
  
    SELECT @@ROWCOUNT AS DeleteCount ;"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeAnniversaryEventUpdates', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN where Eventname='Anniversary'
 and Fulldate= ?;

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"DECLARE @FiscalDate DATE = ?
DECLARE @CurrentDate DATE = ?

DECLARE @DeleteCount INT = ?;
DECLARE @ISOverride BIT = ?

IF @ISOverride = 1
 BEGIN
  DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate and EventName='Anniversary';

  SET @DeleteCount = (SELECT @@ROWCOUNT );
  SELECT @DeleteCount AS DeleteCount;
 END 
ELSE 
 BEGIN
    
  
        
  /* Delete if data exists before loading during the reload */
  
  IF (EXISTS ( SELECT 1 FROM dbo.BaseEmployeeEventBN WHERE FullDate = @FiscalDate and EventName='Anniversary'))
   BEGIN
    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate  and EventName='Anniversary';
  
    SET @DeleteCount = (SELECT @@ROWCOUNT);
   END
  ELSE 
    
  SET @DeleteCount = (SELECT @@ROWCOUNT);
  SELECT @DeleteCount AS DeleteCount;
 END"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeAnniversaryEvent', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN
WHERE InsertAuditID = ? AND EventName='Anniversary';

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"With 
PersonID
AS 
(
select person_id from  hr_base..PER_PERIODS_OF_SERVICE_B0History with (nolock) 
 WHERE  CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time')))=CAST(? as date)  and  adjusted_svc_date is not null
),
OldDates
AS
(
select left((FullDate),4) [Year],right((FullDate),5)[Month],personid
from hr_base..BaseEmployeeEventBN with (nolock) 
where EventName='Anniversary'
 and personid in 
 (select person_id from  PersonID)

),

NewDates
AS
(
select left((b.FullDate),4) [Year],right((p.adjusted_svc_date),5)[Month],personid
from hr_base..BaseEmployeeEventBN b with (nolock)  join 
hr_base..PER_PERIODS_OF_SERVICE_B0 p with (nolock) on  b.PersonID=p.person_id
where EventName='Anniversary'
 and personid in 
 (select person_id from  PersonID)
 )
select cast([year]+'-'+[Month] as date)  FullUpdateDate from OldDates  where [year] is not null and [Month] is not null  AND [Month]<>'02-29' AND  [Year]>=format(GETDATE(), 'yyyy')-7
Union
select cast([year]+'-'+[Month]  as date) FullUpdateDate from NewDates  where [year] is not null and [Month] is not null  AND [Month]<>'02-29' AND  [Year]>=format(GETDATE(), 'yyyy')-7"
"/* Get Last Fiscal Date processed successfully from AuditLog */

DECLARE @LastProcessedFiscalDate DATE;
DECLARE @FullDate DATE = (SELECT MAX(FullDate) FROM dbo.BaseEmployeeEventBN(NOLOCK) WHERE EventName='Anniversary');

WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeAnniversaryEvent') AND IsOverride = 0
      GROUP BY TaskName)

SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT CASE WHEN @FullDate IS NULL THEN ?
  ELSE ISNULL(@LastProcessedFiscalDate, '1900-01-01') 
    END AS LastProcessedFiscalDate;  "
"/* Get Last Fiscal Date processed successfully from AuditLog for override only */

DECLARE @BatchOverrideID BIGINT = ?;
DECLARE @NewExecutionID VARCHAR(300) = ?;
DECLARE @ExecutionIDS TABLE (ExecutionID VARCHAR(300));
DECLARE @LastProcessedFiscalDate DATE;

IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID)
BEGIN 
 INSERT INTO dbo.ETLBatchOverrideExecutions (BatchOverrideID, ExecutionID) VALUES(@BatchOverrideID, @NewExecutionID )
END 
ELSE
 INSERT INTO @ExecutionIDS 
SELECT COALESCE(ExecutionID, '' )ExecutionID FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID;

WITH LatestJobAuditByTaskName AS (
SELECT TaskName, MAX(AuditId) AS LatestJobAudit
FROM dbo.AuditLog (NOLOCK)a
JOIN @ExecutionIDS e ON a.ExecutionID = e.ExecutionID
WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeAnniversaryEvent') AND IsOverride = 1 
      GROUP BY TaskName)



SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT ISNULL(@LastProcessedFiscalDate, '1900-01-01') AS LastProcessedFiscalDate
"
"DECLARE @StartDate DATE = (SELECT CASE WHEN FullDate > FiscalWeekStartDate THEN DATEADD(DAY, 7, FiscalWeekStartDate)
            ELSE FiscalWeekStartDate 
          END AS FiscalWeekStartDate
         FROM dbo.DimDate WHERE FullDate = ?)
DECLARE @CurrentDate DATE = CAST(? AS DATE);
DECLARE @LastProcessedFiscalDate DATE = CAST(NULLIF(?, '1900-01-01') AS DATE);


IF (@LastProcessedFiscalDate IS NULL) 
 BEGIN
  SELECT DISTINCT FullDate
  FROM dbo.DimDate
  WHERE FullDate BETWEEN  @StartDate AND @CurrentDate
  UNION 
  SELECT @CurrentDate AS FullDate
  ORDER BY FullDate

 END
ELSE 
 BEGIN
  SELECT DISTINCT FullDate
  FROM dbo.DimDate
  WHERE (FullDate BETWEEN  @StartDate AND @CurrentDate)
  AND FullDate > @LastProcessedFiscalDate
  UNION 
  SELECT @CurrentDate AS FullDate
  ORDER BY FullDate
 END"
"DECLARE @OverrideStartDate DATE = ?;
DECLARE @OverrideEndDate DATE = ?;
DECLARE @LastProcessedFiscalDate DATE = CAST(NULLIF(?, '1900-01-01') AS DATE); 
DECLARE @CurrentDate DATE = CAST(? AS DATE);
DECLARE @Weekday VARCHAR(15) = (SELECT DATENAME(WEEKDAY, @OverrideEndDate));
DECLARE @FiscalWeekStartDate DATE = (SELECT FiscalWeekStartDate FROM dbo.DimDate WHERE FullDate = @CurrentDate)

IF (@Weekday <> 'Sunday' AND @OverrideEndDate > @FiscalWeekStartDate)
 BEGIN
  IF (@LastProcessedFiscalDate IS NULL)
   BEGIN
    SELECT DISTINCT FullDate 
    FROM dbo.DimDate
    WHERE FullDate  BETWEEN @OverrideStartDate AND @OverrideEndDate
    UNION 
    SELECT @CurrentDate AS FullDate 
    ORDER BY FullDate 
   END
  ELSE 
   BEGIN
    SELECT DISTINCT FullDate 
    FROM dbo.DimDate
    WHERE (FullDate  BETWEEN @OverrideStartDate AND @OverrideEndDate)
    AND FullDate > @LastProcessedFiscalDate
    UNION 
    SELECT @CurrentDate AS FullDate 
    ORDER BY FullDate 
   END
 END 
ELSE 
 BEGIN
  IF (@LastProcessedFiscalDate IS NULL)
   BEGIN
    SELECT DISTINCT FullDate 
    FROM dbo.DimDate
    WHERE FullDate BETWEEN @OverrideStartDate AND @OverrideEndDate
   END
  ELSE 
   BEGIN
    SELECT DISTINCT FullDate 
    FROM dbo.DimDate
    WHERE (FullDate  BETWEEN @OverrideStartDate AND @OverrideEndDate)
    AND FullDate > @LastProcessedFiscalDate
    ORDER BY FullDate 
   END
 END "
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeAnniversaryEventBN')
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName,LastProcessedDate) VALUES ('BaseEmployeeAnniversaryEventBN',?)
 END


DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeAnniversaryEventBN');
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.BaseEmployeeEventBN where eventname='Anniversary') ;

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = ?;

SELECT @LastProcessedDate AS LoadStartDate;"
"DECLARE @OverrideStartDate DATE;
DECLARE @OverrideEndDate DATE;
DECLARE @BatchOverrideID BIGINT;
DECLARE @IsOverride BIT;
DECLARE @PackageName VARCHAR(50) = 'BaseEmployeeAnniversaryEventBN';

IF EXISTS
(
    SELECT 1
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
)
BEGIN
    SELECT TOP 1
           @BatchOverrideID = BatchOverrideID,
           @OverrideStartDate = OverrideStartDate,
           @OverrideEndDate = OverrideEndDate
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
    ORDER BY CreatedDate DESC;
    SET @IsOverride = 1;
END;
ELSE
BEGIN
    SET @OverrideStartDate =
    (
        SELECT LastProcessedDate
        FROM dbo.ETLBatchControl
        WHERE TableName = @PackageName
    );
    SET @OverrideEndDate = GETDATE();
    SET @IsOverride = 0;
END;
SELECT @BatchOverrideID AS BatchOverrideID,
       @OverrideStartDate AS OverrideStartDate,
       @OverrideEndDate AS OverrideEndDate,
       @IsOverride AS IsOverride;
"
"UPDATE dbo.ETLBatchOverride
SET IsActive = 0
         , LastProcessedDate = ?
WHERE TaskName = 'BaseEmployeeAnniversaryEventBN'
AND IsActive = 1"
"UPDATE dbo.ETLBatchControl
SET LastProcessedDate = ?
, Status = 'Success'
WHERE TableName = 'BaseEmployeeAnniversaryEventBN';"
"DECLARE @FiscalUpdateDate DATE = ?

    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalUpdateDate  and EventName='Birthday';
  
    SELECT @@ROWCOUNT AS DeleteCount ;"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeBirthdayEventUpdates', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN where Eventname='Birthday'
 and Fulldate= ?;

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"DECLARE @FiscalDate DATE = ?
DECLARE @CurrentDate DATE = ?

DECLARE @DeleteCount INT = ?;
DECLARE @ISOverride BIT = ?

IF @ISOverride = 1
 BEGIN
  DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate and EventName='Birthday';

  SET @DeleteCount = (SELECT @@ROWCOUNT );
  SELECT @DeleteCount AS DeleteCount;
 END 
ELSE 
 BEGIN
    
  
        
  /* Delete if data exists before loading during the reload */
  
  IF (EXISTS ( SELECT 1 FROM dbo.BaseEmployeeEventBN WHERE FullDate = @FiscalDate and EventName='Birthday'))
   BEGIN
    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate  and EventName='Birthday';
  
    SET @DeleteCount = (SELECT @@ROWCOUNT);
   END
  ELSE 
    
  SET @DeleteCount = (SELECT @@ROWCOUNT);
  SELECT @DeleteCount AS DeleteCount;
 END"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeBirthdayEvent', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN
WHERE InsertAuditID = ? AND EventName='Birthday';

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"With 
PersonID
AS 
(
select person_id from  hr_base..PER_ALL_PEOPLE_F_B0History with (nolock) 
 WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time')))=CAST(? as date)  and  date_of_birth is not null
),
OldDates
AS
(
select left((FullDate),4) [Year],right((FullDate),5)[Month],personid
from hr_base..BaseEmployeeEventBN with (nolock)  
where EventName='Birthday'
 and personid in 
 (select person_id from  PersonID)

),

NewDates
AS
(
select left((b.FullDate),4) [Year],right((p.date_of_birth),5)[Month],personid
from hr_base..BaseEmployeeEventBN b with (nolock) join 
hr_base..PER_ALL_PEOPLE_F_B0 p with (nolock) on  b.PersonID=p.person_id
where EventName='Birthday'
 and personid in 
 (select person_id from  PersonID)
 )
select cast([year]+'-'+[Month] as date)  FullUpdateDate from OldDates  where [year] is not null and [Month] is not null   AND [Month]<>'02-29'  AND  [Year]>=format(GETDATE(), 'yyyy')-7
Union
select cast([year]+'-'+[Month]  as date) FullUpdateDate from NewDates  where [year] is not null and [Month] is not null  AND [Month]<>'02-29'  AND  [Year]>=format(GETDATE(), 'yyyy')-7"
"/* Get Last Fiscal Date processed successfully from AuditLog */

DECLARE @LastProcessedFiscalDate DATE;
DECLARE @FullDate DATE = (SELECT MAX(FullDate) FROM dbo.BaseEmployeeEventBN(NOLOCK) WHERE EventName='Birthday');

WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeBirthdayEvent') AND IsOverride = 0
      GROUP BY TaskName)

SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT CASE WHEN @FullDate IS NULL THEN ?
  ELSE ISNULL(@LastProcessedFiscalDate, '1900-01-01') 
    END AS LastProcessedFiscalDate;  "
"/* Get Last Fiscal Date processed successfully from AuditLog for override only */

DECLARE @BatchOverrideID BIGINT = ?;
DECLARE @NewExecutionID VARCHAR(300) = ?;
DECLARE @ExecutionIDS TABLE (ExecutionID VARCHAR(300));
DECLARE @LastProcessedFiscalDate DATE;

IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID)
BEGIN 
 INSERT INTO dbo.ETLBatchOverrideExecutions (BatchOverrideID, ExecutionID) VALUES(@BatchOverrideID, @NewExecutionID )
END 
ELSE
 INSERT INTO @ExecutionIDS 
SELECT COALESCE(ExecutionID, '' )ExecutionID FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID;

WITH LatestJobAuditByTaskName AS (
SELECT TaskName, MAX(AuditId) AS LatestJobAudit
FROM dbo.AuditLog (NOLOCK)a
JOIN @ExecutionIDS e ON a.ExecutionID = e.ExecutionID
WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeBirthdayEventBN') AND IsOverride = 1 
      GROUP BY TaskName)



SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT ISNULL(@LastProcessedFiscalDate, '1900-01-01') AS LastProcessedFiscalDate
"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeBirthdayEventBN')
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName,LastProcessedDate) VALUES ('BaseEmployeeBirthdayEventBN',?)
 END


DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeBirthdayEventBN');
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.BaseEmployeeEventBN where eventname='Birthday') ;

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = ?;

SELECT @LastProcessedDate AS LoadStartDate;"
"DECLARE @OverrideStartDate DATE;
DECLARE @OverrideEndDate DATE;
DECLARE @BatchOverrideID BIGINT;
DECLARE @IsOverride BIT;
DECLARE @PackageName VARCHAR(50) = 'BaseEmployeeBirthdayEventBN';

IF EXISTS
(
    SELECT 1
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
)
BEGIN
    SELECT TOP 1
           @BatchOverrideID = BatchOverrideID,
           @OverrideStartDate = OverrideStartDate,
           @OverrideEndDate = OverrideEndDate
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
    ORDER BY CreatedDate DESC;
    SET @IsOverride = 1;
END;
ELSE
BEGIN
    SET @OverrideStartDate =
    (
        SELECT LastProcessedDate
        FROM dbo.ETLBatchControl
        WHERE TableName = @PackageName
    );
    SET @OverrideEndDate = GETDATE();
    SET @IsOverride = 0;
END;
SELECT @BatchOverrideID AS BatchOverrideID,
       @OverrideStartDate AS OverrideStartDate,
       @OverrideEndDate AS OverrideEndDate,
       @IsOverride AS IsOverride;
"
"UPDATE dbo.ETLBatchOverride
SET IsActive = 0
         , LastProcessedDate = ?
WHERE TaskName = 'BaseEmployeeBirthdayEventBN'
AND IsActive = 1"
"UPDATE dbo.ETLBatchControl
SET LastProcessedDate = ?
, Status = 'Success'
WHERE TableName = 'BaseEmployeeBirthdayEventBN';"
"DECLARE @FiscalUpdateDate DATE = ?

    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalUpdateDate  and EventName='Hire';
  
    SELECT @@ROWCOUNT AS DeleteCount ;"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeHireEventUpdates', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN where Eventname='Hire'
 and Fulldate= ?;

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"DECLARE @FiscalDate DATE = ?
DECLARE @CurrentDate DATE = ?

DECLARE @DeleteCount INT = ?;
DECLARE @ISOverride BIT = ?

IF @ISOverride = 1
 BEGIN
  DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate and EventName='Hire';

  SET @DeleteCount = (SELECT @@ROWCOUNT );
  SELECT @DeleteCount AS DeleteCount;
 END 
ELSE 
 BEGIN
    
  
        
  /* Delete if data exists before loading during the reload */
  
  IF (EXISTS ( SELECT 1 FROM dbo.BaseEmployeeEventBN WHERE FullDate = @FiscalDate and EventName='Hire'))
   BEGIN
    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate  and EventName='Hire';
  
    SET @DeleteCount = (SELECT @@ROWCOUNT);
   END
  ELSE 
    
  SET @DeleteCount = (SELECT @@ROWCOUNT);
  SELECT @DeleteCount AS DeleteCount;
 END"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeHireEvent', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN
WHERE InsertAuditID = ? AND EventName='Hire';

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"SELECT DISTINCT  date_start  FROM  HR_Base.dbo.PER_PERIODS_OF_SERVICE_B0 s with (nolock)
JOIN HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0 a with (nolock) ON s.period_of_service_id = a.period_of_service_id 
WHERE s.person_id IN (
SELECT DISTINCT s.person_id  FROM  HR_Base.dbo.PER_PERIODS_OF_SERVICE_B0History s with (nolock)
JOIN HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History a with (nolock) on s.period_of_service_id=a.period_of_service_id 
WHERE CONVERT(date, SWITCHOFFSET(s.BaseUTCEndDate, DATEPART(TZOFFSET, 
s.BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time')))=CAST(? AS DATE)
 AND  date_start IS NOT NULL AND assignment_number  NOT  LIKE '%-%'   AND date_start>=DATEADD(YEAR,-7,format(GETDATE(),'yyyy')))
AND  date_start IS NOT NULL AND assignment_number NOT  LIKE '%-%' AND date_start>=DATEADD(YEAR,-7,format(GETDATE(),'yyyy'))
UNION
SELECT DISTINCT date_start FROM  HR_Base.dbo.PER_PERIODS_OF_SERVICE_B0History s with (nolock) 
JOIN HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History a with (nolock) on s.period_of_service_id=a.period_of_service_id
 WHERE CONVERT(date, SWITCHOFFSET(s.BaseUTCEndDate, DATEPART(TZOFFSET, 
s.BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time')))=CAST(? AS DATE) 
 AND  date_start IS NOT NULL AND assignment_number  NOT  LIKE '%-%' AND date_start>=DATEADD(YEAR,-7,format(GETDATE(),'yyyy'))
 UNION
 select distinct DateStart From PerPeriodsB10 with (nolock) where ActualTerminationDate is null and  PersonID in (
select PersonID From PerPeriodsB10
except 
select PersonID from BaseEmployeeEventBN with (nolock) )"
"/* Get Last Fiscal Date processed successfully from AuditLog */

DECLARE @LastProcessedFiscalDate DATE;
DECLARE @FullDate DATE = (SELECT MAX(FullDate) FROM dbo.BaseEmployeeEventBN(NOLOCK) WHERE EventName='Hire');

WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeHireEvent') AND IsOverride = 0
      GROUP BY TaskName)

SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT CASE WHEN @FullDate IS NULL THEN ?
  ELSE ISNULL(@LastProcessedFiscalDate, '1900-01-01') 
    END AS LastProcessedFiscalDate;  "
"/* Get Last Fiscal Date processed successfully from AuditLog for override only */

DECLARE @BatchOverrideID BIGINT = ?;
DECLARE @NewExecutionID VARCHAR(300) = ?;
DECLARE @ExecutionIDS TABLE (ExecutionID VARCHAR(300));
DECLARE @LastProcessedFiscalDate DATE;

IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID)
BEGIN 
 INSERT INTO dbo.ETLBatchOverrideExecutions (BatchOverrideID, ExecutionID) VALUES(@BatchOverrideID, @NewExecutionID )
END 
ELSE
 INSERT INTO @ExecutionIDS 
SELECT COALESCE(ExecutionID, '' )ExecutionID FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID;

WITH LatestJobAuditByTaskName AS (
SELECT TaskName, MAX(AuditId) AS LatestJobAudit
FROM dbo.AuditLog (NOLOCK)a
JOIN @ExecutionIDS e ON a.ExecutionID = e.ExecutionID
WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeHireEventBN') AND IsOverride = 1 
      GROUP BY TaskName)



SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT ISNULL(@LastProcessedFiscalDate, '1900-01-01') AS LastProcessedFiscalDate
"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeHireEventBN')
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName,LastProcessedDate) VALUES ('BaseEmployeeHireEventBN',?)
 END


DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeHireEventBN');
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.BaseEmployeeEventBN where eventname='Hire') ;

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = ?;

SELECT @LastProcessedDate AS LoadStartDate;"
"DECLARE @OverrideStartDate DATE;
DECLARE @OverrideEndDate DATE;
DECLARE @BatchOverrideID BIGINT;
DECLARE @IsOverride BIT;
DECLARE @PackageName VARCHAR(50) = 'BaseEmployeeHireEventBN';

IF EXISTS
(
    SELECT 1
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
)
BEGIN
    SELECT TOP 1
           @BatchOverrideID = BatchOverrideID,
           @OverrideStartDate = OverrideStartDate,
           @OverrideEndDate = OverrideEndDate
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
    ORDER BY CreatedDate DESC;
    SET @IsOverride = 1;
END;
ELSE
BEGIN
    SET @OverrideStartDate =
    (
        SELECT LastProcessedDate
        FROM dbo.ETLBatchControl
        WHERE TableName = @PackageName
    );
    SET @OverrideEndDate = GETDATE();
    SET @IsOverride = 0;
END;
SELECT @BatchOverrideID AS BatchOverrideID,
       @OverrideStartDate AS OverrideStartDate,
       @OverrideEndDate AS OverrideEndDate,
       @IsOverride AS IsOverride;
"
"UPDATE dbo.ETLBatchOverride
SET IsActive = 0
         , LastProcessedDate = ?
WHERE TaskName = 'BaseEmployeeHireEventBN'
AND IsActive = 1"
"UPDATE dbo.ETLBatchControl
SET LastProcessedDate = ?
, Status = 'Success'
WHERE TableName = 'BaseEmployeeHireEventBN';"
"DECLARE @FiscalUpdateDate DATE = ?

    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalUpdateDate  and EventName='Job Change';
  
    SELECT @@ROWCOUNT AS DeleteCount ;"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeJobChangeEventUpdates', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN where Eventname='Job Change'
 and Fulldate= ?;

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"DECLARE @FiscalDate DATE = ?
DECLARE @CurrentDate DATE = ?

DECLARE @DeleteCount INT = ?;
DECLARE @ISOverride BIT = ?

IF @ISOverride = 1
 BEGIN
  DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate and EventName='Job Change';

  SET @DeleteCount = (SELECT @@ROWCOUNT );
  SELECT @DeleteCount AS DeleteCount;
 END 
ELSE 
 BEGIN
    
  
        
  /* Delete if data exists before loading during the reload */
  
  IF (EXISTS ( SELECT 1 FROM dbo.BaseEmployeeEventBN WHERE FullDate = @FiscalDate and EventName='Job Change'))
   BEGIN
    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate  and EventName='Job Change';
  
    SET @DeleteCount = (SELECT @@ROWCOUNT);
   END
  ELSE 
    
  SET @DeleteCount = (SELECT @@ROWCOUNT);
  SELECT @DeleteCount AS DeleteCount;
 END"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeJobChangeEvent', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN
WHERE InsertAuditID = ? AND EventName='Job Change';

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"SELECT distinct  effective_start_date  FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0 with (nolock) WHERE job_id in (
SELECT DISTINCT job_id FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History with (nolock)
WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time'))) =CAST(?  as date) ) 
and person_id in (SELECT DISTINCT person_id FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History with (nolock) 
 WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time'))) =CAST(?  as date))
and effective_end_date in(SELECT DISTINCT effective_end_date FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History with (nolock) 
 WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time'))) =CAST(? as date))
UNION
SELECT DISTINCT effective_start_date FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History with (nolock)
WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time'))) =CAST(?  as date) and  effective_start_date is not null
"
"/* Get Last Fiscal Date processed successfully from AuditLog */

DECLARE @LastProcessedFiscalDate DATE;
DECLARE @FullDate DATE = (SELECT MAX(FullDate) FROM dbo.BaseEmployeeEventBN(NOLOCK) WHERE EventName='Job Change');

WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeJobChangeEvent') AND IsOverride = 0
      GROUP BY TaskName)

SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT CASE WHEN @FullDate IS NULL THEN ?
  ELSE ISNULL(@LastProcessedFiscalDate, '1900-01-01') 
    END AS LastProcessedFiscalDate;  "
"/* Get Last Fiscal Date processed successfully from AuditLog for override only */

DECLARE @BatchOverrideID BIGINT = ?;
DECLARE @NewExecutionID VARCHAR(300) = ?;
DECLARE @ExecutionIDS TABLE (ExecutionID VARCHAR(300));
DECLARE @LastProcessedFiscalDate DATE;

IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID)
BEGIN 
 INSERT INTO dbo.ETLBatchOverrideExecutions (BatchOverrideID, ExecutionID) VALUES(@BatchOverrideID, @NewExecutionID )
END 
ELSE
 INSERT INTO @ExecutionIDS 
SELECT COALESCE(ExecutionID, '' )ExecutionID FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID;

WITH LatestJobAuditByTaskName AS (
SELECT TaskName, MAX(AuditId) AS LatestJobAudit
FROM dbo.AuditLog (NOLOCK)a
JOIN @ExecutionIDS e ON a.ExecutionID = e.ExecutionID
WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeJobChangeEventBN') AND IsOverride = 1 
      GROUP BY TaskName)



SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT ISNULL(@LastProcessedFiscalDate, '1900-01-01') AS LastProcessedFiscalDate
"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeJobChangeEventBN')
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName,LastProcessedDate) VALUES ('BaseEmployeeJobChangeEventBN',?)
 END


DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeJobChangeEventBN');
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.BaseEmployeeEventBN where eventname='Job Change') ;

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = ?;

SELECT @LastProcessedDate AS LoadStartDate;"
"DECLARE @OverrideStartDate DATE;
DECLARE @OverrideEndDate DATE;
DECLARE @BatchOverrideID BIGINT;
DECLARE @IsOverride BIT;
DECLARE @PackageName VARCHAR(50) = 'BaseEmployeeJobChangeEventBN';

IF EXISTS
(
    SELECT 1
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
)
BEGIN
    SELECT TOP 1
           @BatchOverrideID = BatchOverrideID,
           @OverrideStartDate = OverrideStartDate,
           @OverrideEndDate = OverrideEndDate
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
    ORDER BY CreatedDate DESC;
    SET @IsOverride = 1;
END;
ELSE
BEGIN
    SET @OverrideStartDate =
    (
        SELECT LastProcessedDate
        FROM dbo.ETLBatchControl
        WHERE TableName = @PackageName
    );
    SET @OverrideEndDate = GETDATE();
    SET @IsOverride = 0;
END;
SELECT @BatchOverrideID AS BatchOverrideID,
       @OverrideStartDate AS OverrideStartDate,
       @OverrideEndDate AS OverrideEndDate,
       @IsOverride AS IsOverride;
"
"UPDATE dbo.ETLBatchOverride
SET IsActive = 0
         , LastProcessedDate = ?
WHERE TaskName = 'BaseEmployeeJobChangeEventBN'
AND IsActive = 1"
"UPDATE dbo.ETLBatchControl
SET LastProcessedDate = ?
, Status = 'Success'
WHERE TableName = 'BaseEmployeeJobChangeEventBN';"
"DECLARE @FiscalUpdateDate DATE = ?

    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalUpdateDate  and EventName='Organization Change';
  
    SELECT @@ROWCOUNT AS DeleteCount ;"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeOrgnChangeEventUpdates', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN where Eventname='Organization Change'
 and Fulldate= ?;

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"DECLARE @FiscalDate DATE = ?
DECLARE @CurrentDate DATE = ?

DECLARE @DeleteCount INT = ?;
DECLARE @ISOverride BIT = ?

IF @ISOverride = 1
 BEGIN
  DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate and EventName='Organization Change';

  SET @DeleteCount = (SELECT @@ROWCOUNT );
  SELECT @DeleteCount AS DeleteCount;
 END 
ELSE 
 BEGIN
    
  
        
  /* Delete if data exists before loading during the reload */
  
  IF (EXISTS ( SELECT 1 FROM dbo.BaseEmployeeEventBN WHERE FullDate = @FiscalDate and EventName='Organization Change'))
   BEGIN
    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate  and EventName='Organization Change';
  
    SET @DeleteCount = (SELECT @@ROWCOUNT);
   END
  ELSE 
    
  SET @DeleteCount = (SELECT @@ROWCOUNT);
  SELECT @DeleteCount AS DeleteCount;
 END"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeOrgChangeEvent', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN
WHERE InsertAuditID = ? AND EventName='Organization Change';

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"SELECT distinct  effective_start_date  FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0 with (nolock) WHERE organization_id in (
SELECT DISTINCT organization_id FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History with (nolock) 
WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time'))) =CAST(? as date) ) 
and person_id in (SELECT DISTINCT person_id FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History with (nolock)
 WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time'))) =CAST(?  as date))
and effective_end_date in(SELECT DISTINCT effective_end_date FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History with (nolock)
 WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time'))) =CAST(? as date))
UNION
SELECT DISTINCT effective_start_date FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History with (nolock) 
WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time'))) =CAST(?  as date) and  effective_start_date is not null
"
"/* Get Last Fiscal Date processed successfully from AuditLog */

DECLARE @LastProcessedFiscalDate DATE;
DECLARE @FullDate DATE = (SELECT MAX(FullDate) FROM dbo.BaseEmployeeEventBN(NOLOCK) WHERE EventName='Organization Change');

WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeOrgChangeEvent') AND IsOverride = 0
      GROUP BY TaskName)

SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT CASE WHEN @FullDate IS NULL THEN ?
  ELSE ISNULL(@LastProcessedFiscalDate, '1900-01-01') 
    END AS LastProcessedFiscalDate;  "
"/* Get Last Fiscal Date processed successfully from AuditLog for override only */

DECLARE @BatchOverrideID BIGINT = ?;
DECLARE @NewExecutionID VARCHAR(300) = ?;
DECLARE @ExecutionIDS TABLE (ExecutionID VARCHAR(300));
DECLARE @LastProcessedFiscalDate DATE;

IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID)
BEGIN 
 INSERT INTO dbo.ETLBatchOverrideExecutions (BatchOverrideID, ExecutionID) VALUES(@BatchOverrideID, @NewExecutionID )
END 
ELSE
 INSERT INTO @ExecutionIDS 
SELECT COALESCE(ExecutionID, '' )ExecutionID FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID;

WITH LatestJobAuditByTaskName AS (
SELECT TaskName, MAX(AuditId) AS LatestJobAudit
FROM dbo.AuditLog (NOLOCK)a
JOIN @ExecutionIDS e ON a.ExecutionID = e.ExecutionID
WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeOrgChangeEventBN') AND IsOverride = 1 
      GROUP BY TaskName)



SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT ISNULL(@LastProcessedFiscalDate, '1900-01-01') AS LastProcessedFiscalDate
"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeOrgChangeEventBN')
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName,LastProcessedDate) VALUES ('BaseEmployeeOrgChangeEventBN',?)
 END


DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeOrgChangeEventBN');
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.BaseEmployeeEventBN where eventname='Organization Change') ;

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = ?;

SELECT @LastProcessedDate AS LoadStartDate;"
"DECLARE @OverrideStartDate DATE;
DECLARE @OverrideEndDate DATE;
DECLARE @BatchOverrideID BIGINT;
DECLARE @IsOverride BIT;
DECLARE @PackageName VARCHAR(50) = 'BaseEmployeeOrgChangeEventBN';

IF EXISTS
(
    SELECT 1
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
)
BEGIN
    SELECT TOP 1
           @BatchOverrideID = BatchOverrideID,
           @OverrideStartDate = OverrideStartDate,
           @OverrideEndDate = OverrideEndDate
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
    ORDER BY CreatedDate DESC;
    SET @IsOverride = 1;
END;
ELSE
BEGIN
    SET @OverrideStartDate =
    (
        SELECT LastProcessedDate
        FROM dbo.ETLBatchControl
        WHERE TableName = @PackageName
    );
    SET @OverrideEndDate = GETDATE();
    SET @IsOverride = 0;
END;
SELECT @BatchOverrideID AS BatchOverrideID,
       @OverrideStartDate AS OverrideStartDate,
       @OverrideEndDate AS OverrideEndDate,
       @IsOverride AS IsOverride;
"
"UPDATE dbo.ETLBatchOverride
SET IsActive = 0
         , LastProcessedDate = ?
WHERE TaskName = 'BaseEmployeeOrgChangeEventBN'
AND IsActive = 1"
"UPDATE dbo.ETLBatchControl
SET LastProcessedDate = ?
, Status = 'Success'
WHERE TableName = 'BaseEmployeeOrgChangeEventBN';"
"DECLARE @FiscalUpdateDate DATE = ?

    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalUpdateDate  and EventName='Position Change';
  
    SELECT @@ROWCOUNT AS DeleteCount ;"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeePositionChangeEventUpdates', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN where Eventname='Position Change'
 and Fulldate= ?;

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"DECLARE @FiscalDate DATE = ?
DECLARE @CurrentDate DATE = ?

DECLARE @DeleteCount INT = ?;
DECLARE @ISOverride BIT = ?

IF @ISOverride = 1
 BEGIN
  DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate and EventName='Position Change';

  SET @DeleteCount = (SELECT @@ROWCOUNT );
  SELECT @DeleteCount AS DeleteCount;
 END 
ELSE 
 BEGIN
    
  
        
  /* Delete if data exists before loading during the reload */
  
  IF (EXISTS ( SELECT 1 FROM dbo.BaseEmployeeEventBN WHERE FullDate = @FiscalDate and EventName='Position Change'))
   BEGIN
    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate  and EventName='Position Change';
  
    SET @DeleteCount = (SELECT @@ROWCOUNT);
   END
  ELSE 
    
  SET @DeleteCount = (SELECT @@ROWCOUNT);
  SELECT @DeleteCount AS DeleteCount;
 END"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeePositionChangeEvent', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN
WHERE InsertAuditID = ? AND EventName='Position Change';

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"SELECT distinct  effective_start_date  FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0 with (nolock) WHERE position_id in (
SELECT DISTINCT position_id FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History with (nolock) 
WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time'))) =CAST(? as date) ) 
and person_id in (SELECT DISTINCT person_id FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History with (nolock) 
 WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time'))) =CAST(?  as date))
and effective_end_date in(SELECT DISTINCT effective_end_date FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History with (nolock) 
 WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time'))) =CAST(? as date))
UNION
SELECT DISTINCT effective_start_date FROM  HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History with (nolock) 
WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time'))) =CAST(?  as date) and  effective_start_date is not null
"
"/* Get Last Fiscal Date processed successfully from AuditLog */

DECLARE @LastProcessedFiscalDate DATE;
DECLARE @FullDate DATE = (SELECT MAX(FullDate) FROM dbo.BaseEmployeeEventBN(NOLOCK) WHERE EventName='Position Change');

WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeePositionChangeEvent') AND IsOverride = 0
      GROUP BY TaskName)

SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT CASE WHEN @FullDate IS NULL THEN ?
  ELSE ISNULL(@LastProcessedFiscalDate, '1900-01-01') 
    END AS LastProcessedFiscalDate;  "
"/* Get Last Fiscal Date processed successfully from AuditLog for override only */

DECLARE @BatchOverrideID BIGINT = ?;
DECLARE @NewExecutionID VARCHAR(300) = ?;
DECLARE @ExecutionIDS TABLE (ExecutionID VARCHAR(300));
DECLARE @LastProcessedFiscalDate DATE;

IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID)
BEGIN 
 INSERT INTO dbo.ETLBatchOverrideExecutions (BatchOverrideID, ExecutionID) VALUES(@BatchOverrideID, @NewExecutionID )
END 
ELSE
 INSERT INTO @ExecutionIDS 
SELECT COALESCE(ExecutionID, '' )ExecutionID FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID;

WITH LatestJobAuditByTaskName AS (
SELECT TaskName, MAX(AuditId) AS LatestJobAudit
FROM dbo.AuditLog (NOLOCK)a
JOIN @ExecutionIDS e ON a.ExecutionID = e.ExecutionID
WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeePositionChangeEventBN') AND IsOverride = 1 
      GROUP BY TaskName)



SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT ISNULL(@LastProcessedFiscalDate, '1900-01-01') AS LastProcessedFiscalDate
"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeePositionChangeEventBN')
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName,LastProcessedDate) VALUES ('BaseEmployeePositionChangeEventBN',?)
 END


DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeePositionChangeEventBN');
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.BaseEmployeeEventBN where eventname='Position Change') ;

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = ?;

SELECT @LastProcessedDate AS LoadStartDate;"
"DECLARE @OverrideStartDate DATE;
DECLARE @OverrideEndDate DATE;
DECLARE @BatchOverrideID BIGINT;
DECLARE @IsOverride BIT;
DECLARE @PackageName VARCHAR(50) = 'BaseEmployeePositionChangeEventBN';

IF EXISTS
(
    SELECT 1
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
)
BEGIN
    SELECT TOP 1
           @BatchOverrideID = BatchOverrideID,
           @OverrideStartDate = OverrideStartDate,
           @OverrideEndDate = OverrideEndDate
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
    ORDER BY CreatedDate DESC;
    SET @IsOverride = 1;
END;
ELSE
BEGIN
    SET @OverrideStartDate =
    (
        SELECT LastProcessedDate
        FROM dbo.ETLBatchControl
        WHERE TableName = @PackageName
    );
    SET @OverrideEndDate = GETDATE();
    SET @IsOverride = 0;
END;
SELECT @BatchOverrideID AS BatchOverrideID,
       @OverrideStartDate AS OverrideStartDate,
       @OverrideEndDate AS OverrideEndDate,
       @IsOverride AS IsOverride;
"
"UPDATE dbo.ETLBatchOverride
SET IsActive = 0
         , LastProcessedDate = ?
WHERE TaskName = 'BaseEmployeePositionChangeEventBN'
AND IsActive = 1"
"UPDATE dbo.ETLBatchControl
SET LastProcessedDate = ?
, Status = 'Success'
WHERE TableName = 'BaseEmployeePositionChangeEventBN';"
"DECLARE @FiscalUpdateDate DATE = ?

    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalUpdateDate  and EventName='Rehire';
  
    SELECT @@ROWCOUNT AS DeleteCount ;"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeRehireEventUpdates', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN where Eventname='Rehire'
 and Fulldate= ?;

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"DECLARE @FiscalDate DATE = ?
DECLARE @CurrentDate DATE = ?

DECLARE @DeleteCount INT = ?;
DECLARE @ISOverride BIT = ?

IF @ISOverride = 1
 BEGIN
  DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate and EventName='Rehire';

  SET @DeleteCount = (SELECT @@ROWCOUNT );
  SELECT @DeleteCount AS DeleteCount;
 END 
ELSE 
 BEGIN
    
  
        
  /* Delete if data exists before loading during the reload */
  
  IF (EXISTS ( SELECT 1 FROM dbo.BaseEmployeeEventBN WHERE FullDate = @FiscalDate and EventName='Rehire'))
   BEGIN
    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate  and EventName='Rehire';
  
    SET @DeleteCount = (SELECT @@ROWCOUNT);
   END
  ELSE 
    
  SET @DeleteCount = (SELECT @@ROWCOUNT);
  SELECT @DeleteCount AS DeleteCount;
 END"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeRehireEvent', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN
WHERE InsertAuditID = ? AND EventName='Rehire';

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"SELECT DISTINCT  date_start  FROM  HR_Base.dbo.PER_PERIODS_OF_SERVICE_B0 s with (nolock) 
JOIN HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0 a with (nolock) ON s.period_of_service_id = a.period_of_service_id 
WHERE s.person_id IN (
SELECT DISTINCT s.person_id  FROM  HR_Base.dbo.PER_PERIODS_OF_SERVICE_B0History s with (nolock) 
JOIN HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History a with (nolock) on s.period_of_service_id=a.period_of_service_id 
WHERE CONVERT(date, SWITCHOFFSET(s.BaseUTCEndDate, DATEPART(TZOFFSET, 
s.BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time')))=CAST(? AS DATE)
 AND  date_start IS NOT NULL AND assignment_number   LIKE '%-%'  AND date_start>=DATEADD(YEAR,-7,format(GETDATE(),'yyyy')))
AND  date_start IS NOT NULL AND assignment_number   LIKE '%-%'  AND date_start>=DATEADD(YEAR,-7,format(GETDATE(),'yyyy'))
UNION
SELECT DISTINCT date_start FROM  HR_Base.dbo.PER_PERIODS_OF_SERVICE_B0History s with (nolock) 
JOIN HR_Base.dbo.PER_ALL_ASSIGNMENTS_F_B0History a with (nolock) on s.period_of_service_id=a.period_of_service_id
 WHERE CONVERT(date, SWITCHOFFSET(s.BaseUTCEndDate, DATEPART(TZOFFSET, 
s.BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time')))=CAST(? AS DATE) 
 AND  date_start IS NOT NULL AND assignment_number  LIKE '%-%'  AND date_start>=DATEADD(YEAR,-7,format(GETDATE(),'yyyy'))
UNION
 select distinct DateStart From PerPeriodsB10 with (nolock) where ActualTerminationDate is null and  PersonID in (
select PersonID From PerPeriodsB10
except 
select PersonID from BaseEmployeeEventBN with (nolock) )
UNION
 select distinct DateStart From PerPeriodsB10 with (nolock) where DateStart>getdate()"
"/* Get Last Fiscal Date processed successfully from AuditLog */

DECLARE @LastProcessedFiscalDate DATE;
DECLARE @FullDate DATE = (SELECT MAX(FullDate) FROM dbo.BaseEmployeeEventBN(NOLOCK) WHERE EventName='Rehire');

WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeRehireEvent') AND IsOverride = 0
      GROUP BY TaskName)

SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT CASE WHEN @FullDate IS NULL THEN ?
  ELSE ISNULL(@LastProcessedFiscalDate, '1900-01-01') 
    END AS LastProcessedFiscalDate;  "
"/* Get Last Fiscal Date processed successfully from AuditLog for override only */

DECLARE @BatchOverrideID BIGINT = ?;
DECLARE @NewExecutionID VARCHAR(300) = ?;
DECLARE @ExecutionIDS TABLE (ExecutionID VARCHAR(300));
DECLARE @LastProcessedFiscalDate DATE;

IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID)
BEGIN 
 INSERT INTO dbo.ETLBatchOverrideExecutions (BatchOverrideID, ExecutionID) VALUES(@BatchOverrideID, @NewExecutionID )
END 
ELSE
 INSERT INTO @ExecutionIDS 
SELECT COALESCE(ExecutionID, '' )ExecutionID FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID;

WITH LatestJobAuditByTaskName AS (
SELECT TaskName, MAX(AuditId) AS LatestJobAudit
FROM dbo.AuditLog (NOLOCK)a
JOIN @ExecutionIDS e ON a.ExecutionID = e.ExecutionID
WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeRehireEventBN') AND IsOverride = 1 
      GROUP BY TaskName)



SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT ISNULL(@LastProcessedFiscalDate, '1900-01-01') AS LastProcessedFiscalDate
"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeRehireEventBN')
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName,LastProcessedDate) VALUES ('BaseEmployeeRehireEventBN',?)
 END


DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeRehireEventBN');
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.BaseEmployeeEventBN where eventname='Rehire') ;

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = ?;

SELECT @LastProcessedDate AS LoadStartDate;"
"DECLARE @OverrideStartDate DATE;
DECLARE @OverrideEndDate DATE;
DECLARE @BatchOverrideID BIGINT;
DECLARE @IsOverride BIT;
DECLARE @PackageName VARCHAR(50) = 'BaseEmployeeRehireEventBN';

IF EXISTS
(
    SELECT 1
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
)
BEGIN
    SELECT TOP 1
           @BatchOverrideID = BatchOverrideID,
           @OverrideStartDate = OverrideStartDate,
           @OverrideEndDate = OverrideEndDate
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
    ORDER BY CreatedDate DESC;
    SET @IsOverride = 1;
END;
ELSE
BEGIN
    SET @OverrideStartDate =
    (
        SELECT LastProcessedDate
        FROM dbo.ETLBatchControl
        WHERE TableName = @PackageName
    );
    SET @OverrideEndDate = GETDATE();
    SET @IsOverride = 0;
END;
SELECT @BatchOverrideID AS BatchOverrideID,
       @OverrideStartDate AS OverrideStartDate,
       @OverrideEndDate AS OverrideEndDate,
       @IsOverride AS IsOverride;
"
"UPDATE dbo.ETLBatchOverride
SET IsActive = 0
         , LastProcessedDate = ?
WHERE TaskName = 'BaseEmployeeRehireEventBN'
AND IsActive = 1"
"UPDATE dbo.ETLBatchControl
SET LastProcessedDate = ?
, Status = 'Success'
WHERE TableName = 'BaseEmployeeRehireEventBN';"
"DECLARE @FiscalUpdateDate DATE = ?

    DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalUpdateDate  and EventName='Termination';
  
    SELECT @@ROWCOUNT AS DeleteCount ;"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



 BEGIN
  SET @BatchSplitByName = 'FiscalDate'
 END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeTerminationEventUpdates', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN where Eventname='Termination'
 and Fulldate= ?;

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"DECLARE @FiscalDate DATE = ?
DECLARE @CurrentDate DATE = ?

DECLARE @DeleteCount INT = ?;
DECLARE @ISOverride BIT = ?

IF @ISOverride = 1
	BEGIN
		DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate and EventName='Termination';

		SET @DeleteCount = (SELECT @@ROWCOUNT );
		SELECT @DeleteCount AS DeleteCount;
	END 
ELSE 
	BEGIN
    
		
			   	 
		/* Delete if data exists before loading during the reload */
		
		IF (EXISTS ( SELECT 1 FROM dbo.BaseEmployeeEventBN WHERE FullDate = @FiscalDate and EventName='Termination'))
			BEGIN
				DELETE FROM dbo.BaseEmployeeEventBN WHERE FullDate =  @FiscalDate  and EventName='Termination';
		
				SET @DeleteCount = (SELECT @@ROWCOUNT);
			END
		ELSE 
				
		SET @DeleteCount = (SELECT @@ROWCOUNT);
		SELECT @DeleteCount AS DeleteCount;
	END"
"DECLARE @FiscalDate DATE = ?;
DECLARE @BatchSplitByName VARCHAR(20);



	BEGIN
		SET @BatchSplitByName = 'FiscalDate'
	END


EXECUTE [dbo].[spBeginAuditLog] ? OUTPUT, 'BaseEmployeeTerminationEvent', ?,@BatchSplitByName, @FiscalDate;
GO"
"SELECT COUNT(1) AS InsertCount 
FROM dbo.BaseEmployeeEventBN
WHERE InsertAuditID = ?;

/* Set source count to Insert + Delete */

SET ? = ? + ?;"
"SELECT DISTINCT  actual_termination_date  FROM  HR_Base.dbo.PER_PERIODS_OF_SERVICE_B0 with (nolock) WHERE person_id in (
SELECT DISTINCT person_id  FROM  HR_Base.dbo.PER_PERIODS_OF_SERVICE_B0History with (nolock) WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time')))=CAST(? as date) ) and  actual_termination_date is not null and actual_termination_date>=DATEADD(YEAR,-7,format(GETDATE(),'yyyy'))
UNION
SELECT DISTINCT actual_termination_date FROM  HR_Base.dbo.PER_PERIODS_OF_SERVICE_B0History with (nolock) WHERE CONVERT(date, SWITCHOFFSET(BaseUTCEndDate, DATEPART(TZOFFSET, 
BaseUTCEndDate AT TIME ZONE 'Pacific Standard Time')))=CAST(? as date) and  actual_termination_date is not null and actual_termination_date>=DATEADD(YEAR,-7,format(GETDATE(),'yyyy'))
UNION
 select distinct ActualTerminationDate From PerPeriodsB10 with (nolock) where ActualTerminationDate is not null and  PersonID in (
select PersonID From PerPeriodsB10
except 
select PersonID from BaseEmployeeEventBN with (nolock) where EventName='Termination' )"
"/* Get Last Fiscal Date processed successfully from AuditLog */

DECLARE @LastProcessedFiscalDate DATE;
DECLARE @FullDate DATE = (SELECT MAX(FullDate) FROM dbo.BaseEmployeeEventBN(NOLOCK) WHERE EventName='Termination');

WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeTerminationEvent') AND IsOverride = 0
      GROUP BY TaskName)

SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT CASE WHEN @FullDate IS NULL THEN ?
		ELSE ISNULL(@LastProcessedFiscalDate, '1900-01-01') 
	   END AS LastProcessedFiscalDate;	 "
"/* Get Last Fiscal Date processed successfully from AuditLog for override only */

DECLARE @BatchOverrideID BIGINT = ?;
DECLARE @NewExecutionID VARCHAR(300) = ?;
DECLARE @ExecutionIDS TABLE (ExecutionID VARCHAR(300));
DECLARE @LastProcessedFiscalDate DATE;

IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID)
BEGIN 
	INSERT INTO dbo.ETLBatchOverrideExecutions (BatchOverrideID, ExecutionID) VALUES(@BatchOverrideID, @NewExecutionID )
END 
ELSE
	INSERT INTO @ExecutionIDS 
SELECT COALESCE(ExecutionID, '' )ExecutionID FROM dbo.ETLBatchOverrideExecutions WHERE BatchOverrideID = @BatchOverrideID;

WITH LatestJobAuditByTaskName AS (
SELECT TaskName, MAX(AuditId) AS LatestJobAudit
FROM dbo.AuditLog (NOLOCK)a
JOIN @ExecutionIDS e ON a.ExecutionID = e.ExecutionID
WHERE (StatusCode = 1) AND (TaskName = 'BaseEmployeeTerminationEventBN') AND IsOverride = 1 
      GROUP BY TaskName)



SELECT @LastProcessedFiscalDate = CAST(ja.BatchSplitByValue  AS DATE) 
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId ;

SELECT ISNULL(@LastProcessedFiscalDate, '1900-01-01') AS LastProcessedFiscalDate
"
"DECLARE @StartDate DATE = (SELECT CASE WHEN FullDate > FiscalWeekStartDate THEN DATEADD(DAY, 7, FiscalWeekStartDate)
									   ELSE FiscalWeekStartDate 
								  END AS FiscalWeekStartDate
						   FROM dbo.DimDate WHERE FullDate = ?)
DECLARE @CurrentDate DATE = CAST(? AS DATE);
DECLARE @LastProcessedFiscalDate DATE = CAST(NULLIF(?, '1900-01-01') AS DATE);


IF (@LastProcessedFiscalDate IS NULL) 
	BEGIN
		SELECT DISTINCT FullDate
		FROM dbo.DimDate
		WHERE FullDate BETWEEN  @StartDate AND @CurrentDate
		UNION 
		SELECT @CurrentDate AS FullDate
		ORDER BY FullDate

	END
ELSE 
	BEGIN
		SELECT DISTINCT FullDate
		FROM dbo.DimDate
		WHERE (FullDate BETWEEN  @StartDate AND @CurrentDate)
		AND FullDate > @LastProcessedFiscalDate
		UNION 
		SELECT @CurrentDate AS FullDate
		ORDER BY FullDate
	END"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeTerminationEventBN')
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName,LastProcessedDate) VALUES ('BaseEmployeeTerminationEventBN',?)
 END


DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = 'BaseEmployeeTerminationEventBN');
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.BaseEmployeeEventBN where eventname='Termination') ;

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = ?;

SELECT @LastProcessedDate AS LoadStartDate;"
"DECLARE @OverrideStartDate DATE;
DECLARE @OverrideEndDate DATE;
DECLARE @BatchOverrideID BIGINT;
DECLARE @IsOverride BIT;
DECLARE @PackageName VARCHAR(50) = 'BaseEmployeeTerminationEventBN';

IF EXISTS
(
    SELECT 1
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
)
BEGIN
    SELECT TOP 1
           @BatchOverrideID = BatchOverrideID,
           @OverrideStartDate = OverrideStartDate,
           @OverrideEndDate = OverrideEndDate
    FROM dbo.ETLBatchOverride
    WHERE TaskName = @PackageName
          AND IsActive = 1
    ORDER BY CreatedDate DESC;
    SET @IsOverride = 1;
END;
ELSE
BEGIN
    SET @OverrideStartDate =
    (
        SELECT LastProcessedDate
        FROM dbo.ETLBatchControl
        WHERE TableName = @PackageName
    );
    SET @OverrideEndDate = GETDATE();
    SET @IsOverride = 0;
END;
SELECT @BatchOverrideID AS BatchOverrideID,
       @OverrideStartDate AS OverrideStartDate,
       @OverrideEndDate AS OverrideEndDate,
       @IsOverride AS IsOverride;
"
"UPDATE dbo.ETLBatchOverride
SET IsActive = 0
         , LastProcessedDate = ?
WHERE TaskName = 'BaseEmployeeTerminationEventBN'
AND IsActive = 1"
"UPDATE dbo.ETLBatchControl
SET LastProcessedDate = ?
, Status = 'Success'
WHERE TableName = 'BaseEmployeeTerminationEventBN';"
"With MinDateOfBaseTables
As (
Select Min(effective_end_date) as MinDate From PER_ALL_ASSIGNMENTS_F_B0 -- 2016-01-01
Union
Select Min(effective_end_date) From PER_ALL_PEOPLE_F_B0 -- 2016-01-01
Union
Select Min(actual_termination_date ) From PER_PERIODS_OF_SERVICE_B0 -- 2016-01-01
) Select Min(MinDate) as [MinDateOfBaseTables] From MinDateOfBaseTables"
"DECLARE @TableName varchar(30) = 'FlexValuesLookupB10'
DECLARE @LastProcessedDate datetime
DECLARE @BaseCreatedDate datetime


IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = @TableName)
	BEGIN
		INSERT INTO dbo.ETLBatchControl (TableName) VALUES (@TableName)
	END

UPDATE dbo.ETLBatchControl SET [Status] = 'In Process' WHERE TableName = @TableName

SELECT @LastProcessedDate = LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = @TableName
SELECT @BaseCreatedDate = MAX(BaseCreatedDate) FROM dbo.FlexValuesLookupB10

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
	BEGIN
		SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));
	END

SELECT @LastProcessedDate AS LastProcessedDate;"
"UPDATE tgt SET
	Deleted			= 'Y',
	BaseEndDate		= GETDATE()
FROM
	dbo.FlexValuesLookupB10 AS tgt
WHERE NOT EXISTS
	(
		SELECT 1
		FROM
			dbo.FND_FLEX_VALUES_B0 AS fv WITH (NOLOCK)
			INNER JOIN
			dbo.FND_FLEX_VALUE_SETS_B0 AS fvs WITH (NOLOCK)
				ON	fv.flex_value_set_id = fvs.flex_value_set_id
			INNER JOIN
			dbo.FND_FLEX_VALUES_TL_B0 AS fvtl WITH (NOLOCK)
				ON	fv.flex_value_id = fvtl.flex_value_id
		WHERE
			fvs.flex_value_set_name	= tgt.FlexValueSetName AND
			fv.flex_value		= tgt.FlexValue
	)
	AND tgt.RowStatus				= 'A'
	AND ISNULL(tgt.Deleted, '')			!= 'Y'
	;

SELECT @@ROWCOUNT AS DeleteCount;"
"DECLARE @Tablename varchar(30) = 'FlexValuesLookupB10'

UPDATE dbo.ETLBatchControl SET
	LastProcessedDate = GETDATE(),
	[Status] = 'Success'
WHERE
	Tablename = @Tablename"
"DELETE FROM base
FROM dbo.[FND_FLEX_VALUES_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[FND_FLEX_VALUES_B0Landing] landing
    WHERE base.[flex_value_id] = landing.[flex_value_id]
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base SET 
	base.[flex_value_set_id] = landing.[flex_value_set_id],
	base.[flex_value] = landing.[flex_value],
	base.[last_update_date] = landing.[last_update_date],
	base.[last_updated_by] = landing.[last_updated_by],
	base.[creation_date] = landing.[creation_date],
	base.[created_by] = landing.[created_by],
	base.[last_update_login] = landing.[last_update_login],
	base.[enabled_flag] = landing.[enabled_flag],
	base.[summary_flag] = landing.[summary_flag],
	base.[start_date_active] = landing.[start_date_active],
	base.[end_date_active] = landing.[end_date_active],
	base.[parent_flex_value_low] = landing.[parent_flex_value_low],
	base.[parent_flex_value_high] = landing.[parent_flex_value_high],
	base.[structured_hierarchy_level] = landing.[structured_hierarchy_level],
	base.[hierarchy_level] = landing.[hierarchy_level],
	base.[compiled_value_attributes] = landing.[compiled_value_attributes],
	base.[value_category] = landing.[value_category],
	base.[attribute1] = landing.[attribute1],
	base.[attribute2] = landing.[attribute2],
	base.[attribute3] = landing.[attribute3],
	base.[attribute4] = landing.[attribute4],
	base.[attribute5] = landing.[attribute5],
	base.[attribute6] = landing.[attribute6],
	base.[attribute7] = landing.[attribute7],
	base.[attribute8] = landing.[attribute8],
	base.[attribute9] = landing.[attribute9],
	base.[attribute10] = landing.[attribute10],
	base.[attribute11] = landing.[attribute11],
	base.[attribute12] = landing.[attribute12],
	base.[attribute13] = landing.[attribute13],
	base.[attribute14] = landing.[attribute14],
	base.[attribute15] = landing.[attribute15],
	base.[attribute16] = landing.[attribute16],
	base.[attribute17] = landing.[attribute17],
	base.[attribute18] = landing.[attribute18],
	base.[attribute19] = landing.[attribute19],
	base.[attribute20] = landing.[attribute20],
	base.[attribute21] = landing.[attribute21],
	base.[attribute22] = landing.[attribute22],
	base.[attribute23] = landing.[attribute23],
	base.[attribute24] = landing.[attribute24],
	base.[attribute25] = landing.[attribute25],
	base.[attribute26] = landing.[attribute26],
	base.[attribute27] = landing.[attribute27],
	base.[attribute28] = landing.[attribute28],
	base.[attribute29] = landing.[attribute29],
	base.[attribute30] = landing.[attribute30],
	base.[attribute31] = landing.[attribute31],
	base.[attribute32] = landing.[attribute32],
	base.[attribute33] = landing.[attribute33],
	base.[attribute34] = landing.[attribute34],
	base.[attribute35] = landing.[attribute35],
	base.[attribute36] = landing.[attribute36],
	base.[attribute37] = landing.[attribute37],
	base.[attribute38] = landing.[attribute38],
	base.[attribute39] = landing.[attribute39],
	base.[attribute40] = landing.[attribute40],
	base.[attribute41] = landing.[attribute41],
	base.[attribute42] = landing.[attribute42],
	base.[attribute43] = landing.[attribute43],
	base.[attribute44] = landing.[attribute44],
	base.[attribute45] = landing.[attribute45],
	base.[attribute46] = landing.[attribute46],
	base.[attribute47] = landing.[attribute47],
	base.[attribute48] = landing.[attribute48],
	base.[attribute49] = landing.[attribute49],
	base.[attribute50] = landing.[attribute50],
	base.[attribute_sort_order] = landing.[attribute_sort_order],
	base.[zd_edition_name] = landing.[zd_edition_name],
	base.[datalakeinserttime] = landing.[datalakeinserttime],
	base.[RowHash] = landing.[RowHash],
	base.[BaseCreatedDate] = GETDATE(),
	base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[FND_FLEX_VALUES_B0] base
JOIN [HR_Landing].dbo.[FND_FLEX_VALUES_B0Landing] landing ON base.[flex_value_id] = landing.[flex_value_id]
WHERE base.[RowHash] != landing.[RowHash];

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [flex_value_id],
HASHBYTES('MD5',
(SELECT
	[flex_value_set_id],
	[flex_value_id],
	[flex_value],
	[enabled_flag],
	[summary_flag],
	[start_date_active],
	[end_date_active],
	[parent_flex_value_low],
	[parent_flex_value_high],
	[structured_hierarchy_level],
	[hierarchy_level],
	[compiled_value_attributes],
	[value_category],
	[attribute1],
	[attribute2],
	[attribute3],
	[attribute4],
	[attribute5],
	[attribute6],
	[attribute7],
	[attribute8],
	[attribute9],
	[attribute10],
	[attribute11],
	[attribute12],
	[attribute13],
	[attribute14],
	[attribute15],
	[attribute16],
	[attribute17],
	[attribute18],
	[attribute19],
	[attribute20],
	[attribute21],
	[attribute22],
	[attribute23],
	[attribute24],
	[attribute25],
	[attribute26],
	[attribute27],
	[attribute28],
	[attribute29],
	[attribute30],
	[attribute31],
	[attribute32],
	[attribute33],
	[attribute34],
	[attribute35],
	[attribute36],
	[attribute37],
	[attribute38],
	[attribute39],
	[attribute40],
	[attribute41],
	[attribute42],
	[attribute43],
	[attribute44],
	[attribute45],
	[attribute46],
	[attribute47],
	[attribute48],
	[attribute49],
	[attribute50],
	[attribute_sort_order]
	FOR XML RAW)) AS RowHash
FROM [dbo].FND_FLEX_VALUES_B0Landing l)src
JOIN [dbo].FND_FLEX_VALUES_B0Landing TARGET ON src.[flex_value_id] = TARGET.[flex_value_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.FND_FLEX_VALUES_TL_B0 BASE
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.FND_FLEX_VALUES_TL_B0Landing landing
    WHERE base.flex_value_id = landing.flex_value_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
SET base.flex_value_id = landing.flex_value_id,
    base.language = landing.language,
    base.last_update_date = landing.last_update_date,
    base.last_updated_by = landing.last_updated_by,
    base.creation_date = landing.creation_date,
    base.created_by = landing.created_by,
    base.last_update_login = landing.last_update_login,
    base.description = landing.description,
    base.source_lang = landing.source_lang,
    base.flex_value_meaning = landing.flex_value_meaning,
    base.zd_edition_name = landing.zd_edition_name,
    base.[datalakeinserttime] = landing.[datalakeinserttime],
    base.[RowHash] = landing.[RowHash],
    base.[BaseCreatedDate] = GETDATE(),
    base.[BaseCreatedBy] = SUSER_SNAME()
FROM [HR_Base].dbo.[FND_FLEX_VALUES_TL_B0] base
    JOIN [HR_Landing].dbo.[FND_FLEX_VALUES_TL_B0Landing] landing
        ON base.flex_value_id = landing.flex_value_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE TARGET 
SET target.RowHash=SRC.RowHash
FROM 
(SELECT flex_value_id,
HASHBYTES('MD5',


(SELECT  flex_value_id
,language

,description
,source_lang
,flex_value_meaning
zd_edition_name
 FOR XML RAW)) AS RowHash

  FROM [HR_Landing].[dbo].[FND_FLEX_VALUES_TL_B0Landing]) SRC
  JOIN [HR_Landing].[dbo].[FND_FLEX_VALUES_TL_B0Landing] Target ON SRC.flex_value_id=Target.flex_value_id


   SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[FND_FLEX_VALUE_SETS_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[FND_FLEX_VALUE_SETS_B0Landing] landing
    WHERE base.flex_value_set_id = landing.flex_value_set_id   
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET 
       base.flex_value_set_id = landing.flex_value_set_id
      ,base.flex_value_set_name = landing.flex_value_set_name
      ,base.last_update_date = landing.last_update_date
      ,base.last_updated_by = landing.last_updated_by
      ,base.creation_date = landing.creation_date
      ,base.created_by = landing.created_by
      ,base.last_update_login = landing.last_update_login
      ,base.validation_type = landing.validation_type
      ,base.protected_flag = landing.protected_flag
      ,base.security_enabled_flag = landing.security_enabled_flag
      ,base.longlist_flag = landing.longlist_flag
      ,base.format_type = landing.format_type
      ,base.maximum_size= landing.maximum_size
      ,base.alphanumeric_allowed_flag = landing.alphanumeric_allowed_flag
      ,base.uppercase_only_flag = landing.uppercase_only_flag
      ,base.numeric_mode_enabled_flag = landing.numeric_mode_enabled_flag
      ,base.description = landing.description
      ,base.dependant_default_value = landing.dependant_default_value
      ,base.dependant_default_meaning = landing.dependant_default_meaning
      ,base.parent_flex_value_set_id = landing.parent_flex_value_set_id
      ,base.minimum_value = landing.minimum_value
      ,base.maximum_value = landing.maximum_value
      ,base.number_precision = landing.number_precision
      ,base.zd_edition_name = landing.zd_edition_name
      ,base.[datalakeinserttime] = landing.datalakeinserttime
      ,base.[RowHash] = landing.RowHash
      ,base.[BaseCreatedDate] = GETDATE()
      ,base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[FND_FLEX_VALUE_SETS_B0] base
JOIN [HR_Landing].dbo.[FND_FLEX_VALUE_SETS_B0Landing] landing ON base.flex_value_set_id = landing.flex_value_set_id 
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [flex_value_set_id],
HASHBYTES('MD5',
(SELECT [flex_value_set_id]
      ,[flex_value_set_name]
      ,[validation_type]
      ,[protected_flag]
      ,[security_enabled_flag]
      ,[longlist_flag]
      ,[format_type]
      ,[maximum_size]
      ,[alphanumeric_allowed_flag]
      ,[uppercase_only_flag]
      ,[numeric_mode_enabled_flag]
      ,[description]
      ,[dependant_default_value]
      ,[dependant_default_meaning]
      ,[parent_flex_value_set_id]
      ,[minimum_value]
      ,[maximum_value]
      ,[number_precision]
      ,[zd_edition_name] FOR XML RAW)) AS RowHash
FROM [dbo].FND_FLEX_VALUE_SETS_B0Landing l)src
JOIN [dbo].FND_FLEX_VALUE_SETS_B0Landing TARGET ON src.[flex_value_set_id] = TARGET.[flex_value_set_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[FND_ID_FLEX_STRUCTURES_TL_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[FND_ID_FLEX_STRUCTURES_TL_B0Landing] landing
    WHERE
	base.[application_id] = landing.[application_id] AND
	base.[id_flex_code] = landing.[id_flex_code] AND
	base.[id_flex_num] = landing.[id_flex_num] AND
	base.[language] = landing.[language]
);

SELECT @@ROWCOUNT AS DeleteCount;"
"UPDATE base SET 
	base.[last_update_date] = landing.[last_update_date],
	base.[last_updated_by] = landing.[last_updated_by],
	base.[creation_date] = landing.[creation_date],
	base.[created_by] = landing.[created_by],
	base.[last_update_login] = landing.[last_update_login],
	base.[id_flex_structure_name] = landing.[id_flex_structure_name],
	base.[description] = landing.[description],
	base.[shorthand_prompt] = landing.[shorthand_prompt],
	base.[source_lang] = landing.[source_lang],
	base.[zd_edition_name] = landing.[zd_edition_name],
	base.[datalakeinserttime] = landing.[datalakeinserttime],
	base.[RowHash] = landing.[RowHash],
	base.[BaseCreatedDate] = GETDATE(),
	base.[BaseCreatedBy] = suser_sname()
FROM
	[HR_Base].dbo.[FND_ID_FLEX_STRUCTURES_TL_B0] base
	INNER JOIN
	[HR_Landing].dbo.[FND_ID_FLEX_STRUCTURES_TL_B0Landing] landing
		ON	base.[application_id] = landing.[application_id] AND
			base.[id_flex_code] = landing.[id_flex_code] AND
			base.[id_flex_num] = landing.[id_flex_num] AND
			base.[language] = landing.[language]
WHERE
	base.[RowHash] != landing.[RowHash];

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [application_id], [id_flex_code], [id_flex_num], [language], 
HASHBYTES('MD5',
(SELECT
	[application_id],
	[id_flex_code],
	[id_flex_num],
	[language],
	[id_flex_structure_name],
	[description],
	[shorthand_prompt],
	[source_lang]
	FOR XML RAW)) AS RowHash
FROM [dbo].FND_ID_FLEX_STRUCTURES_TL_B0Landing l) src
JOIN [dbo].FND_ID_FLEX_STRUCTURES_TL_B0Landing target 
	ON	src.[application_id] = target.[application_id] AND
		src.[id_flex_code] = target.[id_flex_code] AND
		src.[id_flex_num] = target.[id_flex_num] AND
		src.[language] = target.[language];

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.Fnd_Logins_B0 BASE
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.Fnd_Logins_B0PreLanding landing
    WHERE base.Login_id = landing.Login_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
SET base.[Login_id] = landing.[Login_id],
    base.[User_id] = landing.[User_id],
    base.[Start_time] = landing.[Start_time],
    base.[End_time] = landing.[End_time],
    base.[pid] = landing.[pid],
    base.[Spid] = landing.[Spid],
    base.[Terminal_id] = landing.[Terminal_id],
    base.[Login_name] = landing.[Login_name],
    base.[Session_number] = landing.[Session_number],
    base.[Submitted_login_id] = landing.[Submitted_login_id],
    base.[Serial#] = landing.[Serial#],
    base.[process_spid] = landing.[process_spid],
    base.[login_type] = landing.[login_type],
    base.[datalakeinserttime] = landing.[datalakeinserttime],
    base.[RowHash] = landing.[RowHash],
    base.[BaseCreatedDate] = GETDATE(),
    base.[BaseCreatedBy] = SUSER_SNAME()
FROM [HR_Base].dbo.[Fnd_Logins_B0] base
    JOIN [HR_Landing].dbo.[Fnd_Logins_B0Landing] landing
        ON base.Login_id = landing.Login_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
User::vPreLandingTruncateQuery
"UPDATE TARGET 
SET target.RowHash=SRC.RowHash
FROM 
(SELECT Login_id,
HASHBYTES('MD5',
(SELECT  [Login_id]
      ,[User_id]
      ,[Start_time]
      ,[End_time]
      ,[pid]
      ,[Spid]
      ,[Terminal_id]
      ,[Login_name]
      ,[Session_number]
      ,[Submitted_login_id]
      ,[Serial#]
      ,[process_spid]
      ,[login_type] FOR XML RAW)) AS RowHash
      
  FROM [dbo].[FND_LOGINS_B0PreLanding]
) SRC
    JOIN [dbo].[FND_LOGINS_B0PreLanding] Target
        ON SRC.Login_id = Target.Login_id;
           
SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE dbo.[FND_LOOKUP_VALUES_B0] SET deleted= 'Y'
WHERE RowHash NOT IN
(
    SELECT RowHash
    FROM [HR_Landing].dbo.[FND_LOOKUP_VALUES_B0Landing]
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base SET 
	base.[language] = landing.[language],
	base.[meaning] = landing.[meaning],
	base.[description] = landing.[description],
	base.[enabled_flag] = landing.[enabled_flag],
	base.[start_date_active] = landing.[start_date_active],
	base.[end_date_active] = landing.[end_date_active],
	base.[created_by] = landing.[created_by],
	base.[creation_date] = landing.[creation_date],
	base.[last_updated_by] = landing.[last_updated_by],
	base.[last_update_login] = landing.[last_update_login],
	base.[last_update_date] = landing.[last_update_date],
	base.[source_lang] = landing.[source_lang],
	base.[security_group_id] = landing.[security_group_id],
	base.[territory_code] = landing.[territory_code],
	base.[attribute_category] = landing.[attribute_category],
	base.[attribute1] = landing.[attribute1],
	base.[attribute2] = landing.[attribute2],
	base.[attribute3] = landing.[attribute3],
	base.[attribute4] = landing.[attribute4],
	base.[attribute5] = landing.[attribute5],
	base.[attribute6] = landing.[attribute6],
	base.[attribute7] = landing.[attribute7],
	base.[attribute8] = landing.[attribute8],
	base.[attribute9] = landing.[attribute9],
	base.[attribute10] = landing.[attribute10],
	base.[attribute11] = landing.[attribute11],
	base.[attribute12] = landing.[attribute12],
	base.[attribute13] = landing.[attribute13],
	base.[attribute14] = landing.[attribute14],
	base.[attribute15] = landing.[attribute15],
	base.[tag] = landing.[tag],
	base.[leaf_node] = landing.[leaf_node],
	base.[zd_edition_name] = landing.[zd_edition_name],
	base.[datalakeinserttime] = landing.[datalakeinserttime],
	base.[RowHash] = landing.[RowHash],
	base.[BaseCreatedDate] = GETDATE(),
	base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[FND_LOOKUP_VALUES_B0] base
JOIN [HR_Landing].dbo.[FND_LOOKUP_VALUES_B0Landing] landing 
	ON base.[lookup_type] COLLATE Latin1_General_CS_AS = landing.[lookup_type] COLLATE Latin1_General_CS_AS
	AND base.[lookup_code] COLLATE Latin1_General_CS_AS = landing.[lookup_code] COLLATE Latin1_General_CS_AS
	AND base.[view_application_id] = landing.[view_application_id]
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE TARGET
SET TARGET.RowHash = SRC.RowHash
FROM 
(SELECT [lookup_type], 
[lookup_code], 
[view_application_id],
HASHBYTES('MD5',
(SELECT 
	[lookup_type],
	[language],
	[lookup_code],
	[meaning],
	[description],
	[enabled_flag],
	[start_date_active],
	[end_date_active],
	[source_lang],
	[security_group_id],
	[view_application_id],
	[territory_code],
	[attribute_category],
	[attribute1],
	[attribute2],
	[attribute3],
	[attribute4],
	[attribute5],
	[attribute6],
	[attribute7],
	[attribute8],
	[attribute9],
	[attribute10],
	[attribute11],
	[attribute12],
	[attribute13],
	[attribute14],
	[attribute15],
	[tag],
	[leaf_node],
	[zd_edition_name]
    FOR XML RAW)) AS RowHash
FROM [dbo].FND_LOOKUP_VALUES_B0Landing l) SRC
JOIN [dbo].FND_LOOKUP_VALUES_B0Landing TARGET 
	ON SRC.[lookup_type] COLLATE Latin1_General_CS_AS = TARGET.[lookup_type] COLLATE Latin1_General_CS_AS
	AND SRC.[lookup_code] COLLATE Latin1_General_CS_AS = TARGET.[lookup_code] COLLATE Latin1_General_CS_AS
	AND SRC.[view_application_id] = TARGET.[view_application_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[HR_ALL_ORGANIZATION_UNITS_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[HR_ALL_ORGANIZATION_UNITS_B0Landing] landing
    WHERE base.organization_id = landing.organization_id
);

SELECT @@ROWCOUNT AS DeleteCount;"
"UPDATE base SET 
	base.attribute_category	= landing.attribute_category,
	base.attribute1 = landing.attribute1,
	base.attribute10 = landing.attribute10,
	base.attribute11 = landing.attribute11,
	base.attribute12 = landing.attribute12,
	base.attribute13 = landing.attribute13,
	base.attribute14 = landing.attribute14,
	base.attribute15 = landing.attribute15,
	base.attribute16 = landing.attribute16,
	base.attribute17 = landing.attribute17,
	base.attribute18 = landing.attribute18,
	base.attribute19 = landing.attribute19,
	base.attribute2 = landing.attribute2,
	base.attribute20 = landing.attribute20,
	base.attribute21 = landing.attribute21,
	base.attribute22 = landing.attribute22,
	base.attribute23 = landing.attribute23,
	base.attribute24 = landing.attribute24,
	base.attribute25 = landing.attribute25,
	base.attribute26 = landing.attribute26,
	base.attribute27 = landing.attribute27,
	base.attribute28 = landing.attribute28,
	base.attribute29 = landing.attribute29,
	base.attribute3 = landing.attribute3,
	base.attribute30 = landing.attribute30,
	base.attribute4 = landing.attribute4,
	base.attribute5 = landing.attribute5,
	base.attribute6 = landing.attribute6,
	base.attribute7 = landing.attribute7,
	base.attribute8 = landing.attribute8,
	base.attribute9 = landing.attribute9,
	base.business_group_id = landing.business_group_id,
	base.comments = landing.comments,
	base.cost_allocation_keyflex_id = landing.cost_allocation_keyflex_id,
	base.created_by = landing.created_by,
	base.creation_date = landing.creation_date,
	base.datalakeinserttime = landing.datalakeinserttime,
	base.date_from = landing.date_from,
	base.date_to = landing.date_to,
	base.internal_address_line = landing.internal_address_line,
	base.internal_external_flag = landing.internal_external_flag,
	base.last_update_date = landing.last_update_date,
	base.last_update_login = landing.last_update_login,
	base.last_updated_by = landing.last_updated_by,
	base.location_id = landing.location_id,
	base.[name] = landing.[name],
	base.object_version_number = landing.object_version_number,
	base.party_id = landing.party_id,
	base.program_application_id = landing.program_application_id,
	base.program_id = landing.program_id,
	base.program_update_date = landing.program_update_date,
	base.request_id = landing.request_id,
	base.soft_coding_keyflex_id = landing.soft_coding_keyflex_id,
	base.[type] = landing.[type],
	base.[RowHash] = landing.RowHash,
	base.[BaseCreatedDate] = GETDATE(),
	base.[BaseCreatedBy] = SUSER_SNAME()
FROM [HR_Base].dbo.[HR_ALL_ORGANIZATION_UNITS_B0] base
JOIN [HR_Landing].dbo.[HR_ALL_ORGANIZATION_UNITS_B0Landing] landing 
	ON base.organization_id = landing.organization_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target SET 
	target.RowHash = src.RowHash
FROM 
(SELECT 
	organization_id,
	HASHBYTES('MD5',
(SELECT
	attribute_category,
	attribute1,
	attribute10,
	attribute11,
	attribute12,
	attribute13,
	attribute14,
	attribute15,
	attribute16,
	attribute17,
	attribute18,
	attribute19,
	attribute2,
	attribute20,
	attribute21,
	attribute22,
	attribute23,
	attribute24,
	attribute25,
	attribute26,
	attribute27,
	attribute28,
	attribute29,
	attribute3,
	attribute30,
	attribute4,
	attribute5,
	attribute6,
	attribute7,
	attribute8,
	attribute9,
	business_group_id,
	comments,
	cost_allocation_keyflex_id,
	date_from,
	date_to,
	internal_address_line,
	internal_external_flag,
	location_id,
	[name],
	object_version_number,
	organization_id,
	party_id,
	program_application_id,
	program_id,
	program_update_date,
	request_id,
	soft_coding_keyflex_id,
	[type]
	FOR XML RAW)) AS RowHash
FROM dbo.HR_ALL_ORGANIZATION_UNITS_B0Landing l) src
JOIN dbo.HR_ALL_ORGANIZATION_UNITS_B0Landing target ON src.[organization_id] = target.[organization_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[HR_ALL_POSITIONS_F_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[HR_ALL_POSITIONS_F_B0Landing] landing
    WHERE base.position_id = landing.position_id
AND base.[effective_start_date] = landing.effective_start_date
AND base.[effective_end_date] = landing.effective_end_date
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.[availability_status_id] = landing.availability_status_id
      ,base.[business_group_id] = landing.business_group_id
      ,base.[entry_grade_id] = landing.entry_grade_id
      ,base.[entry_grade_rule_id] = landing.entry_grade_rule_id
      ,base.[entry_step_id] = landing.entry_step_id
      ,base.[job_id] = landing.job_id
      ,base.[location_id] = landing.location_id
      ,base.[organization_id] = landing.organization_id
      ,base.[pay_basis_id] = landing.pay_basis_id
      ,base.[pay_freq_payroll_id] = landing.pay_freq_payroll_id
      ,base.[position_definition_id] = landing.position_definition_id
      ,base.[position_transaction_id] = landing.position_transaction_id
      ,base.[prior_position_id] = landing.prior_position_id
      ,base.[relief_position_id] = landing.relief_position_id
      ,base.[successor_position_id] = landing.successor_position_id
      ,base.[supervisor_id] = landing.supervisor_id
      ,base.[supervisor_position_id] = landing.supervisor_position_id
      ,base.[amendment_date] = landing.amendment_date
      ,base.[amendment_recommendation] = landing.amendment_recommendation
      ,base.[amendment_ref_number] = landing.amendment_ref_number
      ,base.[avail_status_prop_end_date] = landing.avail_status_prop_end_date
      ,base.[bargaining_unit_cd] = landing.bargaining_unit_cd
      ,base.[copied_to_old_table_flag] = landing.copied_to_old_table_flag
      ,base.[current_job_prop_end_date] = landing.current_job_prop_end_date
      ,base.[current_org_prop_end_date] = landing.current_org_prop_end_date
      ,base.[date_effective] = landing.date_effective
      ,base.[date_end] = landing.date_end
      ,base.[earliest_hire_date] = landing.earliest_hire_date
      ,base.[fill_by_date] = landing.fill_by_date
      ,base.[frequency] = landing.frequency
      ,base.[fte] = landing.fte
      ,base.[max_persons] = landing.max_persons
      ,base.[name] = landing.NAME
      ,base.[overlap_period] = landing.overlap_period
      ,base.[overlap_unit_cd] = landing.overlap_unit_cd
      ,base.[pay_term_end_day_cd] = landing.pay_term_end_day_cd
      ,base.[pay_term_end_month_cd] = landing.pay_term_end_month_cd
      ,base.[permanent_temporary_flag] = landing.permanent_temporary_flag
      ,base.[permit_recruitment_flag] = landing.permit_recruitment_flag
      ,base.[position_type] = landing.position_type
      ,base.[posting_description] = landing.posting_description
      ,base.[probation_period] = landing.probation_period
      ,base.[probation_period_unit_cd] = landing.probation_period_unit_cd
      ,base.[proposed_fte_for_layoff] = landing.proposed_fte_for_layoff
      ,base.[proposed_date_for_layoff] = landing.proposed_date_for_layoff
      ,base.[replacement_required_flag] = landing.replacement_required_flag
      ,base.[review_flag] = landing.review_flag
      ,base.[seasonal_flag] = landing.seasonal_flag
      ,base.[security_requirements] = landing.security_requirements
      ,base.[status] = landing.STATUS
      ,base.[term_start_day_cd] = landing.term_start_day_cd
      ,base.[term_start_month_cd] = landing.term_start_month_cd
      ,base.[time_normal_finish] = landing.time_normal_finish
      ,base.[time_normal_start] = landing.time_normal_start
      ,base.[update_source_cd] = landing.update_source_cd
      ,base.[working_hours] = landing.working_hours
      ,base.[works_council_approval_flag] = landing.works_council_approval_flag
      ,base.[work_period_type_cd] = landing.work_period_type_cd
      ,base.[work_term_end_day_cd] = landing.work_term_end_day_cd
      ,base.[work_term_end_month_cd] = landing.work_term_end_month_cd
      ,base.[information1] = landing.information1
      ,base.[information2] = landing.information2
      ,base.[information3] = landing.information3
      ,base.[information4] = landing.information4
      ,base.[information5] = landing.information5
      ,base.[information6] = landing.information6
      ,base.[information7] = landing.information7
      ,base.[information8] = landing.information8
      ,base.[information9] = landing.information9
      ,base.[information10] = landing.information10
      ,base.[information11] = landing.information11
      ,base.[information12] = landing.information12
      ,base.[information13] = landing.information13
      ,base.[information14] = landing.information14
      ,base.[information15] = landing.information15
      ,base.[information16] = landing.information16
      ,base.[information17] = landing.information17
      ,base.[information18] = landing.information18
      ,base.[information19] = landing.information19
      ,base.[information20] = landing.information20
      ,base.[information21] = landing.information21
      ,base.[information22] = landing.information22
      ,base.[information23] = landing.information23
      ,base.[information24] = landing.information24
      ,base.[information25] = landing.information25
      ,base.[information26] = landing.information26
      ,base.[information27] = landing.information27
      ,base.[information28] = landing.information28
      ,base.[information29] = landing.information29
      ,base.[information30] = landing.information30
      ,base.[information_category] = landing.information_category
      ,base.[attribute1] = landing.attribute1
      ,base.[attribute2] = landing.attribute2
      ,base.[attribute3] = landing.attribute3
      ,base.[attribute4] = landing.attribute4
      ,base.[attribute5] = landing.attribute5
      ,base.[attribute6] = landing.attribute6
      ,base.[attribute7] = landing.attribute7
      ,base.[attribute8] = landing.attribute8
      ,base.[attribute9] = landing.attribute9
      ,base.[attribute10] = landing.attribute10
      ,base.[attribute11] = landing.attribute11
      ,base.[attribute12] = landing.attribute12
      ,base.[attribute13] = landing.attribute13
      ,base.[attribute14] = landing.attribute14
      ,base.[attribute15] = landing.attribute15
      ,base.[attribute16] = landing.attribute16
      ,base.[attribute17] = landing.attribute17
      ,base.[attribute18] = landing.attribute18
      ,base.[attribute19] = landing.attribute19
      ,base.[attribute20] = landing.attribute20
      ,base.[attribute21] = landing.attribute21
      ,base.[attribute22] = landing.attribute22
      ,base.[attribute23] = landing.attribute23
      ,base.[attribute24] = landing.attribute24
      ,base.[attribute25] = landing.attribute25
      ,base.[attribute26] = landing.attribute26
      ,base.[attribute27] = landing.attribute27
      ,base.[attribute28] = landing.attribute28
      ,base.[attribute29] = landing.attribute29
      ,base.[attribute30] = landing.attribute30
      ,base.[attribute_category] = landing.attribute_category
      ,base.[request_id] = landing.request_id
      ,base.[program_application_id] = landing.program_application_id
      ,base.[program_id] = landing.program_id
      ,base.[program_update_date] = landing.program_update_date
      ,base.[created_by] = landing.created_by
      ,base.[creation_date] = landing.creation_date
      ,base.[last_updated_by] = landing.last_updated_by
      ,base.[last_update_date] = landing.last_update_date
      ,base.[last_update_login] = landing.last_update_login
      ,base.[object_version_number] = landing.object_version_number
      ,base.[comments] = landing.comments
      ,base.[datalakeinserttime] = landing.datalakeinserttime
      ,base.[RowHash] = landing.RowHash
      ,base.[BaseCreatedDate] = GETDATE()
      ,base.[BaseCreatedBy] = suser_sname()
FROM [HR_ALL_POSITIONS_F_B0] base
JOIN [HR_Landing].dbo.[HR_ALL_POSITIONS_F_B0Landing] landing ON base.position_id = landing.position_id
AND base.[effective_start_date] = landing.effective_start_date
AND base.[effective_end_date] = landing.effective_end_date
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [position_id], [effective_start_date], [effective_end_date],
HASHBYTES('MD5',
(SELECT [position_id]
      ,[effective_start_date]
      ,[effective_end_date]
      ,[availability_status_id]
      ,[business_group_id]
      ,[entry_grade_id]
      ,[entry_grade_rule_id]
      ,[entry_step_id]
      ,[job_id]
      ,[location_id]
      ,[organization_id]
      ,[pay_basis_id]
      ,[pay_freq_payroll_id]
      ,[position_definition_id]
      ,[position_transaction_id]
      ,[prior_position_id]
      ,[relief_position_id]
      ,[successor_position_id]
      ,[supervisor_id]
      ,[supervisor_position_id]
      ,[amendment_date]
      ,[amendment_recommendation]
      ,[amendment_ref_number]
      ,[avail_status_prop_end_date]
      ,[bargaining_unit_cd]
      ,[copied_to_old_table_flag]
      ,[current_job_prop_end_date]
      ,[current_org_prop_end_date]
      ,[date_effective]
      ,[date_end]
      ,[earliest_hire_date]
      ,[fill_by_date]
      ,[frequency]
      ,[fte]
      ,[max_persons]
      ,[name]
      ,[overlap_period]
      ,[overlap_unit_cd]
      ,[pay_term_end_day_cd]
      ,[pay_term_end_month_cd]
      ,[permanent_temporary_flag]
      ,[permit_recruitment_flag]
      ,[position_type]
      ,[posting_description]
      ,[probation_period]
      ,[probation_period_unit_cd]
      ,[proposed_fte_for_layoff]
      ,[proposed_date_for_layoff]
      ,[replacement_required_flag]
      ,[review_flag]
      ,[seasonal_flag]
      ,[security_requirements]
      ,[status]
      ,[term_start_day_cd]
      ,[term_start_month_cd]
      ,[time_normal_finish]
      ,[time_normal_start]
      ,[update_source_cd]
      ,[working_hours]
      ,[works_council_approval_flag]
      ,[work_period_type_cd]
      ,[work_term_end_day_cd]
      ,[work_term_end_month_cd]
      ,[information1]
      ,[information2]
      ,[information3]
      ,[information4]
      ,[information5]
      ,[information6]
      ,[information7]
      ,[information8]
      ,[information9]
      ,[information10]
      ,[information11]
      ,[information12]
      ,[information13]
      ,[information14]
      ,[information15]
      ,[information16]
      ,[information17]
      ,[information18]
      ,[information19]
      ,[information20]
      ,[information21]
      ,[information22]
      ,[information23]
      ,[information24]
      ,[information25]
      ,[information26]
      ,[information27]
      ,[information28]
      ,[information29]
      ,[information30]
      ,[information_category]
      ,[attribute1]
      ,[attribute2]
      ,[attribute3]
      ,[attribute4]
      ,[attribute5]
      ,[attribute6]
      ,[attribute7]
      ,[attribute8]
      ,[attribute9]
      ,[attribute10]
      ,[attribute11]
      ,[attribute12]
      ,[attribute13]
      ,[attribute14]
      ,[attribute15]
      ,[attribute16]
      ,[attribute17]
      ,[attribute18]
      ,[attribute19]
      ,[attribute20]
      ,[attribute21]
      ,[attribute22]
      ,[attribute23]
      ,[attribute24]
      ,[attribute25]
      ,[attribute26]
      ,[attribute27]
      ,[attribute28]
      ,[attribute29]
      ,[attribute30]
      ,[attribute_category]
      ,[request_id]
      ,[program_application_id]
      ,[program_id]
      ,[program_update_date]
      ,[object_version_number]
      ,[comments] FOR XML RAW)) AS RowHash
FROM [dbo].HR_ALL_POSITIONS_F_B0Landing l)src
JOIN [dbo].HR_ALL_POSITIONS_F_B0Landing TARGET ON src.[position_id] = TARGET.[position_id]
AND src.[effective_start_date] = target.[effective_start_date] AND src.[effective_end_date] = target.[effective_end_date]

SELECT @@ROWCOUNT AS UpdateCount;"
"EXECUTE [dbo].[spEndAuditLog] ?, ?, ?, ?, ?,?
GO"
"DELETE FROM base
FROM dbo.[HR_LOCATIONS_ALL_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[HR_LOCATIONS_ALL_B0Landing] landing
    WHERE base.location_id = landing.location_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.[location_id] = landing.location_id,
      base.[location_code] = landing.location_code,
      base.[business_group_id] = landing.business_group_id,
      base.[description] = landing.description,
      base.[ship_to_location_id] = landing.ship_to_location_id,
      base.[ship_to_site_flag] = landing.ship_to_site_flag,
      base.[receiving_site_flag] = landing.receiving_site_flag,
      base.[bill_to_site_flag] = landing.bill_to_site_flag,
      base.[in_organization_flag] = landing.in_organization_flag,
      base.[office_site_flag] = landing.office_site_flag,
      base.[designated_receiver_id] = landing.designated_receiver_id,
      base.[inventory_organization_id] = landing.inventory_organization_id,
      base.[inactive_date] = landing.inactive_date,
      base.[style] = landing.style,
      base.[address_line_1] = landing.address_line_1,
      base.[address_line_2] = landing.address_line_2,
      base.[address_line_3] = landing.address_line_3,
      base.[town_or_city] = landing.town_or_city,
      base.[country] = landing.country,
      base.[postal_code] = landing.postal_code,
      base.[region_1] = landing.region_1,
      base.[region_2] = landing.region_2,
      base.[region_3] = landing.region_3,
      base.[telephone_number_1] = landing.telephone_number_1,
      base.[telephone_number_2] = landing.telephone_number_2,
      base.[telephone_number_3] = landing.telephone_number_3,
      base.[loc_information13] = landing.loc_information13,
      base.[loc_information14] = landing.loc_information14,
      base.[loc_information15] = landing.loc_information15,
      base.[loc_information16] = landing.loc_information16,
      base.[loc_information17] = landing.loc_information17,
      base.[attribute_category] = landing.attribute_category,
      base.[attribute1] = landing.attribute1,
      base.[attribute2] = landing.attribute2,
      base.[attribute3] = landing.attribute3,
      base.[attribute4] = landing.attribute4,
      base.[attribute5] = landing.attribute5,
      base.[attribute6] = landing.attribute6,
      base.[attribute7] = landing.attribute7,
      base.[attribute8] = landing.attribute8,
      base.[attribute9] = landing.attribute9,
      base.[attribute10] = landing.attribute10,
      base.[attribute11] = landing.attribute11,
      base.[attribute12] = landing.attribute12,
      base.[attribute13] = landing.attribute13,
      base.[attribute14] = landing.attribute14,
      base.[attribute15] = landing.attribute15,
      base.[attribute16] = landing.attribute16,
      base.[attribute17] = landing.attribute17,
      base.[attribute18] = landing.attribute18,
      base.[attribute19] = landing.attribute19,
      base.[attribute20] = landing.attribute20,
      base.[global_attribute_category] = landing.global_attribute_category,
      base.[global_attribute1] = landing.global_attribute1,
      base.[global_attribute2] = landing.global_attribute2,
      base.[global_attribute3] = landing.global_attribute3,
      base.[global_attribute4] = landing.global_attribute4,
      base.[global_attribute5] = landing.global_attribute5,
      base.[global_attribute6] = landing.global_attribute6,
      base.[global_attribute7] = landing.global_attribute7,
      base.[global_attribute8] = landing.global_attribute8,
      base.[global_attribute9] = landing.global_attribute9,
      base.[global_attribute10] = landing.global_attribute10,
      base.[global_attribute11] = landing.global_attribute11,
      base.[global_attribute12] = landing.global_attribute12,
      base.[global_attribute13] = landing.global_attribute13,
      base.[global_attribute14] = landing.global_attribute14,
      base.[global_attribute15] = landing.global_attribute15,
      base.[global_attribute16] = landing.global_attribute16,
      base.[global_attribute17] = landing.global_attribute17,
      base.[global_attribute18] = landing.global_attribute18,
      base.[global_attribute19] = landing.global_attribute19,
      base.[global_attribute20] = landing.global_attribute20,
      base.[last_update_date] = landing.last_update_date,
      base.[last_updated_by] = landing.last_updated_by,
      base.[last_update_login] = landing.last_update_login,
      base.[created_by] = landing.created_by,
      base.[creation_date] = landing.creation_date,
      base.[entered_by] = landing.entered_by,
      base.[tp_header_id] = landing.tp_header_id,
      base.[ece_tp_location_code] = landing.ece_tp_location_code,
      base.[object_version_number] = landing.object_version_number,
      base.[geometry] = landing.geometry,
      base.[loc_information18] = landing.loc_information18,
      base.[loc_information19] = landing.loc_information19,
      base.[loc_information20] = landing.loc_information20,
      base.[derived_locale] = landing.derived_locale,
      base.[legal_address_flag] = landing.legal_address_flag,
      base.[timezone_code] = landing.timezone_code,
      base.[tax_name#1] = landing.tax_name#1,
      base.[datalakeinserttime] = landing.datalakeinserttime,
      base.[RowHash] = landing.RowHash,
      base.[BaseCreatedDate] = GETDATE(),
      base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[HR_LOCATIONS_ALL_B0] base
JOIN [HR_Landing].dbo.[HR_LOCATIONS_ALL_B0Landing] landing ON base.location_id = landing.location_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [location_id],
HASHBYTES('MD5',
(SELECT [location_id]
       , [location_code]
       , [business_group_id]
       , [description]
       , [ship_to_location_id]
       , [ship_to_site_flag]
       , [receiving_site_flag]
       , [bill_to_site_flag]
       , [in_organization_flag]
       , [office_site_flag]
       , [designated_receiver_id]
       , [inventory_organization_id]
       , [inactive_date]
       , [style]
       , [address_line_1]
       , [address_line_2]
       , [address_line_3]
       , [town_or_city]
       , [country]
       , [postal_code]
       , [region_1]
       , [region_2]
       , [region_3]
       , [telephone_number_1]
       , [telephone_number_2]
       , [telephone_number_3]
       , [loc_information13]
       , [loc_information14]
       , [loc_information15]
       , [loc_information16]
       , [loc_information17]
       , [attribute_category]
       , [attribute1]
       , [attribute2]
       , [attribute3]
       , [attribute4]
       , [attribute5]
       , [attribute6]
       , [attribute7]
       , [attribute8]
       , [attribute9]
       , [attribute10]
       , [attribute11]
       , [attribute12]
       , [attribute13]
       , [attribute14]
       , [attribute15]
       , [attribute16]
       , [attribute17]
       , [attribute18]
       , [attribute19]
       , [attribute20]
       , [global_attribute_category]
       , [global_attribute1]
       , [global_attribute2]
       , [global_attribute3]
       , [global_attribute4]
       , [global_attribute5]
       , [global_attribute6]
       , [global_attribute7]
       , [global_attribute8]
       , [global_attribute9]
       , [global_attribute10]
       , [global_attribute11]
       , [global_attribute12]
       , [global_attribute13]
       , [global_attribute14]
       , [global_attribute15]
       , [global_attribute16]
       , [global_attribute17]
       , [global_attribute18]
       , [global_attribute19]
       , [global_attribute20]
       , [entered_by]
       , [tp_header_id]
       , [ece_tp_location_code]
       , [object_version_number]
       , [geometry]
       , [loc_information18]
       , [loc_information19]
       , [loc_information20]
       , [derived_locale]
       , [legal_address_flag]
       , [timezone_code]
       , [tax_name#1] FOR XML RAW)) AS RowHash
FROM [dbo].HR_LOCATIONS_ALL_B0Landing l)src
JOIN [dbo].HR_LOCATIONS_ALL_B0Landing TARGET ON src.[location_id] = TARGET.[location_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.HR_LOCATION_EXTRA_INFO_B0 BASE
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.HR_LOCATION_EXTRA_INFO_B0Landing landing
    WHERE base.  [location_extra_info_id]  = landing.  [location_extra_info_id] 
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"
UPDATE base SET 
       base.[location_extra_info_id] = landing.location_extra_info_id
      ,base.[information_type] = landing.information_type
      ,base.[location_id] = landing.location_id
      ,base.[request_id] = landing.request_id
      ,base.[program_application_id] = landing.program_application_id
      ,base.[program_id] = landing.program_id
      ,base.[program_update_date] = landing.program_update_date
      ,base.[lei_attribute_category] = landing.lei_attribute_category
      ,base.[lei_attribute1] = landing.lei_attribute1
      ,base.[lei_attribute2] = landing.lei_attribute2
      ,base.[lei_attribute3] = landing.lei_attribute3
      ,base.[lei_attribute4] = landing.lei_attribute4
      ,base.[lei_attribute5] = landing.lei_attribute5
      ,base.[lei_attribute6] = landing.lei_attribute6
      ,base.[lei_attribute7] = landing.lei_attribute7
      ,base.[lei_attribute8] = landing.lei_attribute8
      ,base.[lei_attribute9] = landing.lei_attribute9
      ,base.[lei_attribute10] = landing.lei_attribute10
      ,base.[lei_attribute11] = landing.lei_attribute11
      ,base.[lei_attribute12] = landing.lei_attribute12
      ,base.[lei_attribute13] = landing.lei_attribute13
      ,base.[lei_attribute14] = landing.lei_attribute14
      ,base.[lei_attribute15] = landing.lei_attribute15
      ,base.[lei_attribute16] = landing.lei_attribute16
      ,base.[lei_attribute17] = landing.lei_attribute17
      ,base.[lei_attribute18] = landing.lei_attribute18
      ,base.[lei_attribute19] = landing.lei_attribute19
      ,base.[lei_attribute20] = landing.lei_attribute20
      ,base.[lei_information_category] = landing.lei_information_category
      ,base.[lei_information1] = landing.lei_information1
      ,base.[lei_information2] = landing.lei_information2
      ,base.[lei_information3] = landing.lei_information3
      ,base.[lei_information4] = landing.lei_information4
      ,base.[lei_information5] = landing.lei_information5
      ,base.[lei_information6] = landing.lei_information6
      ,base.[lei_information7] = landing.lei_information7
      ,base.[lei_information8] = landing.lei_information8
      ,base.[lei_information9] = landing.lei_information9
      ,base.[lei_information10] = landing.lei_information10
      ,base.[lei_information11] = landing.lei_information11
      ,base.[lei_information12] = landing.lei_information12
      ,base.[lei_information13] = landing.lei_information13
      ,base.[lei_information14] = landing.lei_information14
      ,base.[lei_information15] = landing.lei_information15
      ,base.[lei_information16] = landing.lei_information16
      ,base.[lei_information17] = landing.lei_information17
      ,base.[lei_information18] = landing.lei_information18
      ,base.[lei_information19] = landing.lei_information19
      ,base.[lei_information20] = landing.lei_information20
      ,base.[lei_information21] = landing.lei_information21
      ,base.[lei_information22] = landing.lei_information22
      ,base.[lei_information23] = landing.lei_information23
      ,base.[lei_information24] = landing.lei_information24
      ,base.[lei_information25] = landing.lei_information25
      ,base.[lei_information26] = landing.lei_information26
      ,base.[lei_information27] = landing.lei_information27
      ,base.[lei_information28] = landing.lei_information28
      ,base.[lei_information29] = landing.lei_information29
      ,base.[lei_information30] = landing.lei_information30
      ,base.[object_version_number] = landing.object_version_number
      ,base.[last_update_date] = landing.last_update_date
      ,base.[last_updated_by] = landing.last_updated_by
      ,base.[last_update_login] = landing.last_update_login
      ,base.[created_by] = landing.created_by
      ,base.[creation_date] = landing.creation_date
      ,base.datalakeinserttime = landing.datalakeinserttime
      ,base.RowHash = landing.RowHash
      ,base.[BaseCreatedDate] = GETDATE()
      ,base.[BaseCreatedBy] = SUSER_SNAME()
FROM [HR_Base].dbo.[HR_LOCATION_EXTRA_INFO_B0] base
JOIN [HR_Landing].dbo.[HR_LOCATION_EXTRA_INFO_B0Landing] landing 
	ON base.location_extra_info_id = landing.location_extra_info_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target SET 
	target.RowHash = src.RowHash
FROM 
(SELECT 
	location_extra_info_id,
	HASHBYTES('MD5',
(SELECT
	[location_extra_info_id]
      ,[information_type]
      ,[location_id]
      ,[request_id]
      ,[program_application_id]
      ,[program_id]
      ,[program_update_date]
      ,[lei_attribute_category]
      ,[lei_attribute1]
      ,[lei_attribute2]
      ,[lei_attribute3]
      ,[lei_attribute4]
      ,[lei_attribute5]
      ,[lei_attribute6]
      ,[lei_attribute7]
      ,[lei_attribute8]
      ,[lei_attribute9]
      ,[lei_attribute10]
      ,[lei_attribute11]
      ,[lei_attribute12]
      ,[lei_attribute13]
      ,[lei_attribute14]
      ,[lei_attribute15]
      ,[lei_attribute16]
      ,[lei_attribute17]
      ,[lei_attribute18]
      ,[lei_attribute19]
      ,[lei_attribute20]
      ,[lei_information_category]
      ,[lei_information1]
      ,[lei_information2]
      ,[lei_information3]
      ,[lei_information4]
      ,[lei_information5]
      ,[lei_information6]
      ,[lei_information7]
      ,[lei_information8]
      ,[lei_information9]
      ,[lei_information10]
      ,[lei_information11]
      ,[lei_information12]
      ,[lei_information13]
      ,[lei_information14]
      ,[lei_information15]
      ,[lei_information16]
      ,[lei_information17]
      ,[lei_information18]
      ,[lei_information19]
      ,[lei_information20]
      ,[lei_information21]
      ,[lei_information22]
      ,[lei_information23]
      ,[lei_information24]
      ,[lei_information25]
      ,[lei_information26]
      ,[lei_information27]
      ,[lei_information28]
      ,[lei_information29]
      ,[lei_information30]
      ,[object_version_number]
	FOR XML RAW)) AS RowHash
FROM dbo.HR_LOCATION_EXTRA_INFO_B0Landing l) src
JOIN dbo.HR_LOCATION_EXTRA_INFO_B0Landing target ON src.[location_extra_info_id] = target.[location_extra_info_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)

BEGIN
INSERT INTO dbo.ETLBatchControl (TableName) VALUES ( ? )
END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.PayGradeBN);

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));

SELECT @LastProcessedDate AS LastProcessedDate;"
"UPDATE pgbn 
SET pgbn.Deleted = 'Y',
pgbn.BaseModifiedDate = GETDATE(),
pgbn.UpdateAuditID = ?
FROM dbo.PayGradeBN pgbn
WHERE NOT EXISTS
(
    SELECT 1
    FROM dbo.vPayGradeBN vpgbn
    WHERE pgbn.GradeID = vpgbn.GradeID 
AND pgbn.EffectiveStartDate = vpgbn.EffectiveStartDate 
)
AND pgbn.Deleted IS NULL;

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE dbo.PayGradeBN 
SET RowStatus = 'H'
, BaseModifiedDate = GETDATE()
, UpdateAuditID = ?
WHERE CAST(BaseEndDate AS DATE)< CAST(GETDATE() AS DATE)
 AND RowStatus <> 'H'

SELECT @@ROWCOUNT + ? AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PAY_COST_ALLOCATION_KEYFLEX_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PAY_COST_ALLOCATION_KEYFLEX_B0Landing] landing
    WHERE base.cost_allocation_keyflex_id = landing.cost_allocation_keyflex_id
);

SELECT @@ROWCOUNT AS DeleteCount;"
"UPDATE base SET 
	base.concatenated_segments = landing.concatenated_segments,
	base.id_flex_num = landing.id_flex_num,
	base.summary_flag = landing.summary_flag,
	base.enabled_flag = landing.enabled_flag,
	base.start_date_active = landing.start_date_active,
	base.end_date_active = landing.end_date_active,
	base.segment1 = landing.segment1,
	base.segment2 = landing.segment2,
	base.segment3 = landing.segment3,
	base.segment4 = landing.segment4,
	base.segment5 = landing.segment5,
	base.segment6 = landing.segment6,
	base.segment7 = landing.segment7,
	base.segment8 = landing.segment8,
	base.segment9 = landing.segment9,
	base.segment10 = landing.segment10,
	base.segment11 = landing.segment11,
	base.segment12 = landing.segment12,
	base.segment13 = landing.segment13,
	base.segment14 = landing.segment14,
	base.segment15 = landing.segment15,
	base.segment16 = landing.segment16,
	base.segment17 = landing.segment17,
	base.segment18 = landing.segment18,
	base.segment19 = landing.segment19,
	base.segment20 = landing.segment20,
	base.segment21 = landing.segment21,
	base.segment22 = landing.segment22,
	base.segment23 = landing.segment23,
	base.segment24 = landing.segment24,
	base.segment25 = landing.segment25,
	base.segment26 = landing.segment26,
	base.segment27 = landing.segment27,
	base.segment28 = landing.segment28,
	base.segment29 = landing.segment29,
	base.segment30 = landing.segment30,
	base.last_update_date = landing.last_update_date,
	base.last_updated_by = landing.last_updated_by,
	base.last_update_login = landing.last_update_login,
	base.created_by = landing.created_by,
	base.creation_date = landing.creation_date,
	base.datalakeinserttime = landing.datalakeinserttime,
	base.[RowHash] = landing.RowHash,
	base.[BaseCreatedDate] = GETDATE(),
	base.[BaseCreatedBy] = SUSER_SNAME()
FROM [HR_Base].dbo.[PAY_COST_ALLOCATION_KEYFLEX_B0] base
JOIN [HR_Landing].dbo.[PAY_COST_ALLOCATION_KEYFLEX_B0Landing] landing 
	ON base.cost_allocation_keyflex_id = landing.cost_allocation_keyflex_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target SET 
	target.RowHash = src.RowHash
FROM 
(SELECT 
	cost_allocation_keyflex_id,
	HASHBYTES('MD5',
(SELECT
	concatenated_segments,
	id_flex_num,
	summary_flag,
	enabled_flag,
	start_date_active,
	end_date_active,
	segment1,
	segment2,
	segment3,
	segment4,
	segment5,
	segment6,
	segment7,
	segment8,
	segment9,
	segment10,
	segment11,
	segment12,
	segment13,
	segment14,
	segment15,
	segment16,
	segment17,
	segment18,
	segment19,
	segment20,
	segment21,
	segment22,
	segment23,
	segment24,
	segment25,
	segment26,
	segment27,
	segment28,
	segment29,
	segment30
	FOR XML RAW)) AS RowHash
FROM dbo.PAY_COST_ALLOCATION_KEYFLEX_B0Landing l) src
JOIN dbo.PAY_COST_ALLOCATION_KEYFLEX_B0Landing target ON src.cost_allocation_keyflex_id = target.cost_allocation_keyflex_id

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PAY_GRADE_RULES_F_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PAY_GRADE_RULES_F_B0Landing] landing
    WHERE base.grade_rule_id = landing.grade_rule_id   AND base.effective_start_date = landing.effective_start_date
            AND base.effective_end_date = landing.effective_end_date
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.[grade_rule_id] = landing.[grade_rule_id],
      base.[effective_start_date] = landing.effective_start_date,
      base.[effective_end_date] = landing.effective_end_date,
      base.[business_group_id] = landing.business_group_id,
      base.[rate_id] = landing.rate_id,
      base.[grade_or_spinal_point_id] = landing.grade_or_spinal_point_id,
      base.[rate_type] = landing.rate_type,
      base.[maximum] = landing.maximum,
      base.[mid_value] = landing.mid_value,
      base.[minimum] = landing.minimum,
      base.[sequence] = landing.sequence,
      base.[value] = landing.value,
      base.[request_id] = landing.request_id,
      base.[program_application_id] = landing.program_application_id,
      base.[program_id] = landing.program_id,
      base.[program_update_date] = landing.program_update_date,
      base.[last_update_date] = landing.last_update_date,
      base.[last_updated_by] = landing.last_updated_by,
      base.[last_update_login] = landing.last_update_login,
      base.[created_by] = landing.created_by,
      base.[creation_date] = landing.creation_date,
      base.[object_version_number] = landing.object_version_number,
      base.[currency_code] = landing.currency_code,
      base.[datalakeinserttime] = landing.datalakeinserttime,
      base.[RowHash] = landing.RowHash,
      base.[BaseCreatedDate] = GETDATE(),
      base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[PAY_GRADE_RULES_F_B0] base
JOIN [HR_Landing].dbo.[PAY_GRADE_RULES_F_B0Landing] landing ON base.grade_rule_id = landing.grade_rule_id AND  base.effective_start_date = landing.effective_start_date AND base.effective_end_date = landing.effective_end_date
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [grade_rule_id],[effective_start_date],
	[effective_end_date],
HASHBYTES('MD5',
(SELECT [grade_rule_id],
	[effective_start_date],
	[effective_end_date],
	[business_group_id],
	[rate_id],
	[grade_or_spinal_point_id],
	[rate_type],
	[maximum],
	[mid_value],
	[minimum],
	[sequence],
	[value],
	[request_id],
	[program_application_id],
	[program_id],
	[program_update_date],
	[object_version_number],
	[currency_code] FOR XML RAW)) AS RowHash
FROM [dbo].PAY_GRADE_RULES_F_B0Landing l)src
JOIN [dbo].PAY_GRADE_RULES_F_B0Landing TARGET ON src.[grade_rule_id] = TARGET.[grade_rule_id]
AND src.[effective_start_date] = target.[effective_start_date] AND src.[effective_end_date] = target.[effective_end_date]

SELECT @@ROWCOUNT AS UpdateCount;"
"
DELETE FROM base
FROM dbo.[PAY_PEOPLE_GROUPS_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PAY_PEOPLE_GROUPS_B0Landing] landing
    WHERE base.people_group_id = landing.people_group_id   
);

SELECT @@ROWCOUNT AS DeleteCount ;
"
"UPDATE base
   SET base.[people_group_id] = landing.people_group_id
      ,base.[group_name] = landing.group_name
      ,base.[id_flex_num] = landing.id_flex_num
      ,base.[summary_flag] = landing.summary_flag
      ,base.[enabled_flag] = landing.enabled_flag
      ,base.[start_date_active] = landing.start_date_active
      ,base.[end_date_active] = landing.end_date_active
      ,base.[segment1] = landing.segment1
      ,base.[segment2] = landing.segment2
      ,base.[segment3] = landing.segment3
      ,base.[segment4] = landing.segment4
      ,base.[segment5] = landing.segment5
      ,base.[segment6] = landing.segment6
      ,base.[segment7] = landing.segment7
      ,base.[segment8] = landing.segment8
      ,base.[segment9] = landing.segment9
      ,base.[segment10] = landing.segment10
      ,base.[segment11] = landing.segment11
      ,base.[segment12] = landing.segment12
      ,base.[segment13] = landing.segment13
      ,base.[segment14] = landing.segment14
      ,base.[segment15] = landing.segment15
      ,base.[segment16] = landing.segment16
      ,base.[segment17] = landing.segment17
      ,base.[segment18] = landing.segment18
      ,base.[segment19] = landing.segment19
      ,base.[segment20] = landing.segment20
      ,base.[segment21] = landing.segment21
      ,base.[segment22] = landing.segment22
      ,base.[segment23] = landing.segment23
      ,base.[segment24] = landing.segment24
      ,base.[segment25] = landing.segment25
      ,base.[segment26] = landing.segment26
      ,base.[segment27] = landing.segment27
      ,base.[segment28] = landing.segment28
      ,base.[segment29] = landing.segment29
      ,base.[segment30] = landing.segment30
      ,base.[last_update_date] = landing.last_update_date
      ,base.[last_updated_by] = landing.last_updated_by
      ,base.[creation_date] = landing.creation_date
      ,base.[created_by] = landing.created_by
      ,base.[last_update_login] = landing.last_update_login
      ,base.[datalakeinserttime] = landing.datalakeinserttime
      ,base.[RowHash] = landing.RowHash
      ,base.[BaseCreatedDate] = GETDATE()
      ,base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[PAY_PEOPLE_GROUPS_B0] base
JOIN [HR_Landing].dbo.[PAY_PEOPLE_GROUPS_B0Landing] landing ON base.people_group_id = landing.people_group_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [people_group_id],
HASHBYTES('MD5',
(SELECT  [people_group_id]
      ,[group_name]
      ,[id_flex_num]
      ,[summary_flag]
      ,[enabled_flag]
      ,[start_date_active]
      ,[end_date_active]
      ,[segment1]
      ,[segment2]
      ,[segment3]
      ,[segment4]
      ,[segment5]
      ,[segment6]
      ,[segment7]
      ,[segment8]
      ,[segment9]
      ,[segment10]
      ,[segment11]
      ,[segment12]
      ,[segment13]
      ,[segment14]
      ,[segment15]
      ,[segment16]
      ,[segment17]
      ,[segment18]
      ,[segment19]
      ,[segment20]
      ,[segment21]
      ,[segment22]
      ,[segment23]
      ,[segment24]
      ,[segment25]
      ,[segment26]
      ,[segment27]
      ,[segment28]
      ,[segment29]
      ,[segment30]
       FOR XML RAW)) AS RowHash
FROM [dbo].PAY_PEOPLE_GROUPS_B0Landing l)src
JOIN [dbo].PAY_PEOPLE_GROUPS_B0Landing TARGET ON src.[people_group_id] = TARGET.[people_group_id]


SELECT @@ROWCOUNT AS UpdateCount;"
"

declare @AuditId int = ?
declare @PackageName varchar(35) = ?
declare @ExecutionInstanceGuid varchar(200) = ?


-----------------------------------------------------------------------------------------------------------
--Variables
declare @MergeOutput table (
Action_Out VARCHAR(20),
inserted_PerPeriodsID varchar(30),
inserted_Deleted varchar(1),
inserted_InsertAuditId bigint,
inserted_UpdateAuditId bigint,
deleted_PerPeriodsID  varchar(30),
deleted_Deleted  varchar(1),
deleted_InsertAuditId bigint,
deleted_UpdateAuditId bigint);


declare @vInsertedCount  Int
declare @vUpdateCount  Int
declare @vDeleteCount  Int
declare @vSourceCount  Int
declare @vRejectCount  Int
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
--2.) SQL - Get the LastProcessed Date

declare @TableName varchar(30) = 'PerPeriodsB10'
declare @LastProcessedDate datetime
declare @BaseCreatedDate datetime


IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = @TableName)
	BEGIN
		INSERT INTO dbo.ETLBatchControl (TableName) VALUES (@TableName)
	END

UPDATE dbo.ETLBatchControl SET [Status] = 'In Process' WHERE TableName = @TableName

SELECT @LastProcessedDate = LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = @TableName
SELECT @BaseCreatedDate = MAX(BaseCreatedDate) FROM dbo.PerPeriodsB10

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
	BEGIN
		SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));
	END



------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
--3.) Merge into PerPeriodsB10


;with  PP as
(--PPoS
select 
'F' + cast(period_of_service_id as varchar(12)) as 'PerPeriodsID', --8
person_id as person_id,  --9
date_start,  --10
adjusted_svc_date,  --11
actual_termination_date,  --12
leaving_reason,  --13
attribute2 as 'eligible_for_rehire_ind',  --14
attribute3 as 'two_week_notice_ind',  --15
attribute5 as 'regrettable_termination_ind',  --16
attribute4 as 'termination_comments',  --17
notified_termination_date as 'notified_termination_date',  --18
attribute1 as 'last_worked_date'  --19
--CAST(HASHBYTES('MD5', (SELECT t.FlexValueSetName, t.FlexValue, t.[Description] FOR XML RAW)) AS BINARY(16)) AS RowHash
 FROM [HR_Base].[dbo].[PER_PERIODS_OF_SERVICE_B0]

 
 union all
 

--PPoP
 select
'C' + cast(period_of_placement_id as varchar(12)) as 'PerPeriodsID',  --8
person_id,  --9
date_start,  --10
date_start as 'adjusted_svc_date',  --11
actual_termination_date,  --12
termination_reason as 'leaving_reason',  --13
attribute1 as 'eligible_for_rehire_ind',  --14
'N/A' as 'two_week_notice_ind',  --15
'N/A' as 'regrettable_termination_ind',  --16
'N/A' as 'termination_comments',  --17
null as 'notified_termination_date',  --18
'N/A' as 'last_worked_date'  --19
--CAST(HASHBYTES('MD5', (SELECT t.FlexValueSetName, t.FlexValue, t.[Description] FOR XML RAW)) AS BINARY(16)) AS RowHash
FROM [HR_Base].[dbo].[PER_PERIODS_OF_PLACEMENT_B0]


)


Merge into [dbo].[PerPeriodsB10]  AS TARGET
using PP  AS SOURCE  
	on TARGET.PerPeriodsID = SOURCE.PerPeriodsID

WHEN NOT MATCHED BY TARGET 
THEN INSERT 
([PerPeriodsID]
,[PersonId]
,[DateStart]
,[AdjustedSvcDate]
,[ActualTerminationDate]
,[LeavingReason]
,[EligibleForRehireInd]
,[TwoWeekNoticeInd]
,[RegrettableTerminationInd]
,[TerminationComments]
,[NotifiedTerminationDate]
,[LastWorkedDate]
--AUdit columns
,[Deleted]
,[BaseCreatedDate]
,[InsertAuditID]
,[BaseModifiedDate]
,[UpdateAuditID]
)
VALUES 
(SOURCE.[PerPeriodsID]
,SOURCE.[person_id]
,SOURCE.[date_start]
,SOURCE.[adjusted_svc_date]
,SOURCE.[actual_termination_date]
,SOURCE.[leaving_reason]
,SOURCE.[eligible_for_rehire_ind]
,SOURCE.[two_week_notice_ind]
,SOURCE.[regrettable_termination_ind]
,SOURCE.[termination_comments]
,SOURCE.[notified_termination_date]
,SOURCE.[last_worked_date]
-- Audit columns
,Null		   --[Deleted]
,getdate() --[BaseCreatedDate]
,@AuditId  --InsertAuditID 
,getdate()     --[BaseModifiedDate]
,null      --UpdateAuditId

)

----------------------------------------------------------------------------------------------------------
WHEN MATCHED 
and( TARGET.[PersonId] <> SOURCE.person_id 
	or ISNULL(TARGET.[DateStart],'') <> ISNULL(SOURCE.date_start,'')
	or ISNULL(TARGET.[AdjustedSvcDate],'') <> ISNULL( SOURCE.adjusted_svc_date,'')
	or ISNULL(TARGET.[ActualTerminationDate],'') <> ISNULL(SOURCE.actual_termination_date,'')
	or ISNULL(TARGET.[LeavingReason],'') <> ISNULL(SOURCE.leaving_reason,'')
	or ISNULL(TARGET.[EligibleForRehireInd],'') <> ISNULL(SOURCE.eligible_for_rehire_ind,'')
	or ISNULL(TARGET.[TwoWeekNoticeInd],'') <> ISNULL(SOURCE.two_week_notice_ind,'')
	or ISNULL(TARGET.[RegrettableTerminationInd],'') <> ISNULL(SOURCE.regrettable_termination_ind,'')
	or ISNULL(TARGET.[TerminationComments],'') <> ISNULL(SOURCE.termination_comments,'')
	or ISNULL(TARGET.[NotifiedTerminationDate],'') <> ISNULL(SOURCE.notified_termination_date,'')
	or ISNULL(TARGET.[LastWorkedDate],'') <> ISNULL(SOURCE.last_worked_date,''))
THEN UPDATE SET
TARGET.[PersonId] = SOURCE.person_id 
,TARGET.[DateStart] = SOURCE.date_start
,TARGET.[AdjustedSvcDate] = SOURCE.adjusted_svc_date
,TARGET.[ActualTerminationDate] = SOURCE.actual_termination_date
,TARGET.[LeavingReason] = SOURCE.leaving_reason
,TARGET.[EligibleForRehireInd] = SOURCE.eligible_for_rehire_ind
,TARGET.[TwoWeekNoticeInd] = SOURCE.two_week_notice_ind
,TARGET.[RegrettableTerminationInd] = SOURCE.regrettable_termination_ind
,TARGET.[TerminationComments] = SOURCE.termination_comments
,TARGET.[NotifiedTerminationDate] = SOURCE.notified_termination_date
,TARGET.[LastWorkedDate] = SOURCE.last_worked_date
-- Audit columns
--,TARGET.[Deleted] = 'N'
--,TARGET.[BaseCreatedDate]
--,TARGET.[InsertAuditID] = @AuditId
,TARGET.[BaseModifiedDate] = getdate() 
,TARGET.[UpdateAuditID] = @AuditId



----------------------------------------------------------------------------------------------------

--Soft DELETE
WHEN NOT MATCHED BY SOURCE 
and Target.Deleted is null
THEN UPDATE SET
TARGET.[Deleted] = 'Y'
--,TARGET.[BaseCreatedDate] 
--,TARGET.[InsertAuditID] = @AuditId --@InsertAuditID 
,TARGET.[BaseModifiedDate] = getdate()
,TARGET.UpdateAuditId =  @AuditId

---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------

OUTPUT $action,
inserted.PerPeriodsID as 'inserted_PerPeriodsID',
inserted.Deleted as 'inserted_Deleted',
inserted.InsertAuditId as 'inserted_InsertAuditId',
inserted.UpdateAuditId as 'inserted_UpdateAuditId',
deleted.PerPeriodsID as 'deleted_PerPeriodsID',
deleted.Deleted as 'deleted_Deleted',
deleted.InsertAuditId as 'deleted_InsertAuditId',
deleted.UpdateAuditId as 'deleted_UpdateAuditId'
INTO @MergeOutput;


--select * from @MergeOutput



---------------------------------------------------------------------------
------SQL - Update LastProcessed Date
UPDATE dbo.ETLBatchControl SET
	LastProcessedDate = GETDATE(),
	[Status] = 'Success'
WHERE
	Tablename = 'PerPeriodsB10'

--------------------------------------------------------------------------------------
--------SQL - End Landing Audit Log
select @vInsertedCount = count(*) 
from @MergeOutput
where Action_Out = 'INSERT'
and inserted_InsertAuditId > 0



select @vDeleteCount = count(*) 
from @MergeOutput
where Action_Out = 'UPDATE'
and inserted_Deleted = 'Y'

	

select @vUpdateCount = count(*) 
from @MergeOutput
where Action_Out = 'UPDATE'
and inserted_Deleted is null


select @vSourceCount = isnull(@vInsertedCount + @vDeleteCount + @vUpdateCount,0)



EXECUTE [dbo].[spEndAuditLog] 
@vInsertedCount, --@InsertCount
@vUpdateCount,   --@UpdateCount
@vDeleteCount,   --@DeleteCount
@vSourceCount,   --@SourceCount
0,			     --@RejectCount
@AuditId		 --@AuditId"
"DECLARE @TableName varchar(30) = 'PerPeriodsB10'
DECLARE @LastProcessedDate datetime
DECLARE @BaseCreatedDate datetime


IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = @TableName)
	BEGIN
		INSERT INTO dbo.ETLBatchControl (TableName) VALUES (@TableName)
	END

UPDATE dbo.ETLBatchControl SET [Status] = 'In Process' WHERE TableName = @TableName

SELECT @LastProcessedDate = LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = @TableName
SELECT @BaseCreatedDate = MAX(BaseCreatedDate) FROM dbo.FlexValuesLookupB10

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
	BEGIN
		SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));
	END

SELECT @LastProcessedDate AS LastProcessedDate;"
TRUNCATE TABLE dbo.PersonB1
"DELETE p
FROM dbo.PersonBN p 
JOIN (SELECT *
FROM HR_Landing.dbo.PersonB1 vpbn
WHERE EXISTS
(
    SELECT 1
    FROM dbo.PersonBN pbn
    WHERE pbn.PersonID = vpbn.PersonID
 AND pbn.EffectiveStartDate = vpbn.EffectiveStartDate
    AND pbn.BaseEffectiveDate = vpbn.BaseEffectiveDate
)
)A ON p.PersonID = a.PersonID AND p.EffectiveStartDate = a.EffectiveStartDate AND p.BaseEffectiveDate = a.BaseEffectiveDate

SELECT @@ROWCOUNT AS DeleteCount ;"
"DELETE pbn
FROM dbo.PersonBN pbn
WHERE NOT EXISTS
(
    SELECT 1
    FROM dbo.vPersonBN vpbn
    WHERE pbn.PersonID = vpbn.PersonID
	AND pbn.EffectiveStartDate = vpbn.EffectiveStartDate
    AND pbn.BaseEffectiveDate = vpbn.BaseEffectiveDate
)

SELECT @@ROWCOUNT + ? AS DeleteCount ;"
"WITH Updates AS 
(
SELECT * 
FROM dbo.vPersonBN vpbn
WHERE EXISTS
(
    SELECT 1
    FROM dbo.PersonBN pbn
    WHERE pbn.PersonID = vpbn.PersonID
	AND pbn.EffectiveStartDate = vpbn.EffectiveStartDate
    AND pbn.BaseEffectiveDate = vpbn.BaseEffectiveDate
	AND pbn.BaseEndDate = vpbn.BaseEndDate
	AND pbn.RowHash <> vpbn.RowHash
)
)

UPDATE [dbo].[PersonBN]
   SET [PersonID] = u.PersonID
      ,[PersonType] = u.PersonType
      ,[PersonName] = u.PersonName
      ,[Title] = u.Title
      ,[PersonFirstName] = u.PersonFirstName
      ,[PersonMiddleName] = u.PersonMiddleName
      ,[PersonLastName] = u.PersonLastName
      ,[PersonSuffix] = u.PersonSuffix
      ,[PersonPreferredName] = u.PersonPreferredName
      ,[SocialSecurityNumber] = u.SocialSecurityNumber
      ,[BirthDate] = u.BirthDate
      ,[EmployeeNumber] = u.EmployeeNumber
      ,[SupervisorNumber] = u.SupervisorNumber
      ,[BonusStartDate] = u.BonusStartDate
      ,[BonusEndDate] = u.BonusEndDate
      ,[BonusPlanName] = u.BonusPlanName
      ,[BonusTarget] = u.BonusTarget
      ,[MaritalStatus] = u.MaritalStatus
      ,[Gender] = u.Gender
      ,[Ethnicity] = u.Ethnicity
      ,[VeteranStatus] = u.VeteranStatus
      ,[HomeAddressLine1] = u.HomeAddressLine1
      ,[HomeAddressLine2] = u.HomeAddressLine2
      ,[HomeCity] = u.HomeCity
      ,[HomeState] = u.HomeState
      ,[HomeZipCode] = u.HomeZipCode
      ,[HomeCounty] = u.HomeCounty
      ,[EmailAddressKinderCare] = u.EmailAddressKinderCare
      ,[EmailAddressPersonal] = u.EmailAddressPersonal
      ,[PhoneNumberKindercareWork] = u.PhoneNumberKindercareWork
      ,[PhoneNumberKinderCareMobile] = u.PhoneNumberKinderCareMobile
      ,[PhoneNumberPersonalHome] = u.PhoneNumberPersonalHome
      ,[PhoneNumberPersonalMobile] = u.PhoneNumberPersonalMobile
      ,[OriginalHireDate] = u.OriginalHireDate
      ,[StartDate] = u.StartDate
      ,[TerminationDate] = u.TerminationDate
      ,[AdjustedServiceDate] = u.AdjustedServiceDate
      ,[DeathDate] = u.DeathDate
      ,[PreviousEmployeeNumber] = u.PreviousEmployeeNumber
      ,[PreviousEmployeeSource] = u.PreviousEmployeeSource
      ,[WOTCNotifiedIndicator] = u.WOTCNotifiedIndicator
      ,[WOTCNumber] = u.WOTCNumber
      ,[CheckSendToLocationID] = u.CheckSendToLocationID
      ,[VestingDate] = u.VestingDate
      ,[MealPeriodWaived] = u.MealPeriodWaived
      ,[AlaskaWaiveDailyOTIndicator] = u.AlaskaWaiveDailyOTIndicator
      ,[PersonAcquisitionDate] = u.PersonAcquisitionDate
      ,[TaleoCandidateID] = u.TaleoCandidateID
      ,[ContingentWorkerEmployeeID] = u.ContingentWorkerEmployeeID
      ,[ContingentWorkerEmployeeNumber] = u.ContingentWorkerEmployeeNumber
      ,[I9ReceivedIndicator] = u.I9ReceivedIndicator
      ,[WorkSchedule] = u.WorkSchedule
      ,[EmployeePerformanceRating] = u.EmployeePerformanceRating
      ,[PerformanceReviewDate] = u.PerformanceReviewDate
      ,[EffectiveStartDate] = u.EffectiveStartDate
      ,[ExpirationDate] = u.ExpirationDate
      ,[BaseEffectiveDate] = u.BaseEffectiveDate
      ,[BaseEndDate] = u.BaseEndDate
      ,[BaseModifiedDate] = GETDATE()
      ,[UpdateAuditID] = ?
      ,[RowHash] = u.RowHash
FROM dbo.PersonBN p
JOIN Updates u ON p.PersonID = u.PersonID AND p.EffectiveStartDate = u.EffectiveStartDate 
		AND p.BaseEffectiveDate = u.BaseEffectiveDate AND p.BaseEndDate = u.BaseEndDate

SELECT @@ROWCOUNT  AS UpdateCount;"
"UPDATE dbo.PersonBN 
SET RowStatus = 'H'
, BaseModifiedDate = GETDATE()
, UpdateAuditID = ?
WHERE
 CAST(BaseEndDate AS DATE)< CAST(GETDATE() AS DATE) 
 AND RowStatus <> 'H'

SELECT @@ROWCOUNT + ? AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_ADDRESSES_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_ADDRESSES_B0Landing] landing
    WHERE base.address_id= landing.address_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.address_id = landing.address_id
      ,base.business_group_id = landing.business_group_id
      ,base.person_id = landing.person_id
      ,base.date_from = landing.date_from
      ,base.primary_flag = landing.primary_flag
      ,base.style = landing.style
      ,base.address_line1 = landing.address_line1
      ,base.address_line2 = landing.address_line2
      ,base.address_line3 = landing.address_line3
      ,base.address_type = landing.address_type
      ,base.country = landing.country
      ,base.date_to = landing.date_to
      ,base.postal_code = landing.postal_code
      ,base.region_1 = landing.region_1
      ,base.region_2 = landing.region_2
      ,base.region_3 = landing.region_3
      ,base.telephone_number_1 = landing.telephone_number_1
      ,base.telephone_number_2 = landing.telephone_number_2
      ,base.telephone_number_3 = landing.telephone_number_3
      ,base.town_or_city = landing.town_or_city
      ,base.request_id = landing.request_id
      ,base.program_application_id = landing.program_application_id
      ,base.program_id = landing.program_id
      ,base.program_update_date = landing.program_update_date
      ,base.addr_attribute_category = landing.addr_attribute_category
      ,base.addr_attribute1 = landing.addr_attribute1
      ,base.addr_attribute2 = landing.addr_attribute2
      ,base.addr_attribute3 = landing.addr_attribute3
      ,base.addr_attribute4 = landing.addr_attribute4
      ,base.addr_attribute5 = landing.addr_attribute5
      ,base.addr_attribute6 = landing.addr_attribute6
      ,base.addr_attribute7 = landing.addr_attribute7
      ,base.addr_attribute8 = landing.addr_attribute8
      ,base.addr_attribute9 = landing.addr_attribute9
      ,base.addr_attribute10 = landing.addr_attribute10
      ,base.addr_attribute11 = landing.addr_attribute11
      ,base.addr_attribute12 = landing.addr_attribute12
      ,base.addr_attribute13 = landing.addr_attribute13
      ,base.addr_attribute14 = landing.addr_attribute14
      ,base.addr_attribute15 = landing.addr_attribute15
      ,base.addr_attribute16 = landing.addr_attribute16
      ,base.addr_attribute17 = landing.addr_attribute17
      ,base.addr_attribute18 = landing.addr_attribute18
      ,base.addr_attribute19 = landing.addr_attribute19
      ,base.addr_attribute20 = landing.addr_attribute20
      ,base.last_update_date = landing.last_update_date
      ,base.last_updated_by = landing.last_updated_by
      ,base.last_update_login = landing.last_update_login
      ,base.created_by = landing.created_by
      ,base.creation_date = landing.creation_date
      ,base.object_version_number = landing.object_version_number
      ,base.add_information13 = landing.add_information13
      ,base.add_information14 = landing.add_information14
      ,base.add_information15 = landing.add_information15
      ,base.add_information16 = landing.add_information16
      ,base.add_information17 = landing.add_information17
      ,base.add_information18 = landing.add_information18
      ,base.add_information19 = landing.add_information19
      ,base.add_information20 = landing.add_information20
      ,base.party_id = landing.party_id
      ,base.derived_locale = landing.derived_locale
      ,base.geometry = landing.geometry
      ,base.comments = landing.comments
      ,base.datalakeinserttime= landing.datalakeinserttime
      ,base.RowHash = landing.RowHash
      ,base.BaseCreatedDate = GETDATE()
      ,base.BaseCreatedBy = suser_sname()
FROM [HR_Base].dbo.[PER_ADDRESSES_B0] base
JOIN [HR_Landing].dbo.[PER_ADDRESSES_B0Landing] landing ON base.address_id = landing.address_id
WHERE base.RowHash != landing.RowHash;


SELECT @@ROWCOUNT AS UpdateCount;
"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [address_id],
HASHBYTES('MD5',
(SELECT [address_id]
      ,[business_group_id]
      ,[person_id]
      ,[date_from]
      ,[primary_flag]
      ,[style]
      ,[address_line1]
      ,[address_line2]
      ,[address_line3]
      ,[address_type]
      ,[country]
      ,[date_to]
      ,[postal_code]
      ,[region_1]
      ,[region_2]
      ,[region_3]
      ,[telephone_number_1]
      ,[telephone_number_2]
      ,[telephone_number_3]
      ,[town_or_city]
      ,[request_id]
      ,[program_application_id]
      ,[program_id]
      ,[program_update_date]
      ,[addr_attribute_category]
      ,[addr_attribute1]
      ,[addr_attribute2]
      ,[addr_attribute3]
      ,[addr_attribute4]
      ,[addr_attribute5]
      ,[addr_attribute6]
      ,[addr_attribute7]
      ,[addr_attribute8]
      ,[addr_attribute9]
      ,[addr_attribute10]
      ,[addr_attribute11]
      ,[addr_attribute12]
      ,[addr_attribute13]
      ,[addr_attribute14]
      ,[addr_attribute15]
      ,[addr_attribute16]
      ,[addr_attribute17]
      ,[addr_attribute18]
      ,[addr_attribute19]
      ,[addr_attribute20]
      ,[object_version_number]
      ,[add_information13]
      ,[add_information14]
      ,[add_information15]
      ,[add_information16]
      ,[add_information17]
      ,[add_information18]
      ,[add_information19]
      ,[add_information20]
      ,[party_id]
      ,[derived_locale]
      ,[geometry]
      ,[comments]
       FOR XML RAW)) AS RowHash
FROM [dbo].PER_ADDRESSES_B0Landing l)src
JOIN [dbo].PER_ADDRESSES_B0Landing TARGET ON src.[address_id] = TARGET.[address_id]


SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_ALL_ASSIGNMENTS_F_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_ALL_ASSIGNMENTS_F_B0PreLanding] landing
    WHERE base.assignment_id = landing.assignment_id
   AND  base.effective_start_date = landing.effective_start_date
   AND base.effective_end_date = landing.effective_end_date
);

SELECT @@ROWCOUNT AS DeleteCount ;
"
"UPDATE base
   SET base.assignment_id = landing.assignment_id
      ,base.effective_start_date = landing.effective_start_date
      ,base.effective_end_date = landing.effective_end_date
      ,base.business_group_id = landing.business_group_id
      ,base.recruiter_id = landing.recruiter_id
      ,base.grade_id = landing.grade_id
      ,base.position_id = landing.position_id
      ,base.job_id = landing.job_id
      ,base.assignment_status_type_id = landing.assignment_status_type_id
      ,base.payroll_id = landing.payroll_id
      ,base.location_id = landing.location_id
      ,base.person_referred_by_id = landing.person_referred_by_id
      ,base.supervisor_id = landing.supervisor_id
      ,base.special_ceiling_step_id = landing.special_ceiling_step_id
      ,base.person_id = landing.person_id
      ,base.recruitment_activity_id = landing.recruitment_activity_id
      ,base.source_organization_id = landing.source_organization_id
      ,base.organization_id = landing.organization_id
      ,base.people_group_id = landing.people_group_id
      ,base.soft_coding_keyflex_id = landing.soft_coding_keyflex_id
      ,base.vacancy_id = landing.vacancy_id
      ,base.pay_basis_id = landing.pay_basis_id
      ,base.assignment_sequence = landing.assignment_sequence
      ,base.assignment_type = landing.assignment_type
      ,base.primary_flag = landing.primary_flag
      ,base.application_id = landing.application_id
      ,base.assignment_number = landing.assignment_number
      ,base.change_reason = landing.change_reason
      ,base.comment_id = landing.comment_id
      ,base.date_probation_end = landing.date_probation_end
      ,base.default_code_comb_id = landing.default_code_comb_id
      ,base.employment_category = landing.employment_category
      ,base.frequency = landing.frequency
      ,base.internal_address_line = landing.internal_address_line
      ,base.manager_flag = landing.manager_flag
      ,base.normal_hours = landing.normal_hours
      ,base.perf_review_period = landing.perf_review_period
      ,base.perf_review_period_frequency = landing.perf_review_period_frequency
      ,base.period_of_service_id = landing.period_of_service_id
      ,base.probation_period = landing.probation_period
      ,base.probation_unit = landing.probation_unit
      ,base.sal_review_period = landing.sal_review_period
      ,base.sal_review_period_frequency = landing.sal_review_period_frequency
      ,base.set_of_books_id = landing.set_of_books_id
      ,base.source_type = landing.source_type
      ,base.time_normal_finish = landing.time_normal_finish
      ,base.time_normal_start = landing.time_normal_start
      ,base.bargaining_unit_code = landing.bargaining_unit_code
      ,base.labour_union_member_flag = landing.labour_union_member_flag
      ,base.hourly_salaried_code = landing.hourly_salaried_code
      ,base.contract_id = landing.contract_id
      ,base.collective_agreement_id = landing.collective_agreement_id
      ,base.cagr_id_flex_num = landing.cagr_id_flex_num
      ,base.cagr_grade_def_id = landing.cagr_grade_def_id
      ,base.establishment_id = landing.establishment_id
      ,base.request_id = landing.request_id
      ,base.program_application_id = landing.program_application_id
      ,base.program_id = landing.program_id
      ,base.program_update_date = landing.program_update_date
      ,base.ass_attribute_category = landing.ass_attribute_category
      ,base.ass_attribute1 = landing.ass_attribute1
      ,base.ass_attribute2 = landing.ass_attribute2
      ,base.ass_attribute3 = landing.ass_attribute3
      ,base.ass_attribute4 = landing.ass_attribute4
      ,base.ass_attribute5 = landing.ass_attribute5
      ,base.ass_attribute6 = landing.ass_attribute6
      ,base.ass_attribute7 = landing.ass_attribute7
      ,base.ass_attribute8 = landing.ass_attribute8
      ,base.ass_attribute9 = landing.ass_attribute9
      ,base.ass_attribute10 = landing.ass_attribute10
      ,base.ass_attribute11 = landing.ass_attribute11
      ,base.ass_attribute12 = landing.ass_attribute12
      ,base.ass_attribute13 = landing.ass_attribute13
      ,base.ass_attribute14 = landing.ass_attribute14
      ,base.ass_attribute15 = landing.ass_attribute15
      ,base.ass_attribute16 = landing.ass_attribute16
      ,base.ass_attribute17 = landing.ass_attribute17
      ,base.ass_attribute18 = landing.ass_attribute18
      ,base.ass_attribute19 = landing.ass_attribute19
      ,base.ass_attribute20 = landing.ass_attribute20
      ,base.ass_attribute21 = landing.ass_attribute21
      ,base.ass_attribute22 = landing.ass_attribute22
      ,base.ass_attribute23 = landing.ass_attribute23
      ,base.ass_attribute24 = landing.ass_attribute24
      ,base.ass_attribute25 = landing.ass_attribute25
      ,base.ass_attribute26 = landing.ass_attribute26
      ,base.ass_attribute27 = landing.ass_attribute27
      ,base.ass_attribute28 = landing.ass_attribute28
      ,base.ass_attribute29 = landing.ass_attribute29
      ,base.ass_attribute30 = landing.ass_attribute30
      ,base.last_update_date = landing.last_update_date
      ,base.last_updated_by = landing.last_updated_by
      ,base.last_update_login = landing.last_update_login
      ,base.created_by = landing.created_by
      ,base.creation_date = landing.creation_date
      ,base.title = landing.title
      ,base.object_version_number = landing.object_version_number
      ,base.notice_period = landing.notice_period
      ,base.notice_period_uom = landing.notice_period_uom
      ,base.employee_category = landing.employee_category
      ,base.work_at_home = landing.work_at_home
      ,base.job_post_source_name = landing.job_post_source_name
      ,base.posting_content_id = landing.posting_content_id
      ,base.period_of_placement_date_start = landing.period_of_placement_date_start
      ,base.vendor_id = landing.vendor_id
      ,base.vendor_employee_number = landing.vendor_employee_number
      ,base.vendor_assignment_number = landing.vendor_assignment_number
      ,base.assignment_category = landing.assignment_category
      ,base.project_title = landing.project_title
      ,base.applicant_rank = landing.applicant_rank
      ,base.vendor_site_id = landing.vendor_site_id
      ,base.po_header_id = landing.po_header_id
      ,base.po_line_id = landing.po_line_id
      ,base.projected_assignment_end = landing.projected_assignment_end
      ,base.grade_ladder_pgm_id = landing.grade_ladder_pgm_id
      ,base.supervisor_assignment_id = landing.supervisor_assignment_id
      ,base.[datalakeinserttime] = landing.datalakeinserttime
      ,base.[RowHash] = landing.RowHash
      ,base.[BaseCreatedDate] = GETDATE()
      ,base.[BaseCreatedBy] = suser_sname()
FROM [PER_ALL_ASSIGNMENTS_F_B0] base
JOIN [HR_Landing].dbo.[PER_ALL_ASSIGNMENTS_F_B0Landing] landing ON base.assignment_id = landing.assignment_id
 AND  base.effective_start_date = landing.effective_start_date
 AND base.effective_end_date = landing.effective_end_date
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;
"
"UPDATE Target
SET Target.RowHash = SRC.RowHash
FROM
(
    SELECT assignment_id,
 effective_start_date,
 effective_end_date,
           HASHBYTES(   'MD5',
           (
               SELECT  [assignment_id]
                      ,[effective_start_date]
                      ,[effective_end_date]
                      ,[business_group_id]
                      ,[recruiter_id]
                      ,[grade_id]
                      ,[position_id]
                      ,[job_id]
                      ,[assignment_status_type_id]
                      ,[payroll_id]
                      ,[location_id]
                      ,[person_referred_by_id]
                      ,[supervisor_id]
                      ,[special_ceiling_step_id]
                      ,[person_id]
                      ,[recruitment_activity_id]
                      ,[source_organization_id]
                      ,[organization_id]
                      ,[people_group_id]
                      ,[soft_coding_keyflex_id]
                      ,[vacancy_id]
                      ,[pay_basis_id]
                      ,[assignment_sequence]
                      ,[assignment_type]
                      ,[primary_flag]
                      ,[application_id]
                      ,[assignment_number]
                      ,[change_reason]
                      ,[comment_id]
                      ,[date_probation_end]
                      ,[default_code_comb_id]
                      ,[employment_category]
                      ,[frequency]
                      ,[internal_address_line]
                      ,[manager_flag]
                      ,[normal_hours]
                      ,[perf_review_period]
                      ,[perf_review_period_frequency]
                      ,[period_of_service_id]
                      ,[probation_period]
                      ,[probation_unit]
                      ,[sal_review_period]
                      ,[sal_review_period_frequency]
                      ,[set_of_books_id]
                      ,[source_type]
                      ,[time_normal_finish]
                      ,[time_normal_start]
                      ,[bargaining_unit_code]
                      ,[labour_union_member_flag]
                      ,[hourly_salaried_code]
                      ,[contract_id]
                      ,[collective_agreement_id]
                      ,[cagr_id_flex_num]
                      ,[cagr_grade_def_id]
                      ,[establishment_id]
                      ,[request_id]
                      ,[program_application_id]
                      ,[program_id]
                      ,[program_update_date]
                      ,[ass_attribute_category]
                      ,[ass_attribute1]
                      ,[ass_attribute2]
                      ,[ass_attribute3]
                      ,[ass_attribute4]
                      ,[ass_attribute5]
                      ,[ass_attribute6]
                      ,[ass_attribute7]
                      ,[ass_attribute8]
                      ,[ass_attribute9]
                      ,[ass_attribute10]
                      ,[ass_attribute11]
                      ,[ass_attribute12]
                      ,[ass_attribute13]
                      ,[ass_attribute14]
                      ,[ass_attribute15]
                      ,[ass_attribute16]
                      ,[ass_attribute17]
                      ,[ass_attribute18]
                      ,[ass_attribute19]
                      ,[ass_attribute20]
                      ,[ass_attribute21]
                      ,[ass_attribute22]
                      ,[ass_attribute23]
                      ,[ass_attribute24]
                      ,[ass_attribute25]
                      ,[ass_attribute26]
                      ,[ass_attribute27]
                      ,[ass_attribute28]
                      ,[ass_attribute29]
                      ,[ass_attribute30]
                      ,[title]
                      ,[object_version_number]
                      ,[notice_period]
                      ,[notice_period_uom]
                      ,[employee_category]
                      ,[work_at_home]
                      ,[job_post_source_name]
                      ,[posting_content_id]
                      ,[period_of_placement_date_start]
                      ,[vendor_id]
                      ,[vendor_employee_number]
                      ,[vendor_assignment_number]
                      ,[assignment_category]
                      ,[project_title]
                      ,[applicant_rank]
                      ,[vendor_site_id]
                      ,[po_header_id]
                      ,[po_line_id]
                      ,[projected_assignment_end]
                      ,[grade_ladder_pgm_id]
                      ,[supervisor_assignment_id] FOR XML RAW			 
           )					 
                    ) AS RowHash			 
    FROM [dbo].[PER_ALL_ASSIGNMENTS_F_B0PreLanding]
) SRC										 
    JOIN [dbo].[PER_ALL_ASSIGNMENTS_F_B0PreLanding] Target
        ON SRC.assignment_id = Target.assignment_id 	 
           AND SRC.effective_start_date = Target.effective_start_date
           AND SRC.effective_end_date = Target.effective_end_date;

SELECT @@ROWCOUNT AS UpdateCount;			 "
"DELETE FROM base
FROM dbo.PER_ALL_PEOPLE_F_B0 BASE
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.PER_ALL_PEOPLE_F_B0PreLanding  landing
    WHERE base.person_id = landing.person_id
and base.effective_start_date= landing.effective_start_date
	AND base.effective_end_date = landing.effective_end_date
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
SET
Base.effective_start_date = Landing.effective_start_date
,Base.effective_end_date = Landing.effective_end_date
,Base.business_group_id = Landing.business_group_id
,Base.person_type_id = Landing.person_type_id
,Base.last_name = Landing.last_name
,Base.start_date = Landing.start_date
,Base.applicant_number = Landing.applicant_number
,Base.background_check_status = Landing.background_check_status
,Base.background_date_check = Landing.background_date_check
,Base.blood_type = Landing.blood_type
,Base.comment_id = Landing.comment_id
,Base.correspondence_language = Landing.correspondence_language
,Base.current_applicant_flag = Landing.current_applicant_flag
,Base.current_emp_or_apl_flag = Landing.current_emp_or_apl_flag
,Base.current_employee_flag = Landing.current_employee_flag
,Base.date_employee_data_verified = Landing.date_employee_data_verified
,Base.date_of_birth = Landing.date_of_birth
,Base.email_address = Landing.email_address
,Base.employee_number = Landing.employee_number
,Base.expense_check_send_to_address = Landing.expense_check_send_to_address
,Base.fast_path_employee = Landing.fast_path_employee
,Base.first_name = Landing.first_name
,Base.fte_capacity = Landing.fte_capacity
,Base.full_name = Landing.full_name
,Base.hold_applicant_date_until = Landing.hold_applicant_date_until
,Base.honors = Landing.honors
,Base.internal_location = Landing.internal_location
,Base.known_as = Landing.known_as
,Base.last_medical_test_by = Landing.last_medical_test_by
,Base.last_medical_test_date = Landing.last_medical_test_date
,Base.mailstop = Landing.mailstop
,Base.marital_status = Landing.marital_status
,Base.middle_names = Landing.middle_names
,Base.nationality = Landing.nationality
,Base.national_identifier = Landing.national_identifier
,Base.office_number = Landing.office_number
,Base.on_military_service = Landing.on_military_service
,Base.order_name = Landing.order_name
,Base.pre_name_adjunct = Landing.pre_name_adjunct
,Base.previous_last_name = Landing.previous_last_name
,Base.projected_start_date = Landing.projected_start_date
,Base.rehire_authorizor = Landing.rehire_authorizor
,Base.rehire_reason = Landing.rehire_reason
,Base.rehire_recommendation = Landing.rehire_recommendation
,Base.resume_exists = Landing.resume_exists
,Base.resume_last_updated = Landing.resume_last_updated
,Base.registered_disabled_flag = Landing.registered_disabled_flag
,Base.second_passport_exists = Landing.second_passport_exists
,Base.sex = Landing.sex
,Base.student_status = Landing.student_status
,Base.suffix = Landing.suffix
,Base.title = Landing.title
,Base.vendor_id = Landing.vendor_id
,Base.work_schedule = Landing.work_schedule
,Base.work_telephone = Landing.work_telephone
,Base.coord_ben_med_pln_no = Landing.coord_ben_med_pln_no
,Base.coord_ben_no_cvg_flag = Landing.coord_ben_no_cvg_flag
,Base.dpdnt_adoption_date = Landing.dpdnt_adoption_date
,Base.dpdnt_vlntry_svce_flag = Landing.dpdnt_vlntry_svce_flag
,Base.receipt_of_death_cert_date = Landing.receipt_of_death_cert_date
,Base.uses_tobacco_flag = Landing.uses_tobacco_flag
,Base.benefit_group_id = Landing.benefit_group_id
,Base.request_id = Landing.request_id
,Base.program_application_id = Landing.program_application_id
,Base.program_id = Landing.program_id
,Base.program_update_date = Landing.program_update_date
,Base.attribute_category = Landing.attribute_category
,Base.attribute1 = Landing.attribute1
,Base.attribute2 = Landing.attribute2
,Base.attribute3 = Landing.attribute3
,Base.attribute4 = Landing.attribute4
,Base.attribute5 = Landing.attribute5
,Base.attribute6 = Landing.attribute6
,Base.attribute7 = Landing.attribute7
,Base.attribute8 = Landing.attribute8
,Base.attribute9 = Landing.attribute9
,Base.attribute10 = Landing.attribute10
,Base.attribute11 = Landing.attribute11
,Base.attribute12 = Landing.attribute12
,Base.attribute13 = Landing.attribute13
,Base.attribute14 = Landing.attribute14
,Base.attribute15 = Landing.attribute15
,Base.attribute16 = Landing.attribute16
,Base.attribute17 = Landing.attribute17
,Base.attribute18 = Landing.attribute18
,Base.attribute19 = Landing.attribute19
,Base.attribute20 = Landing.attribute20
,Base.attribute21 = Landing.attribute21
,Base.attribute22 = Landing.attribute22
,Base.attribute23 = Landing.attribute23
,Base.attribute24 = Landing.attribute24
,Base.attribute25 = Landing.attribute25
,Base.attribute26 = Landing.attribute26
,Base.attribute27 = Landing.attribute27
,Base.attribute28 = Landing.attribute28
,Base.attribute29 = Landing.attribute29
,Base.attribute30 = Landing.attribute30
,Base.last_update_date = Landing.last_update_date
,Base.last_updated_by = Landing.last_updated_by
,Base.last_update_login = Landing.last_update_login
,Base.created_by = Landing.created_by
,Base.creation_date = Landing.creation_date
,Base.per_information_category = Landing.per_information_category
,Base.per_information1 = Landing.per_information1
,Base.per_information2 = Landing.per_information2
,Base.per_information3 = Landing.per_information3
,Base.per_information4 = Landing.per_information4
,Base.per_information5 = Landing.per_information5
,Base.per_information6 = Landing.per_information6
,Base.per_information7 = Landing.per_information7
,Base.per_information8 = Landing.per_information8
,Base.per_information9 = Landing.per_information9
,Base.per_information10 = Landing.per_information10
,Base.per_information11 = Landing.per_information11
,Base.per_information12 = Landing.per_information12
,Base.per_information13 = Landing.per_information13
,Base.per_information14 = Landing.per_information14
,Base.per_information15 = Landing.per_information15
,Base.per_information16 = Landing.per_information16
,Base.per_information17 = Landing.per_information17
,Base.per_information18 = Landing.per_information18
,Base.per_information19 = Landing.per_information19
,Base.per_information20 = Landing.per_information20
,Base.per_information21 = Landing.per_information21
,Base.per_information22 = Landing.per_information22
,Base.per_information23 = Landing.per_information23
,Base.per_information24 = Landing.per_information24
,Base.per_information25 = Landing.per_information25
,Base.per_information26 = Landing.per_information26
,Base.per_information27 = Landing.per_information27
,Base.per_information28 = Landing.per_information28
,Base.per_information29 = Landing.per_information29
,Base.per_information30 = Landing.per_information30
,Base.object_version_number = Landing.object_version_number
,Base.date_of_death = Landing.date_of_death
,Base.original_date_of_hire = Landing.original_date_of_hire
,Base.town_of_birth = Landing.town_of_birth
,Base.region_of_birth = Landing.region_of_birth
,Base.country_of_birth = Landing.country_of_birth
,Base.global_person_id = Landing.global_person_id
,Base.coord_ben_med_pl_name = Landing.coord_ben_med_pl_name
,Base.coord_ben_med_insr_crr_name = Landing.coord_ben_med_insr_crr_name
,Base.coord_ben_med_insr_crr_ident = Landing.coord_ben_med_insr_crr_ident
,Base.coord_ben_med_ext_er = Landing.coord_ben_med_ext_er
,Base.coord_ben_med_cvg_strt_dt = Landing.coord_ben_med_cvg_strt_dt
,Base.coord_ben_med_cvg_end_dt = Landing.coord_ben_med_cvg_end_dt
,Base.party_id = Landing.party_id
,Base.npw_number = Landing.npw_number
,Base.current_npw_flag = Landing.current_npw_flag
,Base.global_name = Landing.global_name
,Base.local_name = Landing.local_name
,Base.[RowHash] = landing.RowHash
,Base.[BaseCreatedDate] = GETDATE()
,Base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[PER_ALL_PEOPLE_F_B0] base
    JOIN [HR_Landing].dbo.[PER_ALL_PEOPLE_F_B0Landing] landing
        ON base.person_id = landing.person_id
	and base.effective_start_date= landing.effective_start_date
	AND base.effective_end_date = landing.effective_end_date
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE Target
SET Target.RowHash = SRC.RowHash
FROM
(
    SELECT person_id,
 effective_start_date,
 effective_end_date,
           HASHBYTES(   'MD5',
           (
               SELECT [person_id],
                      [effective_start_date],
                      [effective_end_date],
                      [business_group_id],
                      [person_type_id],
                      [last_name],
                      [start_date],
                      [applicant_number],
                      [background_check_status],
                      [background_date_check],
                      [blood_type],
                      [comment_id],
                      [correspondence_language],
                      [current_applicant_flag],
                      [current_emp_or_apl_flag],
                      [current_employee_flag],
                      [date_employee_data_verified],
                      [date_of_birth],
                      [email_address],
                      [employee_number],
                      [expense_check_send_to_address],
                      [fast_path_employee],
                      [first_name],
                      [fte_capacity],
                      [full_name],
                      [hold_applicant_date_until],
                      [honors],
                      [internal_location],
                      [known_as],
                      [last_medical_test_by],
                      [last_medical_test_date],
                      [mailstop],
                      [marital_status],
                      [middle_names],
                      [nationality],
                      [national_identifier],
                      [office_number],
                      [on_military_service],
                      [order_name],
                      [pre_name_adjunct],
                      [previous_last_name],
                      [projected_start_date],
                      [rehire_authorizor],
                      [rehire_reason],
                      [rehire_recommendation],
                      [resume_exists],
                      [resume_last_updated],
                      [registered_disabled_flag],
                      [second_passport_exists],
                      [sex],
                      [student_status],
                      [suffix],
                      [title],
                      [vendor_id],
                      [work_schedule],
                      [work_telephone],
                      [coord_ben_med_pln_no],
                      [coord_ben_no_cvg_flag],
                      [dpdnt_adoption_date],
                      [dpdnt_vlntry_svce_flag],
                      [receipt_of_death_cert_date],
                      [uses_tobacco_flag],
                      [benefit_group_id],
                      [request_id],
                      [program_application_id],
                      [program_id],
                      [program_update_date],
                      [attribute_category],
                      [attribute1],
                      [attribute2],
                      [attribute3],
                      [attribute4],
                      [attribute5],
                      [attribute6],
                      [attribute7],
                      [attribute8],
                      [attribute9],
                      [attribute10],
                      [attribute11],
                      [attribute12],
                      [attribute13],
                      [attribute14],
                      [attribute15],
                      [attribute16],
                      [attribute17],
                      [attribute18],
                      [attribute19],
                      [attribute20],
                      [attribute21],
                      [attribute22],
                      [attribute23],
                      [attribute24],
                      [attribute25],
                      [attribute26],
                      [attribute27],
                      [attribute28],
                      [attribute29],
                      [attribute30],
                      [per_information_category],
                      [per_information1],
                      [per_information2],
                      [per_information3],
                      [per_information4],
                      [per_information5],
                      [per_information6],
                      [per_information7],
                      [per_information8],
                      [per_information9],
                      [per_information10],
                      [per_information11],
                      [per_information12],
                      [per_information13],
                      [per_information14],
                      [per_information15],
                      [per_information16],
                      [per_information17],
                      [per_information18],
                      [per_information19],
                      [per_information20],
                      [per_information21],
                      [per_information22],
                      [per_information23],
                      [per_information24],
                      [per_information25],
                      [per_information26],
                      [per_information27],
                      [per_information28],
                      [per_information29],
                      [per_information30],
                      [object_version_number],
                      [date_of_death],
                      [original_date_of_hire],
                      [town_of_birth],
                      [region_of_birth],
                      [country_of_birth],
                      [global_person_id],
                      [coord_ben_med_pl_name],
                      [coord_ben_med_insr_crr_name],
                      [coord_ben_med_insr_crr_ident],
                      [coord_ben_med_ext_er],
                      [coord_ben_med_cvg_strt_dt],
                      [coord_ben_med_cvg_end_dt],
                      [party_id],
                      [npw_number],
                      [current_npw_flag],
                      [global_name],
                      [local_name]
               FOR XML RAW
           )
                    ) AS RowHash
    FROM [dbo].[PER_ALL_PEOPLE_F_B0PreLanding]
) SRC
    JOIN [dbo].[PER_ALL_PEOPLE_F_B0PreLanding] Target
        ON SRC.person_id = Target.person_id
           AND  SRC.effective_start_date= Target.effective_start_date
           AND SRC.effective_end_date = Target.effective_end_date;
SELECT @@ROWCOUNT AS UpdateCount;


"
"
DELETE FROM base
FROM dbo.[PER_ANALYSIS_CRITERIA_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_ANALYSIS_CRITERIA_B0Landing] landing
    WHERE base.analysis_criteria_id= landing.analysis_criteria_id
);

SELECT @@ROWCOUNT AS DeleteCount ;
"
"UPDATE base
   SET base.[analysis_criteria_id] = landing.analysis_criteria_id
      ,base.[request_id] = landing.request_id
      ,base.[program_application_id] = landing.program_application_id
      ,base.[program_id] = landing.program_id
      ,base.[program_update_date] = landing.program_update_date
      ,base.[id_flex_num] = landing.id_flex_num
	 ,base.[summary_flag] = landing.summary_flag
	 ,base.[enabled_flag] = landing.enabled_flag
	 ,base.[start_date_active] = landing.start_date_active
      ,base.[end_date_active] = landing.end_date_active
      ,base.[segment1] = landing.segment1
      ,base.[segment2] = landing.segment2
      ,base.[segment3] = landing.segment3
      ,base.[segment4] = landing.segment4
      ,base.[segment5] = landing.segment5
      ,base.[segment6] = landing.segment6
      ,base.[segment7] = landing.segment7
      ,base.[segment8] = landing.segment8
      ,base.[segment9] = landing.segment9
      ,base.[segment10] = landing.segment10
      ,base.[segment11] = landing.segment11
      ,base.[segment12] = landing.segment12
      ,base.[segment13] = landing.segment13
      ,base.[segment14] = landing.segment14
      ,base.[segment15] = landing.segment15
      ,base.[segment16] = landing.segment16
      ,base.[segment17] = landing.segment17
      ,base.[segment18] = landing.segment18
      ,base.[segment19] = landing.segment19
      ,base.[segment20] = landing.segment20
      ,base.[segment21] = landing.segment21
      ,base.[segment22] = landing.segment22
      ,base.[segment23] = landing.segment23
      ,base.[segment24] = landing.segment24
      ,base.[segment25] = landing.segment25
      ,base.[segment26] = landing.segment26
      ,base.[segment27] = landing.segment27
      ,base.[segment28] = landing.segment28
      ,base.[segment29] = landing.segment29
      ,base.[segment30] = landing.segment30
      ,base.[last_update_date] = landing.last_update_date
      ,base.[last_updated_by] = landing.last_updated_by
      ,base.[creation_date] = landing.creation_date
      ,base.[created_by] = landing.created_by
      ,base.[last_update_login] = landing.last_update_login
	 ,base.[object_version_number] = landing.object_version_number
      ,base.[datalakeinserttime] = landing.datalakeinserttime
      ,base.[RowHash] = landing.RowHash
      ,base.[BaseCreatedDate] = GETDATE()
      ,base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[PER_ANALYSIS_CRITERIA_B0] base
JOIN [HR_Landing].dbo.[PER_ANALYSIS_CRITERIA_B0Landing] landing ON base.analysis_criteria_id = landing.analysis_criteria_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [analysis_criteria_id],
HASHBYTES('MD5',
(SELECT  [analysis_criteria_id]
      ,[request_id]
      ,[program_application_id]
      ,[program_id]
      ,[program_update_date]
	 ,[id_flex_num]
	 ,[summary_flag]
	 ,[enabled_flag]
      ,[start_date_active]
      ,[end_date_active]
      ,[segment1]
      ,[segment2]
      ,[segment3]
      ,[segment4]
      ,[segment5]
      ,[segment6]
      ,[segment7]
      ,[segment8]
      ,[segment9]
      ,[segment10]
      ,[segment11]
      ,[segment12]
      ,[segment13]
      ,[segment14]
      ,[segment15]
      ,[segment16]
      ,[segment17]
      ,[segment18]
      ,[segment19]
      ,[segment20]
      ,[segment21]
      ,[segment22]
      ,[segment23]
      ,[segment24]
      ,[segment25]
      ,[segment26]
      ,[segment27]
      ,[segment28]
      ,[segment29]
      ,[segment30]
	 ,[object_version_number]
       FOR XML RAW)) AS RowHash
FROM [dbo].PER_ANALYSIS_CRITERIA_B0Landing l)src
JOIN [dbo].PER_ANALYSIS_CRITERIA_B0Landing TARGET ON src.[analysis_criteria_id] = TARGET.[analysis_criteria_id]


SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_ASSIGNMENT_STATUS_TYPES_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_ASSIGNMENT_STATUS_TYPES_B0Landing] landing
    WHERE base.[assignment_status_type_id] = landing.[assignment_status_type_id]
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET  base.[assignment_status_type_id] =  landing.[assignment_status_type_id]
      , base.[business_group_id]         =  landing.[business_group_id]
      , base.[legislation_code]          =  landing.[legislation_code]
      , base.[active_flag]               =  landing.[active_flag]
      , base.[default_flag]              =  landing.[default_flag]
      , base.[primary_flag]              =  landing.[primary_flag]
      , base.[user_status]               =  landing.[user_status]
      , base.[pay_system_status]         =  landing.[pay_system_status]
      , base.[per_system_status]         =  landing.[per_system_status]
      , base.[last_update_date]          =  landing.[last_update_date]
      , base.[last_updated_by]           =  landing.[last_updated_by]
      , base.[last_update_login]         =  landing.[last_update_login]
      , base.[created_by]                =  landing.[created_by]
      , base.[creation_date]             =  landing.[creation_date]
      , base.[zd_edition_name]           =  landing.[zd_edition_name]
      , base.[datalakeinserttime]        =  landing.[datalakeinserttime]
      , base.[RowHash]                   =  landing.[RowHash]
      , base.[BaseCreatedDate]           =  GETDATE()
      , base.[BaseCreatedBy]             =  suser_sname()
FROM [HR_Base].dbo.[PER_ASSIGNMENT_STATUS_TYPES_B0] base
JOIN [HR_Landing].dbo.[PER_ASSIGNMENT_STATUS_TYPES_B0Landing] landing ON base.[assignment_status_type_id] = landing.[assignment_status_type_id]
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [assignment_status_type_id],
HASHBYTES('MD5',
(SELECT [assignment_status_type_id]
      ,[business_group_id]
      ,[legislation_code]
      ,[active_flag]
      ,[default_flag]
      ,[primary_flag]
      ,[user_status]
      ,[pay_system_status]
      ,[per_system_status]
      ,[zd_edition_name] FOR XML RAW)) AS RowHash
FROM [dbo].PER_ASSIGNMENT_STATUS_TYPES_B0Landing l)src
JOIN [dbo].PER_ASSIGNMENT_STATUS_TYPES_B0Landing TARGET ON src.[assignment_status_type_id] = TARGET.[assignment_status_type_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_COMPETENCES_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_COMPETENCES_B0Landing] landing
    WHERE base.competence_id = landing.competence_id
);

SELECT @@ROWCOUNT AS DeleteCount;"
"UPDATE base 
   SET 
       base.[competence_id] = landing.competence_id
      ,base.[business_group_id] = landing.business_group_id
      ,base.[object_version_number] = landing.object_version_number
      ,base.[name] = landing.[name]
      ,base.[description] = landing.description
      ,base.[date_from] = landing.date_from
      ,base.[date_to] = landing.date_to
      ,base.[behavioural_indicator] = landing.behavioural_indicator
      ,base.[certification_required] = landing.certification_required
      ,base.[evaluation_method] = landing.evaluation_method
      ,base.[renewal_period_frequency] = landing.renewal_period_frequency
      ,base.[renewal_period_units] = landing.renewal_period_units
      ,base.[max_level] = landing.max_level
      ,base.[min_level] = landing.min_level
      ,base.[rating_scale_id] = landing.rating_scale_id
      ,base.[attribute_category] = landing.attribute_category
      ,base.[attribute1] = landing.attribute1
      ,base.[attribute2] = landing.attribute2
      ,base.[attribute3] = landing.attribute3
      ,base.[attribute4] = landing.attribute4
      ,base.[attribute5] = landing.attribute5
      ,base.[attribute6] = landing.attribute6
      ,base.[attribute7] = landing.attribute7
      ,base.[attribute8] = landing.attribute8
      ,base.[attribute9] = landing.attribute9
      ,base.[attribute10] = landing.attribute10
      ,base.[attribute11] = landing.attribute11
      ,base.[attribute12] = landing.attribute12
      ,base.[attribute13] = landing.attribute13
      ,base.[attribute14] = landing.attribute14
      ,base.[attribute15] = landing.attribute15
      ,base.[attribute16] = landing.attribute16
      ,base.[attribute17] = landing.attribute17
      ,base.[attribute18] = landing.attribute18
      ,base.[attribute19] = landing.attribute19
      ,base.[attribute20] = landing.attribute20
      ,base.[last_update_date] = landing.last_update_date
      ,base.[last_update_login] = landing.last_update_login
      ,base.[created_by] = landing.created_by
      ,base.[creation_date] = landing.creation_date
      ,base.[competence_definition_id] = landing.competence_definition_id
      ,base.[competence_alias] = landing.competence_alias
      ,base.[competence_cluster] = landing.competence_cluster
      ,base.[unit_standard_id] = landing.unit_standard_id
      ,base.[credit_type] = landing.credit_type
      ,base.[credits] = landing.credits
      ,base.[level_type] = landing.level_type
      ,base.[level_number] = landing.level_number
      ,base.[field] = landing.field
      ,base.[sub_field] = landing.sub_field
      ,base.[provider] = landing.provider
      ,base.[qa_organization] = landing.qa_organization
      ,base.[information_category] = landing.information_category
      ,base.[information1] = landing.information1
      ,base.[information2] = landing.information2
      ,base.[information3] = landing.information3
      ,base.[information4] = landing.information4
      ,base.[information5] = landing.information5
      ,base.[information6] = landing.information6
      ,base.[information7] = landing.information7
      ,base.[information8] = landing.information8
      ,base.[information9] = landing.information9
      ,base.[information10] = landing.information10
      ,base.[information11] = landing.information11
      ,base.[information12] = landing.information12
      ,base.[information13] = landing.information13
      ,base.[information14] = landing.information14
      ,base.[information15] = landing.information15
      ,base.[information16] = landing.information16
      ,base.[information17] = landing.information17
      ,base.[information18] = landing.information18
      ,base.[information19] = landing.information19
      ,base.[information20] = landing.information20
      ,base.datalakeinserttime = landing.datalakeinserttime
	  ,base.RowHash = landing.RowHash
	  ,base.[BaseCreatedDate] = GETDATE()
	  ,base.[BaseCreatedBy] = SUSER_SNAME()
FROM [HR_Base].dbo.[PER_COMPETENCES_B0] base
JOIN [HR_Landing].dbo.[PER_COMPETENCES_B0Landing] landing 
	ON base.competence_id = landing.competence_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;



"
"UPDATE target SET 
	target.RowHash = src.RowHash
FROM 
(SELECT 
	competence_id,
	HASHBYTES('MD5',
(SELECT
	[competence_id],
	[business_group_id],
	[object_version_number],
	[name],
	[description],
	[date_from],
	[date_to],
	[behavioural_indicator],
	[certification_required],
	[evaluation_method],
	[renewal_period_frequency],
	[renewal_period_units],
	[max_level],
	[min_level],
	[rating_scale_id],
	[attribute_category],
	[attribute1],
	[attribute2],
	[attribute3],
	[attribute4],
	[attribute5], 
	[attribute6], 
	[attribute7], 
	[attribute8], 
	[attribute9], 
	[attribute10],
	[attribute11],
	[attribute12],
	[attribute13],
	[attribute14],
	[attribute15],
	[attribute16],
	[attribute17],
	[attribute18],
	[attribute19],
	[attribute20],
	[competence_definition_id],
	[competence_alias],
	[competence_cluster],
	[unit_standard_id],
	[credit_type],
	[credits],
	[level_type],
	[level_number],
	[field],
	[sub_field],
	[provider],
	[qa_organization],
	[information_category],
	[information1],
	[information2],
	[information3],
	[information4],
	[information5],
	[information6],
	[information7],
	[information8],
	[information9],
	[information10],
	[information11],
	[information12],
	[information13],
	[information14],
	[information15],
	[information16],
	[information17],
	[information18],
	[information19],
	[information20]
	FOR XML RAW)) AS RowHash
FROM dbo.PER_COMPETENCES_B0Landing l) src
JOIN dbo.PER_COMPETENCES_B0Landing target ON src.[competence_id] = target.[competence_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_COMPETENCE_ELEMENTS_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_COMPETENCE_ELEMENTS_B0Landing] landing
    WHERE base.competence_element_id = landing.competence_element_id
);

SELECT @@ROWCOUNT AS DeleteCount;"
"UPDATE base SET 
	base.competence_element_id = landing.competence_element_id,
	base.business_group_id = landing.business_group_id,
	base.object_version_number = landing.object_version_number,
	base.[type] = landing.[type],
	base.competence_id = landing.competence_id,
	base.member_competence_set_id = landing.member_competence_set_id,
	base.proficiency_level_id = landing.proficiency_level_id,
	base.high_proficiency_level_id = landing.high_proficiency_level_id,
	base.weighting_level_id = landing.weighting_level_id,
	base.rating_level_id = landing.rating_level_id,
	base.person_id = landing.person_id,
	base.enterprise_id = landing.enterprise_id,
	base.job_id = landing.job_id,
	base.valid_grade_id = landing.valid_grade_id,
	base.position_id = landing.position_id,
	base.organization_id = landing.organization_id,
	base.work_item_id = landing.work_item_id,
	base.competence_set_id = landing.competence_set_id,
	base.parent_competence_element_id = landing.parent_competence_element_id,
	base.activity_version_id = landing.activity_version_id,
	base.assessment_id = landing.assessment_id,
	base.assessment_type_id = landing.assessment_type_id,
	base.mandatory = landing.mandatory,
	base.effective_date_from = landing.effective_date_from,
	base.effective_date_to = landing.effective_date_to,
	base.group_competence_type = landing.group_competence_type,
	base.competence_type = landing.competence_type,
	base.sequence_number = landing.sequence_number,
	base.normal_elapse_duration = landing.normal_elapse_duration,
	base.normal_elapse_duration_unit = landing.normal_elapse_duration_unit,
	base.source_of_proficiency_level = landing.source_of_proficiency_level,
	base.line_score = landing.line_score,
	base.certification_date = landing.certification_date,
	base.certification_method = landing.certification_method,
	base.next_certification_date = landing.next_certification_date,
	base.attribute_category = landing.attribute_category,
	base.attribute1 = landing.attribute1,
	base.attribute2 = landing.attribute2,
	base.attribute3 = landing.attribute3,
	base.attribute4 = landing.attribute4,
	base.attribute5 = landing.attribute5,
	base.attribute6 = landing.attribute6,
	base.attribute7 = landing.attribute7,
	base.attribute8 = landing.attribute8,
	base.attribute9 = landing.attribute9,
	base.attribute10 = landing.attribute10,
	base.attribute11 = landing.attribute11,
	base.attribute12 = landing.attribute12,
	base.attribute13 = landing.attribute13,
	base.attribute14 = landing.attribute14,
	base.attribute15 = landing.attribute15,
	base.attribute16 = landing.attribute16,
	base.attribute17 = landing.attribute17,
	base.attribute18 = landing.attribute18,
	base.attribute19 = landing.attribute19,
	base.attribute20 = landing.attribute20,
	base.last_update_date = landing.last_update_date,
	base.last_updated_by = landing.last_updated_by,
	base.last_update_login = landing.last_update_login,
	base.created_by = landing.created_by,
	base.creation_date = landing.creation_date,
	base.[object_id] = landing.[object_id],
	base.[object_name] = landing.[object_name],
	base.party_id = landing.party_id,
	base.qualification_type_id = landing.qualification_type_id,
	base.unit_standard_type = landing.unit_standard_type,
	base.[status] = landing.[status],
	base.information_category = landing.information_category,
	base.information1 = landing.information1,
	base.information2 = landing.information2,
	base.information3 = landing.information3,
	base.information4 = landing.information4,
	base.information5 = landing.information5,
	base.information6 = landing.information6,
	base.information7 = landing.information7,
	base.information8 = landing.information8,
	base.information9 = landing.information9,
	base.information10 = landing.information10,
	base.information11 = landing.information11,
	base.information12 = landing.information12,
	base.information13 = landing.information13,
	base.information14 = landing.information14,
	base.information15 = landing.information15,
	base.information16 = landing.information16,
	base.information17 = landing.information17,
	base.information18 = landing.information18,
	base.information19 = landing.information19,
	base.information20 = landing.information20,
	base.achieved_date = landing.achieved_date,
	base.appr_line_score = landing.appr_line_score,
	base.[comments#1] = landing.[comments#1],
	base.datalakeinserttime = landing.datalakeinserttime,
	base.RowHash = landing.RowHash,
	base.[BaseCreatedDate] = GETDATE(),
	base.[BaseCreatedBy] = SUSER_SNAME()
FROM [HR_Base].dbo.[PER_COMPETENCE_ELEMENTS_B0] base
JOIN [HR_Landing].dbo.[PER_COMPETENCE_ELEMENTS_B0Landing] landing 
	ON base.competence_element_id = landing.competence_element_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;

"
"UPDATE target SET 
	target.RowHash = src.RowHash
FROM 
(SELECT 
	competence_element_id,
	HASHBYTES('MD5',
(SELECT
	competence_element_id,
	business_group_id,
	object_version_number,
	[type],
	competence_id,
	member_competence_set_id,
	proficiency_level_id,
	high_proficiency_level_id,
	weighting_level_id,
	rating_level_id,
	person_id,
	enterprise_id,
	job_id,
	valid_grade_id,
	position_id,
	organization_id,
	work_item_id,
	competence_set_id,
	parent_competence_element_id,
	activity_version_id,
	assessment_id,
	assessment_type_id,
	mandatory,
	effective_date_from,
	effective_date_to,
	group_competence_type,
	competence_type,
	sequence_number,
	normal_elapse_duration,
	normal_elapse_duration_unit,
	source_of_proficiency_level,
	line_score,
	certification_date,
	certification_method,
	next_certification_date,
	attribute_category,
	attribute1,
	attribute2,
	attribute3,
	attribute4,
	attribute5,
	attribute6,
	attribute7,
	attribute8,
	attribute9,
	attribute10,
	attribute11,
	attribute12,
	attribute13,
	attribute14,
	attribute15,
	attribute16,
	attribute17,
	attribute18,
	attribute19,
	attribute20,
	[object_id],
	[object_name],
	party_id,
	qualification_type_id,
	unit_standard_type,
	[status],
	information_category,
	information1,
	information2,
	information3,
	information4,
	information5,
	information6,
	information7,
	information8,
	information9,
	information10,
	information11,
	information12,
	information13,
	information14,
	information15,
	information16,
	information17,
	information18,
	information19,
	information20,
	achieved_date,
	appr_line_score,
	[comments#1]
	FOR XML RAW)) AS RowHash
FROM dbo.PER_COMPETENCE_ELEMENTS_B0Landing l) src
JOIN dbo.PER_COMPETENCE_ELEMENTS_B0Landing target ON src.[competence_element_id] = target.[competence_element_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_GRADES_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_GRADES_B0Landing] landing
    WHERE base.grade_id = landing.grade_id
);

SELECT @@ROWCOUNT AS DeleteCount;"
"UPDATE base SET 
	base.business_group_id = landing.business_group_id,
	base.grade_definition_id = landing.grade_definition_id,
	base.date_from = landing.date_from,
	base.[sequence] = landing.[sequence],
	base.date_to = landing.date_to,
	base.[name] = landing.[name],
	base.request_id = landing.request_id,
	base.program_application_id = landing.program_application_id,
	base.program_id = landing.program_id,
	base.program_update_date = landing.program_update_date,
	base.attribute_category = landing.attribute_category,
	base.attribute1 = landing.attribute1,
	base.attribute2 = landing.attribute2,
	base.attribute3 = landing.attribute3,
	base.attribute4 = landing.attribute4,
	base.attribute5 = landing.attribute5,
	base.attribute6 = landing.attribute6,
	base.attribute7 = landing.attribute7,
	base.attribute8 = landing.attribute8,
	base.attribute9 = landing.attribute9,
	base.attribute10 = landing.attribute10,
	base.attribute11 = landing.attribute11,
	base.attribute12 = landing.attribute12,
	base.attribute13 = landing.attribute13,
	base.attribute14 = landing.attribute14,
	base.attribute15 = landing.attribute15,
	base.attribute16 = landing.attribute16,
	base.attribute17 = landing.attribute17,
	base.attribute18 = landing.attribute18,
	base.attribute19 = landing.attribute19,
	base.attribute20 = landing.attribute20,
	base.last_update_date = landing.last_update_date,
	base.last_updated_by = landing.last_updated_by,
	base.last_update_login = landing.last_update_login,
	base.created_by = landing.created_by,
	base.creation_date = landing.creation_date,
	base.information_category = landing.information_category,
	base.information1 = landing.information1,
	base.information2 = landing.information2,
	base.information3 = landing.information3,
	base.information4 = landing.information4,
	base.information5 = landing.information5,
	base.information6 = landing.information6,
	base.information7 = landing.information7,
	base.information8 = landing.information8,
	base.information9 = landing.information9,
	base.information10 = landing.information10,
	base.information11 = landing.information11,
	base.information12 = landing.information12,
	base.information13 = landing.information13,
	base.information14 = landing.information14,
	base.information15 = landing.information15,
	base.information16 = landing.information16,
	base.information17 = landing.information17,
	base.information18 = landing.information18,
	base.information19 = landing.information19,
	base.information20 = landing.information20,
	base.object_version_number = landing.object_version_number,
	base.short_name = landing.short_name,
	base.comments = landing.comments,
	base.datalakeinserttime = landing.datalakeinserttime,
	base.[RowHash] = landing.RowHash,
	base.[BaseCreatedDate] = GETDATE(),
	base.[BaseCreatedBy] = SUSER_SNAME()
FROM [HR_Base].dbo.[PER_GRADES_B0] base
JOIN [HR_Landing].dbo.[PER_GRADES_B0Landing] landing 
	ON base.grade_id = landing.grade_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;
"
"UPDATE target SET 
	target.RowHash = src.RowHash
FROM 
(SELECT 
	grade_id,
	HASHBYTES('MD5',
(SELECT
	grade_id,
	business_group_id,
	grade_definition_id,
	date_from,
	[sequence],
	date_to,
	[name],
	request_id,
	program_application_id,
	program_id,
	program_update_date,
	attribute_category,
	attribute1,
	attribute2,
	attribute3,
	attribute4,
	attribute5,
	attribute6,
	attribute7,
	attribute8,
	attribute9,
	attribute10,
	attribute11,
	attribute12,
	attribute13,
	attribute14,
	attribute15,
	attribute16,
	attribute17,
	attribute18,
	attribute19,
	attribute20,
	information_category,
	information1,
	information2,
	information3,
	information4,
	information5,
	information6,
	information7,
	information8,
	information9,
	information10,
	information11,
	information12,
	information13,
	information14,
	information15,
	information16,
	information17,
	information18,
	information19,
	information20,
	object_version_number,
	short_name,
	comments
	FOR XML RAW)) AS RowHash
FROM dbo.PER_GRADES_B0Landing l) src
JOIN dbo.PER_GRADES_B0Landing target ON src.grade_id = target.grade_id

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.PER_JOBS_B0 BASE
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.PER_JOBS_B0Landing landing
    WHERE base.job_id = landing.job_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
SET BASE.[job_id]  =  Landing.[job_id]
,BASE.[business_group_id]  =  Landing.[business_group_id]
,BASE.[job_definition_id]  =  Landing.[job_definition_id]
,BASE.[date_from]  =  Landing.[date_from]
,BASE.[date_to]  =  Landing.[date_to]
,BASE.[name]  =  Landing.[name]
,BASE.[request_id]  =  Landing.[request_id]
,BASE.[program_application_id]  =  Landing.[program_application_id]
,BASE.[program_id]  =  Landing.[program_id]
,BASE.[program_update_date]  =  Landing.[program_update_date]
,BASE.[attribute_category]  =  Landing.[attribute_category]
,BASE.[attribute1]  =  Landing.[attribute1]
,BASE.[attribute2]  =  Landing.[attribute2]
,BASE.[attribute3]  =  Landing.[attribute3]
,BASE.[attribute4]  =  Landing.[attribute4]
,BASE.[attribute5]  =  Landing.[attribute5]
,BASE.[attribute6]  =  Landing.[attribute6]
,BASE.[attribute7]  =  Landing.[attribute7]
,BASE.[attribute8]  =  Landing.[attribute8]
,BASE.[attribute9]  =  Landing.[attribute9]
,BASE.[attribute10]  =  Landing.[attribute10]
,BASE.[attribute11]  =  Landing.[attribute11]
,BASE.[attribute12]  =  Landing.[attribute12]
,BASE.[attribute13]  =  Landing.[attribute13]
,BASE.[attribute14]  =  Landing.[attribute14]
,BASE.[attribute15]  =  Landing.[attribute15]
,BASE.[attribute16]  =  Landing.[attribute16]
,BASE.[attribute17]  =  Landing.[attribute17]
,BASE.[attribute18]  =  Landing.[attribute18]
,BASE.[attribute19]  =  Landing.[attribute19]
,BASE.[attribute20]  =  Landing.[attribute20]
,BASE.[last_update_date]  =  Landing.[last_update_date]
,BASE.[last_updated_by]  =  Landing.[last_updated_by]
,BASE.[last_update_login]  =  Landing.[last_update_login]
,BASE.[created_by]  =  Landing.[created_by]
,BASE.[creation_date]  =  Landing.[creation_date]
,BASE.[job_information_category]  =  Landing.[job_information_category]
,BASE.[job_information1]  =  Landing.[job_information1]
,BASE.[job_information2]  =  Landing.[job_information2]
,BASE.[job_information3]  =  Landing.[job_information3]
,BASE.[job_information4]  =  Landing.[job_information4]
,BASE.[job_information5]  =  Landing.[job_information5]
,BASE.[job_information6]  =  Landing.[job_information6]
,BASE.[job_information7]  =  Landing.[job_information7]
,BASE.[job_information8]  =  Landing.[job_information8]
,BASE.[job_information9]  =  Landing.[job_information9]
,BASE.[job_information10]  =  Landing.[job_information10]
,BASE.[job_information11]  =  Landing.[job_information11]
,BASE.[job_information12]  =  Landing.[job_information12]
,BASE.[job_information13]  =  Landing.[job_information13]
,BASE.[job_information14]  =  Landing.[job_information14]
,BASE.[job_information15]  =  Landing.[job_information15]
,BASE.[object_version_number]  =  Landing.[object_version_number]
,BASE.[job_information16]  =  Landing.[job_information16]
,BASE.[job_information17]  =  Landing.[job_information17]
,BASE.[job_information18]  =  Landing.[job_information18]
,BASE.[job_information19]  =  Landing.[job_information19]
,BASE.[job_information20]  =  Landing.[job_information20]
,BASE.[benchmark_job_flag]  =  Landing.[benchmark_job_flag]
,BASE.[benchmark_job_id]  =  Landing.[benchmark_job_id]
,BASE.[emp_rights_flag]  =  Landing.[emp_rights_flag]
,BASE.[job_group_id]  =  Landing.[job_group_id]
,BASE.[approval_authority]  =  Landing.[approval_authority]
,BASE.[comments]  =  Landing.[comments]
,BASE.[datalakeinserttime]  =  Landing.[datalakeinserttime]

   , base.[RowHash] = landing.[RowHash],
    base.[BaseCreatedDate] = GETDATE(),
    base.[BaseCreatedBy] = SUSER_SNAME()
FROM [HR_Base].dbo.[PER_JOBS_B0] base
    JOIN [HR_Landing].dbo.[PER_JOBS_B0Landing] landing
        ON base.job_id = landing.job_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE TARGET 
SET target.RowHash=SRC.RowHash
FROM 
(SELECT Job_id,
HASHBYTES('MD5',


(SELECT  [job_id]
      ,[business_group_id]
      ,[job_definition_id]
      ,[date_from]
      ,[date_to]
      ,[name]
      ,[request_id]
      ,[program_application_id]
      ,[program_id]
      ,[program_update_date]
      ,[attribute_category]
      ,[attribute1]
      ,[attribute2]
      ,[attribute3]
      ,[attribute4]
      ,[attribute5]
      ,[attribute6]
      ,[attribute7]
      ,[attribute8]
      ,[attribute9]
      ,[attribute10]
      ,[attribute11]
      ,[attribute12]
      ,[attribute13]
      ,[attribute14]
      ,[attribute15]
      ,[attribute16]
      ,[attribute17]
      ,[attribute18]
      ,[attribute19]
      ,[attribute20]
      ,[job_information_category]
      ,[job_information1]
      ,[job_information2]
      ,[job_information3]
      ,[job_information4]
      ,[job_information5]
      ,[job_information6]
      ,[job_information7]
      ,[job_information8]
      ,[job_information9]
      ,[job_information10]
      ,[job_information11]
      ,[job_information12]
      ,[job_information13]
      ,[job_information14]
      ,[job_information15]
      ,[object_version_number]
      ,[job_information16]
      ,[job_information17]
      ,[job_information18]
      ,[job_information19]
      ,[job_information20]
      ,[benchmark_job_flag]
      ,[benchmark_job_id]
      ,[emp_rights_flag]
      ,[job_group_id]
      ,[approval_authority]
      ,[comments] FOR XML RAW)) AS RowHash

  FROM [HR_Landing].[dbo].[PER_JOBS_B0Landing]) SRC
  JOIN [HR_Landing].[dbo].[PER_JOBS_B0Landing] Target ON SRC.Job_id=Target.Job_id


   SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_JOB_GROUPS_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_JOB_GROUPS_B0Landing] landing
    WHERE base.job_group_id = landing.job_group_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET  base.job_group_id = landing.job_group_id
      , base.business_group_id = landing.business_group_id
      , base.legislation_code = landing.legislation_code
      , base.internal_name = landing.internal_name
      , base.displayed_name = landing.displayed_name
      , base.id_flex_num = landing.id_flex_num
      , base.master_flag = landing.master_flag
      , base.object_version_number = landing.object_version_number
      , base.[last_update_date] = landing.last_update_date
      , base.[last_updated_by] = landing.last_updated_by
      , base.[last_update_login] = landing.last_update_login
      , base.[created_by] = landing.created_by
      , base.[creation_date] = landing.creation_date
      , base.[datalakeinserttime] = landing.datalakeinserttime
      , base.[RowHash] = landing.RowHash
      , base.[BaseCreatedDate] = GETDATE()
      , base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[PER_JOB_GROUPS_B0] base
JOIN [HR_Landing].dbo.[PER_JOB_GROUPS_B0Landing] landing ON base.job_group_id = landing.job_group_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [job_group_id],
HASHBYTES('MD5',
(SELECT [job_group_id]
      ,[business_group_id]
      ,[legislation_code]
      ,[internal_name]
      ,[displayed_name]
      ,[id_flex_num]
      ,[master_flag]
      ,[object_version_number]
FOR XML RAW)) AS RowHash
FROM [dbo].PER_JOB_GROUPS_B0Landing l)src
JOIN [dbo].PER_JOB_GROUPS_B0Landing TARGET ON src.[job_group_id] = TARGET.[job_group_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_ORGANIZATION_STRUCTURES_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_ORGANIZATION_STRUCTURES_B0Landing] landing
    WHERE base.organization_structure_id = landing.organization_structure_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET  base.[organization_structure_id]		=   landing.[organization_structure_id]
      , base.[business_group_id]				=   landing.[business_group_id]
      , base.[name]								=   landing.[name]
      , base.[primary_structure_flag]			=   landing.[primary_structure_flag]
      , base.[request_id]						=   landing.[request_id]
      , base.[program_application_id]			=   landing.[program_application_id]
      , base.[program_id]						=   landing.[program_id]
      , base.[program_update_date]				=   landing.[program_update_date]
      , base.[attribute_category]				=   landing.[attribute_category]
      , base.[attribute1]						=   landing.[attribute1]
      , base.[attribute2]						=   landing.[attribute2]
      , base.[attribute3]						=   landing.[attribute3]
      , base.[attribute4]						=   landing.[attribute4]
      , base.[attribute5]						=   landing.[attribute5]
      , base.[attribute6]						=   landing.[attribute6]
      , base.[attribute7]						=   landing.[attribute7]
      , base.[attribute8]						=   landing.[attribute8]
      , base.[attribute9]						=   landing.[attribute9]
      , base.[attribute10]						=   landing.[attribute10]
      , base.[attribute11]						=   landing.[attribute11]
      , base.[attribute12]						=   landing.[attribute12]
      , base.[attribute13]						=   landing.[attribute13]
      , base.[attribute14]						=   landing.[attribute14]
      , base.[attribute15]						=   landing.[attribute15]
      , base.[attribute16]						=   landing.[attribute16]
      , base.[attribute17]						=   landing.[attribute17]
      , base.[attribute18]						=   landing.[attribute18]
      , base.[attribute19]						=   landing.[attribute19]
      , base.[attribute20]						=   landing.[attribute20]
      , base.[last_update_date]					=   landing.[last_update_date]
      , base.[last_updated_by]					=   landing.[last_updated_by]
      , base.[last_update_login]				=   landing.[last_update_login]
      , base.[created_by]						=   landing.[created_by]
      , base.[creation_date]					=   landing.[creation_date]
      , base.[position_control_structure_flg]	=   landing.[position_control_structure_flg]
      , base.[object_version_number]			=   landing.[object_version_number]
      , base.[comments]							=   landing.[comments]
      , base.[datalakeinserttime]				=   landing.datalakeinserttime
      , base.[RowHash]							=   landing.RowHash
      , base.[BaseCreatedDate]					=   GETDATE()
      , base.[BaseCreatedBy]					=   SUSER_SNAME()
FROM [PER_ORGANIZATION_STRUCTURES_B0] base
JOIN [HR_Landing].dbo.[PER_ORGANIZATION_STRUCTURES_B0Landing] landing ON base.organization_structure_id = landing.organization_structure_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [organization_structure_id],
HASHBYTES('MD5',
(SELECT [organization_structure_id]
      ,[business_group_id]
      ,[name]
      ,[primary_structure_flag]
      ,[request_id]
      ,[program_application_id]
      ,[program_id]
      ,[program_update_date]
      ,[attribute_category]
      ,[attribute1]
      ,[attribute2]
      ,[attribute3]
      ,[attribute4]
      ,[attribute5]
      ,[attribute6]
      ,[attribute7]
      ,[attribute8]
      ,[attribute9]
      ,[attribute10]
      ,[attribute11]
      ,[attribute12]
      ,[attribute13]
      ,[attribute14]
      ,[attribute15]
      ,[attribute16]
      ,[attribute17]
      ,[attribute18]
      ,[attribute19]
      ,[attribute20]
      ,[position_control_structure_flg]
      ,[object_version_number]
      ,[comments] FOR XML RAW)) AS RowHash
FROM [dbo].PER_ORGANIZATION_STRUCTURES_B0Landing l)src
JOIN [dbo].PER_ORGANIZATION_STRUCTURES_B0Landing TARGET ON src.[organization_structure_id] = TARGET.[organization_structure_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.Per_Org_Structure_Elements_B0 BASE
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.Per_Org_Structure_Elements_B0Landing landing
    WHERE base.  [org_structure_element_id]  = landing.  [org_structure_element_id] 
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
SET base.[org_structure_element_id] = landing.[org_structure_element_id],
    base.[business_group_id] = landing.[business_group_id],
    base.[organization_id_parent] = landing.[organization_id_parent],
    base.[org_structure_version_id] = landing.[org_structure_version_id],
    base.[organization_id_child] = landing.[organization_id_child],
    base.[request_id] = landing.[request_id],
    base.[program_application_id] = landing.[program_application_id],
    base.[program_id] = landing.[program_id],
    base.[program_update_date] = landing.[program_update_date],
    base.[last_update_date] = landing.[last_update_date],
    base.[last_updated_by] = landing.[last_updated_by],
    base.[last_update_login] = landing.[last_update_login],
    base.[created_by] = landing.[created_by],
    base.[creation_date] = landing.[creation_date],
    base.[object_version_number] = landing.[object_version_number],
    base.[position_control_enabled_flag] = landing.[position_control_enabled_flag],
    base.[party_id] = landing.[party_id],
    base.[datalakeinserttime] = landing.[datalakeinserttime],
    base.[RowHash] = landing.[RowHash],
    base.[BaseCreatedDate] = GETDATE(),
    base.[BaseCreatedBy] = SUSER_SNAME()
FROM [HR_Base].dbo.[Per_Org_Structure_Elements_B0] base
    JOIN [HR_Landing].dbo.[Per_Org_Structure_Elements_B0Landing] landing
        ON base.[org_structure_element_id] = landing.[org_structure_element_id]
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE TARGET 
SET target.RowHash=SRC.RowHash
FROM 
(SELECT [org_structure_element_id],
HASHBYTES('MD5',
(SELECT [org_structure_element_id]
      ,[business_group_id]
      ,[organization_id_parent]
      ,[org_structure_version_id]
      ,[organization_id_child]
      ,[request_id]
      ,[program_application_id]
      ,[program_id]
      ,[program_update_date]
      ,[last_update_date]
      ,[last_updated_by]
      ,[last_update_login]
      ,[created_by]
      ,[creation_date]
      ,[object_version_number]
      ,[position_control_enabled_flag]
      ,[party_id] FOR XML RAW)) AS RowHash
      
  FROM [dbo].[Per_Org_Structure_Elements_B0Landing]) SRC 
 JOIN [dbo].[Per_Org_Structure_Elements_B0Landing] TARGET ON SRC.[org_structure_element_id]=Target.[org_structure_element_id]

 SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.PER_ORG_STRUCTURE_VERSIONS_B0 BASE
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.PER_ORG_STRUCTURE_VERSIONS_B0Landing landing
    WHERE base.  [org_structure_version_id]  = landing.  [org_structure_version_id] 
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"
UPDATE base SET 
      base.[org_structure_version_id] = landing.org_structure_version_id
      ,base.[business_group_id] = landing.business_group_id
      ,base.[organization_structure_id] = landing.organization_structure_id
      ,base.[date_from] = landing.date_from
      ,base.[version_number] = landing.version_number
      ,base.[copy_structure_version_id] = landing.copy_structure_version_id
      ,base.[date_to] = landing.date_to
      ,base.[request_id] = landing.request_id
      ,base.[program_application_id] = landing.program_application_id
      ,base.[program_id] = landing.program_id
      ,base.[program_update_date] = landing.program_update_date
      ,base.[last_update_date] = landing.last_update_date
      ,base.[last_updated_by] = landing.last_updated_by
      ,base.[last_update_login] = landing.last_update_login
      ,base.[created_by] = landing.created_by
      ,base.[creation_date] = landing.creation_date
      ,base.[object_version_number] = landing.object_version_number
      ,base.[topnode_pos_ctrl_enabled_flag] = landing.topnode_pos_ctrl_enabled_flag
      ,base.datalakeinserttime = landing.datalakeinserttime
      ,base.RowHash = landing.RowHash
      ,base.[BaseCreatedDate] = GETDATE()
      ,base.[BaseCreatedBy] = SUSER_SNAME()
FROM [HR_Base].dbo.[PER_ORG_STRUCTURE_VERSIONS_B0] base
JOIN [HR_Landing].dbo.[PER_ORG_STRUCTURE_VERSIONS_B0Landing] landing 
	ON base.org_structure_version_id = landing.org_structure_version_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target SET 
	target.RowHash = src.RowHash
FROM 
(SELECT 
	org_structure_version_id,
	HASHBYTES('MD5',
(SELECT
	   [org_structure_version_id]
      ,[business_group_id]
      ,[organization_structure_id]
      ,[date_from]
      ,[version_number]
      ,[copy_structure_version_id]
      ,[date_to]
      ,[request_id]
      ,[program_application_id]
      ,[program_id]
      ,[program_update_date]
      ,[object_version_number]
      ,[topnode_pos_ctrl_enabled_flag]
	FOR XML RAW)) AS RowHash
FROM dbo.PER_ORG_STRUCTURE_VERSIONS_B0Landing l) src
JOIN dbo.PER_ORG_STRUCTURE_VERSIONS_B0Landing target ON src.[org_structure_version_id] = target.[org_structure_version_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_PAY_BASES_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_PAY_BASES_B0Landing] landing
    WHERE base.pay_basis_id = landing.pay_basis_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.[pay_basis_id]				     =  landing.[pay_basis_id]				
	   , base.[input_value_id]				 =  landing.[input_value_id]			
	   , base.[rate_id]					     =  landing.[rate_id]					
	   , base.[business_group_id]			 =  landing.[business_group_id]			
	   , base.[name]						 =  landing.[name]						
	   , base.[pay_basis]					 =  landing.[pay_basis]					
	   , base.[rate_basis]					 =  landing.[rate_basis]				
	   , base.[annualized_hours]			 =  landing.[annualized_hours]			
	   , base.[pay_annualization_factor]	 =  landing.[pay_annualization_factor]	
	   , base.[grade_annualization_factor]	 =  landing.[grade_annualization_factor]
	   , base.[attribute_category]			 =  landing.[attribute_category]		
	   , base.[attribute1]					 =  landing.[attribute1]				
	   , base.[attribute2]					 =  landing.[attribute2]				
	   , base.[attribute3]					 =  landing.[attribute3]				
	   , base.[attribute4]					 =  landing.[attribute4]				
	   , base.[attribute5]					 =  landing.[attribute5]				
	   , base.[attribute6]					 =  landing.[attribute6]				
	   , base.[attribute7]					 =  landing.[attribute7]				
	   , base.[attribute8]					 =  landing.[attribute8]				
	   , base.[attribute9]					 =  landing.[attribute9]				
	   , base.[attribute10]				     =  landing.[attribute10]				
	   , base.[attribute11]				     =  landing.[attribute11]				
	   , base.[attribute12]				     =  landing.[attribute12]				
	   , base.[attribute13]				     =  landing.[attribute13]				
	   , base.[attribute14]				     =  landing.[attribute14]				
	   , base.[attribute15]				     =  landing.[attribute15]				
	   , base.[attribute16]				     =  landing.[attribute16]				
	   , base.[attribute17]				     =  landing.[attribute17]				
	   , base.[attribute18]				     =  landing.[attribute18]				
	   , base.[attribute19]				     =  landing.[attribute19]				
	   , base.[attribute20]				     =  landing.[attribute20]				
	   , base.[last_update_date]			 =  landing.[last_update_date]			
	   , base.[last_updated_by]			     =  landing.[last_updated_by]			
	   , base.[last_update_login]			 =  landing.[last_update_login]			
	   , base.[created_by]				   	 =  landing.[created_by]				
	   , base.[creation_date]				 =  landing.[creation_date]				
	   , base.[information_category]		 =  landing.[information_category]		
	   , base.[information1]				 =  landing.[information1]				
	   , base.[information2]				 =  landing.[information2]				
	   , base.[information3]				 =  landing.[information3]				
	   , base.[information4]				 =  landing.[information4]				
	   , base.[information5]				 =  landing.[information5]				
	   , base.[information6]				 =  landing.[information6]				
	   , base.[information7]				 =  landing.[information7]				
	   , base.[information8]				 =  landing.[information8]				
	   , base.[information9]				 =  landing.[information9]				
	   , base.[information10]				 =  landing.[information10]				
	   , base.[information11]				 =  landing.[information11]				
	   , base.[information12]				 =  landing.[information12]				
	   , base.[information13]				 =  landing.[information13]				
	   , base.[information14]				 =  landing.[information14]				
	   , base.[information15]				 =  landing.[information15]				
	   , base.[information16]				 =  landing.[information16]				
	   , base.[information17]				 =  landing.[information17]				
	   , base.[information18]				 =  landing.[information18]				
	   , base.[information19]				 =  landing.[information19]				
	   , base.[information20]				 =  landing.[information20]				
	   , base.[object_version_number]		 =  landing.[object_version_number]		
	   , base.[comments]					 =  landing.[comments]					
       , base.[datalakeinserttime]           =  landing.datalakeinserttime
       , base.[RowHash]                      =  landing.RowHash
       , base.[BaseCreatedDate]              =  GETDATE()
       , base.[BaseCreatedBy]               =  suser_sname()
FROM [HR_Base].dbo.[PER_PAY_BASES_B0] base
JOIN [HR_Landing].dbo.[PER_PAY_BASES_B0Landing] landing ON base.pay_basis_id = landing.pay_basis_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [pay_basis_id],
HASHBYTES('MD5',
(SELECT  [pay_basis_id]				
       , [input_value_id]			
       , [rate_id]					
       , [business_group_id]			
       , [name]						
       , [pay_basis]					
       , [rate_basis]				
       , [annualized_hours]			
       , [pay_annualization_factor]	
       , [grade_annualization_factor]
       , [attribute_category]		
       , [attribute1]				
       , [attribute2]				
       , [attribute3]				
       , [attribute4]				
       , [attribute5]				
       , [attribute6]				
       , [attribute7]				
       , [attribute8]				
       , [attribute9]				
       , [attribute10]				
       , [attribute11]				
       , [attribute12]				
       , [attribute13]				
       , [attribute14]				
       , [attribute15]				
       , [attribute16]				
       , [attribute17]				
       , [attribute18]				
       , [attribute19]				
       , [attribute20]								
       , [information_category]		
       , [information1]				
       , [information2]				
       , [information3]				
       , [information4]				
       , [information5]				
       , [information6]				
       , [information7]				
       , [information8]				
       , [information9]				
       , [information10]				
       , [information11]				
       , [information12]				
       , [information13]				
       , [information14]				
       , [information15]				
       , [information16]				
       , [information17]				
       , [information18]				
       , [information19]				
       , [information20]				
       , [object_version_number]		
       , [comments] FOR XML RAW)) AS RowHash
FROM [dbo].PER_PAY_BASES_B0Landing l)src
JOIN [dbo].PER_PAY_BASES_B0Landing TARGET ON src.[pay_basis_id] = TARGET.[pay_basis_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"
DELETE FROM base
FROM dbo.[PER_PAY_PROPOSALS_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_PAY_PROPOSALS_B0Landing] landing
    WHERE base.pay_proposal_id = landing.pay_proposal_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.pay_proposal_id = landing.pay_proposal_id
      ,base.object_version_number = landing.object_version_number
      ,base.assignment_id = landing.assignment_id
      ,base.event_id = landing.event_id
      ,base.business_group_id = landing.business_group_id
      ,base.change_date = landing.change_date
      ,base.last_change_date = landing.last_change_date
      ,base.next_perf_review_date = landing.next_perf_review_date
      ,base.next_sal_review_date = landing.next_sal_review_date
      ,base.performance_rating = landing.performance_rating
      ,base.proposal_reason = landing.proposal_reason
      ,base.proposed_salary_n = landing.proposed_salary_n
      ,base.review_date = landing.review_date
      ,base.approved = landing.approved
      ,base.multiple_components = landing.multiple_components
      ,base.forced_ranking = landing.forced_ranking
      ,base.performance_review_id = landing.performance_review_id
      ,base.attribute_category = landing.attribute_category
      ,base.attribute1 = landing.attribute1
      ,base.attribute2 = landing.attribute2
      ,base.attribute3 = landing.attribute3
      ,base.attribute4 = landing.attribute4
      ,base.attribute5 = landing.attribute5
      ,base.attribute6 = landing.attribute6
      ,base.attribute7 = landing.attribute7
      ,base.attribute8 = landing.attribute8
      ,base.attribute9 = landing.attribute9
      ,base.attribute10 = landing.attribute10
      ,base.attribute11 = landing.attribute11
      ,base.attribute12 = landing.attribute12
      ,base.attribute13 = landing.attribute13
      ,base.attribute14 = landing.attribute14
      ,base.attribute15 = landing.attribute15
      ,base.attribute16 = landing.attribute16
      ,base.attribute17 = landing.attribute17
      ,base.attribute18 = landing.attribute18
      ,base.attribute19 = landing.attribute19
      ,base.attribute20 = landing.attribute20
      ,base.last_update_date = landing.last_update_date
      ,base.last_updated_by = landing.last_updated_by
      ,base.last_update_login = landing.last_update_login
      ,base.created_by = landing.created_by
      ,base.creation_date = landing.creation_date
      ,base.proposed_salary = landing.proposed_salary
      ,base.comments = landing.comments
      ,base.date_to = landing.date_to
      , base.[datalakeinserttime]           =  landing.datalakeinserttime
      , base.[RowHash]                      =  landing.RowHash
      , base.[BaseCreatedDate]              =  GETDATE()
      , base.[BaseCreatedBy]               =  suser_sname()
FROM [HR_Base].dbo.[PER_PAY_PROPOSALS_B0] base
JOIN [HR_Landing].dbo.[PER_PAY_PROPOSALS_B0Landing] landing ON base.pay_proposal_id = landing.pay_proposal_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [pay_proposal_id],
HASHBYTES('MD5',
(SELECT  [pay_proposal_id]
      ,[object_version_number]
      ,[assignment_id]
      ,[event_id]
      ,[business_group_id]
      ,[change_date]
      ,[last_change_date]
      ,[next_perf_review_date]
      ,[next_sal_review_date]
      ,[performance_rating]
      ,[proposal_reason]
      ,[proposed_salary_n]
      ,[review_date]
      ,[approved]
      ,[multiple_components]
      ,[forced_ranking]
      ,[performance_review_id]
      ,[attribute_category]
      ,[attribute1]
      ,[attribute2]
      ,[attribute3]
      ,[attribute4]
      ,[attribute5]
      ,[attribute6]
      ,[attribute7]
      ,[attribute8]
      ,[attribute9]
      ,[attribute10]
      ,[attribute11]
      ,[attribute12]
      ,[attribute13]
      ,[attribute14]
      ,[attribute15]
      ,[attribute16]
      ,[attribute17]
      ,[attribute18]
      ,[attribute19]
      ,[attribute20]
      ,[proposed_salary]
      ,[comments]
      ,[date_to]  FOR XML RAW)) AS RowHash
FROM [dbo].PER_PAY_PROPOSALS_B0Landing l)src
JOIN [dbo].PER_PAY_PROPOSALS_B0Landing TARGET ON src.[pay_proposal_id] = TARGET.pay_proposal_id

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_PERFORMANCE_REVIEWS_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_PERFORMANCE_REVIEWS_B0Landing] landing
    WHERE base.performance_review_id = landing.performance_review_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.[performance_review_id] = landing.performance_review_id,
      base.[event_id] = landing.event_id,
      base.[review_date] = landing.review_date,
      base.[performance_rating] = landing.performance_rating,
      base.[next_perf_review_date] = landing.next_perf_review_date,
      base.[attribute_category] = landing.attribute_category,
      base.[attribute1] = landing.attribute1,
      base.[attribute2] = landing.attribute2,
      base.[attribute3] = landing.attribute3,
      base.[attribute4] = landing.attribute4,
      base.[attribute5] = landing.attribute5,
      base.[attribute6] = landing.attribute6,
      base.[attribute7] = landing.attribute7,
      base.[attribute8] = landing.attribute8,
      base.[attribute9] = landing.attribute9,
      base.[attribute10] = landing.attribute10,
      base.[attribute11] = landing.attribute11,
      base.[attribute12] = landing.attribute12,
      base.[attribute13] = landing.attribute13,
      base.[attribute14] = landing.attribute14,
      base.[attribute15] = landing.attribute15,
      base.[attribute16] = landing.attribute16,
      base.[attribute17] = landing.attribute17,
      base.[attribute18] = landing.attribute18,
      base.[attribute19] = landing.attribute19,
      base.[attribute20] = landing.attribute20,
      base.[attribute21] = landing.attribute21,
      base.[attribute22] = landing.attribute22,
      base.[attribute23] = landing.attribute23,
      base.[attribute24] = landing.attribute24,
      base.[attribute25] = landing.attribute25,
      base.[attribute26] = landing.attribute26,
      base.[attribute27] = landing.attribute27,
      base.[attribute28] = landing.attribute28,
      base.[attribute29] = landing.attribute29,
      base.[attribute30] = landing.attribute30,
      base.[object_version_number] = landing.object_version_number,
      base.[last_update_date] = landing.last_update_date,
      base.[last_updated_by] = landing.last_updated_by,
      base.[last_update_login] = landing.last_update_login,
      base.[created_by] = landing.created_by,
      base.[creation_date] = landing.creation_date,
      base.[datalakeinserttime] = landing.datalakeinserttime,
      base.[RowHash] = landing.RowHash,
      base.[BaseCreatedDate] = GETDATE(),
      base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[PER_PERFORMANCE_REVIEWS_B0] base
JOIN [HR_Landing].dbo.[PER_PERFORMANCE_REVIEWS_B0Landing] landing ON base.performance_review_id = landing.performance_review_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [performance_review_id],
HASHBYTES('MD5',
(SELECT [performance_review_id]
      ,[person_id]
      ,[event_id]
      ,[review_date]
      ,[performance_rating]
      ,[next_perf_review_date]
      ,[attribute_category]
      ,[attribute1]
      ,[attribute2]
      ,[attribute3]
      ,[attribute4]
      ,[attribute5]
      ,[attribute6]
      ,[attribute7]
      ,[attribute8]
      ,[attribute9]
      ,[attribute10]
      ,[attribute11]
      ,[attribute12]
      ,[attribute13]
      ,[attribute14]
      ,[attribute15]
      ,[attribute16]
      ,[attribute17]
      ,[attribute18]
      ,[attribute19]
      ,[attribute20]
      ,[attribute21]
      ,[attribute22]
      ,[attribute23]
      ,[attribute24]
      ,[attribute25]
      ,[attribute26]
      ,[attribute27]
      ,[attribute28]
      ,[attribute29]
      ,[attribute30]
      ,[object_version_number]
      FOR XML RAW)) AS RowHash
FROM [dbo].PER_PERFORMANCE_REVIEWS_B0Landing l)src
JOIN [dbo].PER_PERFORMANCE_REVIEWS_B0Landing TARGET ON src.[performance_review_id] = TARGET.[performance_review_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_PERIODS_OF_PLACEMENT_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_PERIODS_OF_PLACEMENT_B0Landing] landing
    WHERE base.period_of_placement_id = landing.period_of_placement_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"



UPDATE base
   SET
       base.period_of_placement_id = landing.period_of_placement_id
      ,base.object_version_number = landing.object_version_number
      ,base.business_group_id = landing.business_group_id
      ,base.person_id = landing.person_id
      ,base.date_start = landing.date_start
      ,base.actual_termination_date = landing.actual_termination_date
      ,base.projected_termination_date = landing.projected_termination_date
      ,base.termination_reason = landing.termination_reason
      ,base.attribute_category = landing.attribute_category
      ,base.attribute1 = landing.attribute1
      ,base.attribute2 = landing.attribute2
      ,base.attribute3 = landing.attribute3
      ,base.attribute4 = landing.attribute4
      ,base.attribute5 = landing.attribute5
      ,base.attribute6 = landing.attribute6
      ,base.attribute7 = landing.attribute7
      ,base.attribute8 = landing.attribute8
      ,base.attribute9 = landing.attribute9
      ,base.attribute10 = landing.attribute10
      ,base.attribute11 = landing.attribute11
      ,base.attribute12 = landing.attribute12
      ,base.attribute13 = landing.attribute13
      ,base.attribute14 = landing.attribute14
      ,base.attribute15 = landing.attribute15
      ,base.attribute16 = landing.attribute16
      ,base.attribute17 = landing.attribute17
      ,base.attribute18 = landing.attribute18
      ,base.attribute19 = landing.attribute19
      ,base.attribute20 = landing.attribute20
      ,base.attribute21 = landing.attribute21
      ,base.attribute22 = landing.attribute22
      ,base.attribute23 = landing.attribute23
      ,base.attribute24 = landing.attribute24
      ,base.attribute25 = landing.attribute25
      ,base.attribute26 = landing.attribute26
      ,base.attribute27 = landing.attribute27
      ,base.attribute28 = landing.attribute28
      ,base.attribute29 = landing.attribute29
      ,base.attribute30 = landing.attribute30
      ,base.information_category = landing.information_category
      ,base.information1 = landing.information1
      ,base.information2 = landing.information2
      ,base.information3 = landing.information3
      ,base.information4 = landing.information4
      ,base.information5 = landing.information5
      ,base.information6 = landing.information6
      ,base.information7 = landing.information7
      ,base.information8 = landing.information8
      ,base.information9 = landing.information9
      ,base.information10 = landing.information10
      ,base.information11 = landing.information11
      ,base.information12 = landing.information12
      ,base.information13 = landing.information13
      ,base.information14 = landing.information14
      ,base.information15 = landing.information15
      ,base.information16 = landing.information16
      ,base.information17 = landing.information17
      ,base.information18 = landing.information18
      ,base.information19 = landing.information19
      ,base.information20 = landing.information20
      ,base.information21 = landing.information21
      ,base.information22 = landing.information22
      ,base.information23 = landing.information23
      ,base.information24 = landing.information24
      ,base.information25 = landing.information25
      ,base.information26 = landing.information26
      ,base.information27 = landing.information27
      ,base.information28 = landing.information28
      ,base.information29 = landing.information29
      ,base.information30 = landing.information30
      ,base.created_by = landing.created_by
      ,base.creation_date = landing.creation_date
      ,base.last_updated_by = landing.last_updated_by
      ,base.last_update_date = landing.last_update_date
      ,base.last_update_login = landing.last_update_login
      ,base.final_process_date = landing.final_process_date
      ,base.last_standard_process_date = landing.last_standard_process_date
      ,base.[datalakeinserttime] = landing.datalakeinserttime
      ,base.[RowHash] = landing.RowHash
      ,base.[BaseCreatedDate] = GETDATE()
      ,base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[PER_PERIODS_OF_PLACEMENT_B0] base
JOIN [HR_Landing].dbo.[PER_PERIODS_OF_PLACEMENT_B0Landing] landing ON base.period_of_placement_id = landing.period_of_placement_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [period_of_placement_id],
HASHBYTES('MD5',
(SELECT [period_of_placement_id]
      ,[object_version_number]
      ,[business_group_id]
      ,[person_id]
      ,[date_start]
      ,[actual_termination_date]
      ,[projected_termination_date]
      ,[termination_reason]
      ,[attribute_category]
      ,[attribute1]
      ,[attribute2]
      ,[attribute3]
      ,[attribute4]
      ,[attribute5]
      ,[attribute6]
      ,[attribute7]
      ,[attribute8]
      ,[attribute9]
      ,[attribute10]
      ,[attribute11]
      ,[attribute12]
      ,[attribute13]
      ,[attribute14]
      ,[attribute15]
      ,[attribute16]
      ,[attribute17]
      ,[attribute18]
      ,[attribute19]
      ,[attribute20]
      ,[attribute21]
      ,[attribute22]
      ,[attribute23]
      ,[attribute24]
      ,[attribute25]
      ,[attribute26]
      ,[attribute27]
      ,[attribute28]
      ,[attribute29]
      ,[attribute30]
      ,[information_category]
      ,[information1]
      ,[information2]
      ,[information3]
      ,[information4]
      ,[information5]
      ,[information6]
      ,[information7]
      ,[information8]
      ,[information9]
      ,[information10]
      ,[information11]
      ,[information12]
      ,[information13]
      ,[information14]
      ,[information15]
      ,[information16]
      ,[information17]
      ,[information18]
      ,[information19]
      ,[information20]
      ,[information21]
      ,[information22]
      ,[information23]
      ,[information24]
      ,[information25]
      ,[information26]
      ,[information27]
      ,[information28]
      ,[information29]
      ,[information30]
      ,[final_process_date]
      ,[last_standard_process_date]
      FOR XML RAW)) AS RowHash
FROM [dbo].[PER_PERIODS_OF_PLACEMENT_B0Landing] l)src
JOIN [dbo].[PER_PERIODS_OF_PLACEMENT_B0Landing] TARGET ON src.[period_of_placement_id] = TARGET.[period_of_placement_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_PERIODS_OF_SERVICE_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_PERIODS_OF_SERVICE_B0Landing] landing
    WHERE base.period_of_service_id = landing.period_of_service_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.period_of_service_id = landing.period_of_service_id
      ,base.business_group_id = landing.business_group_id
      ,base.termination_accepted_person_id = landing.termination_accepted_person_id
      ,base.person_id = landing.person_id
      ,base.date_start = landing.date_start
      ,base.accepted_termination_date = landing.accepted_termination_date
      ,base.actual_termination_date = landing.actual_termination_date
      ,base.final_process_date = landing.final_process_date
      ,base.last_standard_process_date = landing.last_standard_process_date
      ,base.leaving_reason = landing.leaving_reason
      ,base.notified_termination_date = landing.notified_termination_date
      ,base.projected_termination_date = landing.projected_termination_date
      ,base.adjusted_svc_date = landing.adjusted_svc_date
      ,base.request_id = landing.request_id
      ,base.program_application_id = landing.program_application_id
      ,base.program_id = landing.program_id
      ,base.program_update_date = landing.program_update_date
      ,base.attribute_category = landing.attribute_category
      ,base.attribute1 = landing.attribute1
      ,base.attribute2 = landing.attribute2
      ,base.attribute3 = landing.attribute3
      ,base.attribute4 = landing.attribute4
      ,base.attribute5 = landing.attribute5
      ,base.attribute6 = landing.attribute6
      ,base.attribute7 = landing.attribute7
      ,base.attribute8 = landing.attribute8
      ,base.attribute9 = landing.attribute9
      ,base.attribute10 = landing.attribute10
      ,base.attribute11 = landing.attribute11
      ,base.attribute12 = landing.attribute12
      ,base.attribute13 = landing.attribute13
      ,base.attribute14 = landing.attribute14
      ,base.attribute15 = landing.attribute15
      ,base.attribute16 = landing.attribute16
      ,base.attribute17 = landing.attribute17
      ,base.attribute18 = landing.attribute18
      ,base.attribute19 = landing.attribute19
      ,base.attribute20 = landing.attribute20
      ,base.last_update_date = landing.last_update_date
      ,base.last_updated_by = landing.last_updated_by
      ,base.last_update_login = landing.last_update_login
      ,base.created_by = landing.created_by
      ,base.creation_date = landing.creation_date
      ,base.object_version_number = landing.object_version_number
      ,base.prior_employment_ssp_paid_to = landing.prior_employment_ssp_paid_to
      ,base.prior_employment_ssp_weeks = landing.prior_employment_ssp_weeks
      ,base.pds_information_category = landing.pds_information_category
      ,base.pds_information1 = landing.pds_information1
      ,base.pds_information2 = landing.pds_information2
      ,base.pds_information3 = landing.pds_information3
      ,base.pds_information4 = landing.pds_information4
      ,base.pds_information5 = landing.pds_information5
      ,base.pds_information6 = landing.pds_information6
      ,base.pds_information7 = landing.pds_information7
      ,base.pds_information8 = landing.pds_information8
      ,base.pds_information9 = landing.pds_information9
      ,base.pds_information10 = landing.pds_information10
      ,base.pds_information11 = landing.pds_information11
      ,base.pds_information12 = landing.pds_information12
      ,base.pds_information13 = landing.pds_information13
      ,base.pds_information14 = landing.pds_information14
      ,base.pds_information15 = landing.pds_information15
      ,base.pds_information16 = landing.pds_information16
      ,base.pds_information17 = landing.pds_information17
      ,base.pds_information18 = landing.pds_information18
      ,base.pds_information19 = landing.pds_information19
      ,base.pds_information20 = landing.pds_information20
      ,base.pds_information21 = landing.pds_information21
      ,base.pds_information22 = landing.pds_information22
      ,base.pds_information23 = landing.pds_information23
      ,base.pds_information24 = landing.pds_information24
      ,base.pds_information25 = landing.pds_information25
      ,base.pds_information26 = landing.pds_information26
      ,base.pds_information27 = landing.pds_information27
      ,base.pds_information28 = landing.pds_information28
      ,base.pds_information29 = landing.pds_information29
      ,base.pds_information30 = landing.pds_information30
      ,base.comments = landing.comments
      ,base.[datalakeinserttime] = landing.datalakeinserttime
      ,base.[RowHash] = landing.RowHash
      ,base.[BaseCreatedDate] = GETDATE()
      ,base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[PER_PERIODS_OF_SERVICE_B0] base
JOIN [HR_Landing].dbo.[PER_PERIODS_OF_SERVICE_B0Landing] landing ON base.period_of_service_id = landing.period_of_service_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [period_of_service_id],
HASHBYTES('MD5',
(SELECT [period_of_service_id]
      ,[business_group_id]
      ,[termination_accepted_person_id]
      ,[person_id]
      ,[date_start]
      ,[accepted_termination_date]
      ,[actual_termination_date]
      ,[final_process_date]
      ,[last_standard_process_date]
      ,[leaving_reason]
      ,[notified_termination_date]
      ,[projected_termination_date]
      ,[adjusted_svc_date]
      ,[request_id]
      ,[program_application_id]
      ,[program_id]
      ,[program_update_date]
      ,[attribute_category]
      ,[attribute1]
      ,[attribute2]
      ,[attribute3]
      ,[attribute4]
      ,[attribute5]
      ,[attribute6]
      ,[attribute7]
      ,[attribute8]
      ,[attribute9]
      ,[attribute10]
      ,[attribute11]
      ,[attribute12]
      ,[attribute13]
      ,[attribute14]
      ,[attribute15]
      ,[attribute16]
      ,[attribute17]
      ,[attribute18]
      ,[attribute19]
      ,[attribute20]
      ,[object_version_number]
      ,[prior_employment_ssp_paid_to]
      ,[prior_employment_ssp_weeks]
      ,[pds_information_category]
      ,[pds_information1]
      ,[pds_information2]
      ,[pds_information3]
      ,[pds_information4]
      ,[pds_information5]
      ,[pds_information6]
      ,[pds_information7]
      ,[pds_information8]
      ,[pds_information9]
      ,[pds_information10]
      ,[pds_information11]
      ,[pds_information12]
      ,[pds_information13]
      ,[pds_information14]
      ,[pds_information15]
      ,[pds_information16]
      ,[pds_information17]
      ,[pds_information18]
      ,[pds_information19]
      ,[pds_information20]
      ,[pds_information21]
      ,[pds_information22]
      ,[pds_information23]
      ,[pds_information24]
      ,[pds_information25]
      ,[pds_information26]
      ,[pds_information27]
      ,[pds_information28]
      ,[pds_information29]
      ,[pds_information30]
      ,[comments]
      FOR XML RAW)) AS RowHash
FROM [dbo].PER_PERIODS_OF_SERVICE_B0Landing l)src
JOIN [dbo].PER_PERIODS_OF_SERVICE_B0Landing TARGET ON src.[period_of_service_id] = TARGET.[period_of_service_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_PERSON_ANALYSES_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_PERSON_ANALYSES_B0Landing] landing
    WHERE base.person_analysis_id = landing.person_analysis_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.[person_analysis_id]      = landing.person_analysis_id
      , base.[business_group_id]	  =   landing.[business_group_id]		
      , base.[analysis_criteria_id]	  =   landing.[analysis_criteria_id]	
      , base.[person_id]			  =   landing.[person_id]				
      , base.[date_from]			  =   landing.[date_from]				
      , base.[date_to]				  =   landing.[date_to]				
      , base.[id_flex_num]			  =   landing.[id_flex_num]			
      , base.[request_id]			  =   landing.[request_id]				
      , base.[program_application_id] =   landing.[program_application_id]	
      , base.[program_id]			  =   landing.[program_id]				
      , base.[program_update_date]	  =   landing.[program_update_date]	
      , base.[attribute_category]	  =   landing.[attribute_category] 		
      , base.[attribute1]			  =   landing.[attribute1]				
      , base.[attribute2]			  =   landing.[attribute2]				
      , base.[attribute3]			  =   landing.[attribute3]				
      , base.[attribute4]			  =   landing.[attribute4]				
      , base.[attribute5]			  =   landing.[attribute5]				
      , base.[attribute6]			  =   landing.[attribute6]				
      , base.[attribute7]			  =   landing.[attribute7]				
      , base.[attribute8]			  =   landing.[attribute8]				
      , base.[attribute9]			  =   landing.[attribute9]				
      , base.[attribute10]			  =   landing.[attribute10]			
      , base.[attribute11]			  =   landing.[attribute11]			
      , base.[attribute12]			  =   landing.[attribute12]			
      , base.[attribute13]			  =   landing.[attribute13]			
      , base.[attribute14]			  =   landing.[attribute14]			
      , base.[attribute15]			  =   landing.[attribute15]			
      , base.[attribute16]			  =   landing.[attribute16]			
      , base.[attribute17]			  =   landing.[attribute17]			
      , base.[attribute18]			  =   landing.[attribute18]			
      , base.[attribute19]			  =   landing.[attribute19]			
      , base.[attribute20]			  =   landing.[attribute20]			
      , base.[last_update_date]		  =   landing.[last_update_date]		
      , base.[last_updated_by]		  =   landing.[last_updated_by]		
      , base.[last_update_login]	  =   landing.[last_update_login]		
      , base.[created_by]			  =   landing.[created_by]				
      , base.[creation_date]		  =   landing.[creation_date]			
      , base.[object_version_number]  =   landing.[object_version_number]	
      , base.[party_id]				  =   landing.[party_id]				
      , base.[comments]				  =   landing.[comments]				
      , base.[datalakeinserttime]	  =   landing.[datalakeinserttime]		
      , base.[RowHash]				  =   landing.[RowHash]				
      , base.[BaseCreatedDate]		  =   GETDATE()			
      , base.[BaseCreatedBy]		  =   suser_sname()	
FROM [dbo].[PER_PERSON_ANALYSES_B0] base
JOIN [HR_Landing].dbo.[PER_PERSON_ANALYSES_B0Landing] landing ON base.person_analysis_id = landing.person_analysis_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [person_analysis_id],
HASHBYTES('MD5',
(SELECT [person_analysis_id]
      ,[business_group_id]
      ,[analysis_criteria_id]
      ,[person_id]
      ,[date_from]
      ,[date_to]
      ,[id_flex_num]
      ,[request_id]
      ,[program_application_id]
      ,[program_id]
      ,[program_update_date]
      ,[attribute_category]
      ,[attribute1]
      ,[attribute2]
      ,[attribute3]
      ,[attribute4]
      ,[attribute5]
      ,[attribute6]
      ,[attribute7]
      ,[attribute8]
      ,[attribute9]
      ,[attribute10]
      ,[attribute11]
      ,[attribute12]
      ,[attribute13]
      ,[attribute14]
      ,[attribute15]
      ,[attribute16]
      ,[attribute17]
      ,[attribute18]
      ,[attribute19]
      ,[attribute20]
      ,[object_version_number]
      ,[party_id]
      ,[comments]
  FOR XML RAW)) AS RowHash
FROM [dbo].PER_PERSON_ANALYSES_B0Landing l)src
JOIN [dbo].PER_PERSON_ANALYSES_B0Landing TARGET ON src.[person_analysis_id] = TARGET.[person_analysis_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_PERSON_TYPES_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_PERSON_TYPES_B0Landing] landing
    WHERE base.person_type_id = landing.person_type_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.[person_type_id] = landing.person_type_id
      , base.[business_group_id] = landing.business_group_id
      , base.[active_flag] = landing.active_flag
      , base.[default_flag] = landing.default_flag
      , base.[system_person_type] = landing.system_person_type
      , base.[user_person_type] = landing.user_person_type
      , base.[last_update_date] = landing.last_update_date
      , base.[last_updated_by] = landing.last_updated_by
      , base.[last_update_login] = landing.last_update_login
      , base.[created_by] = landing.created_by
      , base.[creation_date] = landing.creation_date
      , base.[seeded_person_type_key] = landing.seeded_person_type_key
      , base.[zd_edition_name] = landing.zd_edition_name
      , base.[datalakeinserttime] = landing.datalakeinserttime
      , base.[RowHash] = landing.RowHash
      , base.[BaseCreatedDate] = GETDATE()
      , base.[BaseCreatedBy] = suser_sname()
FROM [dbo].[PER_PERSON_TYPES_B0] base
JOIN [HR_Landing].dbo.[PER_PERSON_TYPES_B0Landing] landing ON base.person_type_id = landing.person_type_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [person_type_id],
HASHBYTES('MD5',
(SELECT [person_type_id]
      ,[business_group_id]
      ,[active_flag]
      ,[default_flag]
      ,[system_person_type]
      ,[user_person_type]
      ,[seeded_person_type_key]
      ,[zd_edition_name]
 FOR XML RAW)) AS RowHash
FROM [dbo].PER_PERSON_TYPES_B0Landing l)src
JOIN [dbo].PER_PERSON_TYPES_B0Landing TARGET ON src.[person_type_id] = TARGET.[person_type_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_PHONES_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_PHONES_B0Landing] landing
    WHERE base.phone_id = landing.phone_id
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.[phone_id] =			 landing.phone_id,
      base.[date_from] =			 landing.date_from,
      base.[date_to] =				 landing.date_to, 
      base.[phone_type] =			 landing.phone_type, 
      base.[phone_number] =			 landing.phone_number, 
      base.[parent_id] =			 landing.parent_id, 
      base.[parent_table] =			 landing.parent_table,
      base.[attribute_category] =	 landing.attribute_category,
      base.[attribute1] =			 landing.attribute1,
      base.[attribute2] =			 landing.attribute2,
      base.[attribute3] =			 landing.attribute3,
      base.[attribute4] =			 landing.attribute4,
      base.[attribute5] =			 landing.attribute5,
      base.[attribute6] =			 landing.attribute6,
      base.[attribute7] =			 landing.attribute7,
      base.[attribute8] =			 landing.attribute8,
      base.[attribute9] =			 landing.attribute9,
      base.[attribute10] =			 landing.attribute10,
      base.[attribute11] =			 landing.attribute11,
      base.[attribute12] =			 landing.attribute12,
      base.[attribute13] =			 landing.attribute13,
      base.[attribute14] =			 landing.attribute14,
      base.[attribute15] =			 landing.attribute15,
      base.[attribute16] =			 landing.attribute16,
      base.[attribute17] =			 landing.attribute17,
      base.[attribute18] =			 landing.attribute18,
      base.[attribute19] =			 landing.attribute19,
      base.[attribute20] =			 landing.attribute20,
      base.[attribute21] =			 landing.attribute21,
      base.[attribute22] =			 landing.attribute22,
      base.[attribute23] =			 landing.attribute23,
      base.[attribute24] =			 landing.attribute24,
      base.[attribute25] =			 landing.attribute25,
      base.[attribute26] =			 landing.attribute26,
      base.[attribute27] =			 landing.attribute27,
      base.[attribute28] =			 landing.attribute28,
      base.[attribute29] =			 landing.attribute29,
      base.[attribute30] =			 landing.attribute30,
      base.[created_by] =			 landing.created_by, 
      base.[creation_date] =		 landing.creation_date,
      base.[last_updated_by] =		 landing.last_updated_by,
      base.[last_update_date] =		 landing.last_update_date,
      base.[last_update_login] =	 landing.last_update_login,
      base.[object_version_number] = landing.object_version_number,
      base.[party_id] =				 landing.party_id, 
      base.[validity] =				 landing.validity, 
      base.[datalakeinserttime] =	 landing.datalakeinserttime,
      base.[RowHash] =				 landing.RowHash,
      base.[BaseCreatedDate] =		 GETDATE(),
      base.[BaseCreatedBy] =		 suser_sname()
FROM [HR_Base].dbo.[PER_PHONES_B0] base
JOIN [HR_Landing].dbo.[PER_PHONES_B0Landing] landing ON base.phone_id = landing.phone_id
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [phone_id],
HASHBYTES('MD5',
(SELECT  [phone_id]
		, [date_from]
		, [date_to]
		, [phone_type]
		, [phone_number]
		, [parent_id]
		, [parent_table]
		, [attribute_category]
		, [attribute1]
		, [attribute2]
		, [attribute3]
		, [attribute4]
		, [attribute5]
		, [attribute6]
		, [attribute7]
		, [attribute8]
		, [attribute9]
		, [attribute10]
		, [attribute11]
		, [attribute12]
		, [attribute13]
		, [attribute14]
		, [attribute15]
		, [attribute16]
		, [attribute17]
		, [attribute18]
		, [attribute19]
		, [attribute20]
		, [attribute21]
		, [attribute22]
		, [attribute23]
		, [attribute24]
		, [attribute25]
		, [attribute26]
		, [attribute27]
		, [attribute28]
		, [attribute29]
		, [attribute30]
		, [object_version_number]
		, [party_id]
		, [validity] FOR XML RAW)) AS RowHash
FROM [dbo].PER_PHONES_B0Landing l)src
JOIN [dbo].PER_PHONES_B0Landing TARGET ON src.[phone_id] = TARGET.[phone_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_QUALIFICATIONS_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_QUALIFICATIONS_B0Landing] landing
    WHERE base.[qualification_id] = landing.[qualification_id]
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.[qualification_id]				= landing.qualification_id
      ,base.[business_group_id]				= landing.business_group_id
      ,base.[object_version_number]			= landing.object_version_number
      ,base.[person_id]						= landing.person_id
      ,base.[title]							= landing.title
      ,base.[grade_attained]				= landing.grade_attained
      ,base.[status]						= landing.status
      ,base.[awarded_date]					= landing.awarded_date
      ,base.[fee]							= landing.fee
      ,base.[fee_currency]					= landing.fee_currency
      ,base.[training_completed_amount]		= landing.training_completed_amount
      ,base.[reimbursement_arrangements]	= landing.reimbursement_arrangements
      ,base.[training_completed_units]		= landing.training_completed_units
      ,base.[total_training_amount]			= landing.total_training_amount
      ,base.[start_date]					= landing.start_date
      ,base.[end_date]						= landing.end_date
      ,base.[license_number]				= landing.license_number
      ,base.[expiry_date]					= landing.expiry_date
      ,base.[license_restrictions]			= landing.license_restrictions
      ,base.[projected_completion_date]		= landing.projected_completion_date
      ,base.[awarding_body]					= landing.awarding_body
      ,base.[tuition_method]				= landing.tuition_method
      ,base.[group_ranking]					= landing.group_ranking
      ,base.[comments]						= landing.comments
      ,base.[qualification_type_id]			= landing.qualification_type_id
      ,base.[attendance_id]					= landing.attendance_id
      ,base.[attribute_category]			= landing.attribute_category
      ,base.[attribute1]					= landing.attribute1
      ,base.[attribute2]					= landing.attribute2
      ,base.[attribute3]					= landing.attribute3
      ,base.[attribute4]					= landing.attribute4
      ,base.[attribute5]					= landing.attribute5
      ,base.[attribute6]					= landing.attribute6
      ,base.[attribute7]					= landing.attribute7
      ,base.[attribute8]					= landing.attribute8
      ,base.[attribute9]					= landing.attribute9
      ,base.[attribute10]					= landing.attribute10
      ,base.[attribute11]					= landing.attribute11
      ,base.[attribute12]					= landing.attribute12
      ,base.[attribute13]					= landing.attribute13
      ,base.[attribute14]					= landing.attribute14
      ,base.[attribute15]					= landing.attribute15
      ,base.[attribute16]					= landing.attribute16
      ,base.[attribute17]					= landing.attribute17
      ,base.[attribute18]					= landing.attribute18
      ,base.[attribute19]					= landing.attribute19
      ,base.[attribute20]					= landing.attribute20
      ,base.[last_update_date]				= landing.last_update_date
      ,base.[last_updated_by]				= landing.last_updated_by
      ,base.[last_update_login]				= landing.last_update_login
      ,base.[created_by]					= landing.created_by
      ,base.[creation_date]					= landing.creation_date
      ,base.[party_id]						= landing.party_id
      ,base.[professional_body_name]		= landing.professional_body_name
      ,base.[membership_number]				= landing.membership_number
      ,base.[membership_category]			= landing.membership_category
      ,base.[subscription_payment_method]	= landing.subscription_payment_method
      ,base.[qua_information_category]		= landing.qua_information_category
      ,base.[qua_information1]				= landing.qua_information1
      ,base.[qua_information2]				= landing.qua_information2
      ,base.[qua_information3]				= landing.qua_information3
      ,base.[qua_information4]				= landing.qua_information4
      ,base.[qua_information5]				= landing.qua_information5
      ,base.[qua_information6]				= landing.qua_information6
      ,base.[qua_information7]				= landing.qua_information7
      ,base.[qua_information8]				= landing.qua_information8
      ,base.[qua_information9]				= landing.qua_information9
      ,base.[qua_information10]				= landing.qua_information10
      ,base.[qua_information11]				= landing.qua_information11
      ,base.[qua_information12]				= landing.qua_information12
      ,base.[qua_information13]				= landing.qua_information13
      ,base.[qua_information14]				= landing.qua_information14
      ,base.[qua_information15]				= landing.qua_information15
      ,base.[qua_information16]				= landing.qua_information16
      ,base.[qua_information17]				= landing.qua_information17
      ,base.[qua_information18]				= landing.qua_information18
      ,base.[qua_information19]				= landing.qua_information19
      ,base.[qua_information20]				= landing.qua_information20
      ,base.[datalakeinserttime]			= landing.[datalakeinserttime]
      ,base.[RowHash]						= landing.[RowHash]
      ,base.[BaseCreatedDate]				= GETDATE()
      ,base.[BaseCreatedBy]					= suser_sname()
FROM [HR_Base].dbo.[PER_QUALIFICATIONS_B0] base
JOIN [HR_Landing].dbo.[PER_QUALIFICATIONS_B0Landing] landing ON base.[qualification_id] = landing.[qualification_id]
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [qualification_id],
HASHBYTES('MD5',
(SELECT [qualification_id]
      ,[business_group_id]
      ,[object_version_number]
      ,[person_id]
      ,[title]
      ,[grade_attained]
      ,[status]
      ,[awarded_date]
      ,[fee]
      ,[fee_currency]
      ,[training_completed_amount]
      ,[reimbursement_arrangements]
      ,[training_completed_units]
      ,[total_training_amount]
      ,[start_date]
      ,[end_date]
      ,[license_number]
      ,[expiry_date]
      ,[license_restrictions]
      ,[projected_completion_date]
      ,[awarding_body]
      ,[tuition_method]
      ,[group_ranking]
      ,[comments]
      ,[qualification_type_id]
      ,[attendance_id]
      ,[attribute_category]
      ,[attribute1]
      ,[attribute2]
      ,[attribute3]
      ,[attribute4]
      ,[attribute5]
      ,[attribute6]
      ,[attribute7]
      ,[attribute8]
      ,[attribute9]
      ,[attribute10]
      ,[attribute11]
      ,[attribute12]
      ,[attribute13]
      ,[attribute14]
      ,[attribute15]
      ,[attribute16]
      ,[attribute17]
      ,[attribute18]
      ,[attribute19]
      ,[attribute20]
      ,[last_update_date]
      ,[last_updated_by]
      ,[last_update_login]
      ,[created_by]
      ,[creation_date]
      ,[party_id]
      ,[professional_body_name]
      ,[membership_number]
      ,[membership_category]
      ,[subscription_payment_method]
      ,[qua_information_category]
      ,[qua_information1]
      ,[qua_information2]
      ,[qua_information3]
      ,[qua_information4]
      ,[qua_information5]
      ,[qua_information6]
      ,[qua_information7]
      ,[qua_information8]
      ,[qua_information9]
      ,[qua_information10]
      ,[qua_information11]
      ,[qua_information12]
      ,[qua_information13]
      ,[qua_information14]
      ,[qua_information15]
      ,[qua_information16]
      ,[qua_information17]
      ,[qua_information18]
      ,[qua_information19]
      ,[qua_information20] FOR XML RAW)) AS RowHash
FROM [dbo].PER_QUALIFICATIONS_B0Landing l)src
JOIN [dbo].PER_QUALIFICATIONS_B0Landing TARGET ON src.[qualification_id] = TARGET.[qualification_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"DELETE FROM base
FROM dbo.[PER_QUALIFICATION_TYPES_B0] base
WHERE NOT EXISTS
(
    SELECT 1
    FROM [HR_Landing].dbo.[PER_QUALIFICATION_TYPES_B0Landing] landing
    WHERE base.[qualification_type_id] = landing.[qualification_type_id]
);

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE base
   SET base.qualification_type_id = landing.qualification_type_id
      ,base.name = landing.name
      ,base.category = landing.category
      ,base.rank = landing.rank
      ,base.object_version_number = landing.object_version_number
      ,base.attribute_category = landing.attribute_category
      ,base.attribute1 = landing.attribute1
      ,base.attribute2 = landing.attribute2
      ,base.attribute3 = landing.attribute3
      ,base.attribute4 = landing.attribute4
      ,base.attribute5 = landing.attribute5
      ,base.attribute6 = landing.attribute6
      ,base.attribute7 = landing.attribute7
      ,base.attribute8 = landing.attribute8
      ,base.attribute9 = landing.attribute9
      ,base.attribute10 = landing.attribute10
      ,base.attribute11 = landing.attribute11
      ,base.attribute12 = landing.attribute12
      ,base.attribute13 = landing.attribute13
      ,base.attribute14 = landing.attribute14
      ,base.attribute15 = landing.attribute15
      ,base.attribute16 = landing.attribute16
      ,base.attribute17 = landing.attribute17
      ,base.attribute18 = landing.attribute18
      ,base.attribute19 = landing.attribute19
      ,base.attribute20 = landing.attribute20
      ,base.last_update_date = landing.last_update_date
      ,base.last_updated_by = landing.last_updated_by
      ,base.last_update_login = landing.last_update_login
      ,base.created_by = landing.created_by
      ,base.creation_date = landing.creation_date
      ,base.information1 = landing.information1
      ,base.information2 = landing.information2
      ,base.information3 = landing.information3
      ,base.information4 = landing.information4
      ,base.information5 = landing.information5
      ,base.information6 = landing.information6
      ,base.information7 = landing.information7
      ,base.information8 = landing.information8
      ,base.information9 = landing.information9
      ,base.information10 = landing.information10
      ,base.information11 = landing.information11
      ,base.information12 = landing.information12
      ,base.information13 = landing.information13
      ,base.information14 = landing.information14
      ,base.information15 = landing.information15
      ,base.information16 = landing.information16
      ,base.information17 = landing.information17
      ,base.information18 = landing.information18
      ,base.information19 = landing.information19
      ,base.information20 = landing.information20
      ,base.information21 = landing.information21
      ,base.information22 = landing.information22
      ,base.information23 = landing.information23
      ,base.information24 = landing.information24
      ,base.information25 = landing.information25
      ,base.information26 = landing.information26
      ,base.information27 = landing.information27
      ,base.information28 = landing.information28
      ,base.information29 = landing.information29
      ,base.information30 = landing.information30
      ,base.information_category = landing.information_category
      ,base.qual_framework_id = landing.qual_framework_id
      ,base.qualification_type = landing.qualification_type
      ,base.credit_type = landing.credit_type
      ,base.credits = landing.credits
      ,base.level_type = landing.level_type
      ,base.level_number = landing.level_number
      ,base.field = landing.field
      ,base.sub_field = landing.sub_field
      ,base.provider = landing.provider
      ,base.qa_organization = landing.qa_organization
      ,base.zd_edition_name = landing.zd_edition_name
      ,base.[datalakeinserttime] = landing.[datalakeinserttime]
      ,base.[RowHash] = landing.[RowHash]
      ,base.[BaseCreatedDate]	= GETDATE()
      ,base.[BaseCreatedBy] = suser_sname()
FROM [HR_Base].dbo.[PER_QUALIFICATION_TYPES_B0] base
JOIN [HR_Landing].dbo.[PER_QUALIFICATION_TYPES_B0Landing] landing ON base.[qualification_type_id] = landing.[qualification_type_id]
WHERE base.RowHash != landing.RowHash;

SELECT @@ROWCOUNT AS UpdateCount;"
"UPDATE target
SET target.RowHash = src.RowHash
FROM 
(SELECT [qualification_type_id],
HASHBYTES('MD5',
(SELECT [qualification_type_id]
      ,[name]
      ,[category]
      ,[rank]
      ,[object_version_number]
      ,[attribute_category]
      ,[attribute1]
      ,[attribute2]
      ,[attribute3]
      ,[attribute4]
      ,[attribute5]
      ,[attribute6]
      ,[attribute7]
      ,[attribute8]
      ,[attribute9]
      ,[attribute10]
      ,[attribute11]
      ,[attribute12]
      ,[attribute13]
      ,[attribute14]
      ,[attribute15]
      ,[attribute16]
      ,[attribute17]
      ,[attribute18]
      ,[attribute19]
      ,[attribute20]
      ,[information1]
      ,[information2]
      ,[information3]
      ,[information4]
      ,[information5]
      ,[information6]
      ,[information7]
      ,[information8]
      ,[information9]
      ,[information10]
      ,[information11]
      ,[information12]
      ,[information13]
      ,[information14]
      ,[information15]
      ,[information16]
      ,[information17]
      ,[information18]
      ,[information19]
      ,[information20]
      ,[information21]
      ,[information22]
      ,[information23]
      ,[information24]
      ,[information25]
      ,[information26]
      ,[information27]
      ,[information28]
      ,[information29]
      ,[information30]
      ,[information_category]
      ,[qual_framework_id]
      ,[qualification_type]
      ,[credit_type]
      ,[credits]
      ,[level_type]
      ,[level_number]
      ,[field]
      ,[sub_field]
      ,[provider]
      ,[qa_organization]
      ,[zd_edition_name]
      FOR XML RAW)) AS RowHash
FROM [dbo].PER_QUALIFICATION_TYPES_B0Landing l)src
JOIN [dbo].PER_QUALIFICATION_TYPES_B0Landing TARGET ON src.[qualification_type_id] = TARGET.[qualification_type_id]

SELECT @@ROWCOUNT AS UpdateCount;"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)
	BEGIN
		INSERT INTO dbo.ETLBatchControl (TableName) VALUES (?)
	END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.PositionBN);

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));

SELECT @LastProcessedDate AS LastProcessedDate;

"
"UPDATE pbn 
SET pbn.Deleted = 'Y',
pbn.BaseModifiedDate = GETDATE(),
pbn.UpdateAuditID = ?
FROM dbo.PositionBN pbn
WHERE NOT EXISTS
(
    SELECT 1
    FROM dbo.vPositionBN vpbn
    WHERE pbn.PositionID = vpbn.PositionID
AND pbn.EffectiveStartDate = vpbn.EffectiveStartDate 

)
AND pbn.Deleted IS NULL;

SELECT @@ROWCOUNT AS DeleteCount ;"
"UPDATE dbo.PositionBN 
SET RowStatus = 'H'
, BaseModifiedDate = GETDATE()
, UpdateAuditID = ?
WHERE
	CAST(BaseEndDate AS DATE)< CAST(GETDATE() AS DATE) 
	AND RowStatus <> 'H'

SELECT @@ROWCOUNT + ? AS UpdateCount;"
"IF NOT EXISTS (SELECT 1 FROM dbo.ETLBatchControl WHERE TableName = ?)
 BEGIN
  INSERT INTO dbo.ETLBatchControl (TableName) VALUES (?)
 END

DECLARE @LastProcessedDate DATETIME = (SELECT LastProcessedDate FROM dbo.ETLBatchControl WHERE TableName = ?);
DECLARE @BaseCreatedDate DATETIME = (SELECT MAX(BaseCreatedDate) FROM dbo.AccreditationBN);

IF @LastProcessedDate IS NULL OR @BaseCreatedDate IS NULL
SET @LastProcessedDate = (SELECT CAST('1900-01-01' AS DATE));

SELECT @LastProcessedDate AS LastProcessedDate;"
"DECLARE @InsertAuditID bigint = ?

;WITH PerPeriodOfService AS
(
	SELECT
		Pps.PerPeriodsID AS period_of_service_id
	FROM
		dbo.PerPeriodsB10 AS Pps WITH (NOLOCK)
		LEFT JOIN
		dbo.FND_LOOKUP_VALUES_B0 AS Lkp WITH (NOLOCK)
			ON Pps.LeavingReason = Lkp.lookup_code
	WHERE
		Pps.PersonID IS NOT NULL
		AND Pps.ActualTerminationDate IS NOT NULL
)
UPDATE Trmn SET
	Trmn.Deleted = 'Y',
	Trmn.BaseModifiedDate = GETDATE(),
	Trmn.UpdateAuditID = @InsertAuditID
FROM
	dbo.TerminationBN AS Trmn
	WHERE NOT EXISTS
	(
		SELECT 1
		FROM dbo.PerPeriodsB10 AS pps WITH (NOLOCK)
		WHERE pps.PerPeriodsID = Trmn.PeriodofServiceID
	)
	AND Trmn.Deleted IS NULL;

SELECT @@RowCount AS DeleteCount;"
"DECLARE @InsertAuditID bigint = ?
DECLARE @LastProcessedDate datetime = ?

;WITH B0Query AS
(
	SELECT
		Pps.PerPeriodsID AS period_of_service_id,
		CASE
			WHEN Lkp.meaning IS NULL THEN 'Unknown (' + ISNULL(Pps.LeavingReason, 'N/A') + ')'
			ELSE Lkp.meaning
		END AS [Termination Reason],
		CASE
			WHEN Lkp.attribute2 IS NULL THEN 'Unknown (' + ISNULL(Pps.LeavingReason, 'N/A') + ')'
			ELSE Lkp.attribute2
		END AS [Termination Type],
		CASE
			WHEN Pps.EligibleForRehireInd IS NULL THEN 'Unknown'
			ELSE Pps.EligibleForRehireInd
		END AS [Eligible FOR Rehire Indicator],
		CASE
			WHEN Pps.TwoWeekNoticeInd = 'Y' THEN 'Yes'
			WHEN Pps.TwoWeekNoticeInd = 'N' THEN 'No'
			WHEN Pps.TwoWeekNoticeInd IS NULL THEN 'Unknown'
			ELSE Pps.TwoWeekNoticeInd
		END AS [Two Week Notice Indicator],
		CASE
			WHEN Pps.RegrettableTerminationInd = 'Y' THEN 'Yes'
			WHEN Pps.RegrettableTerminationInd = 'N' THEN 'No'
			WHEN Pps.RegrettableTerminationInd IS NULL THEN 'Unknown'
			ELSE Pps.RegrettableTerminationInd
		END AS [Regrettable Termination Indicator],
		CASE
			WHEN Pps.TerminationComments IS NULL THEN 'N/A'
			ELSE Pps.TerminationComments
		END AS [Termination Comments],
		Pps.NotifiedTerminationDate AS [Termination Notified Date],
		Pps.LastWorkedDate AS [Last Worked Date]
	FROM
		dbo.PerPeriodsB10 AS Pps WITH (NOLOCK)
		LEFT JOIN
		dbo.FND_LOOKUP_VALUES_B0 AS Lkp WITH (NOLOCK)
			ON Pps.LeavingReason = Lkp.lookup_code AND
			Lkp.lookup_type = 'LEAV_REAS' AND
			Lkp.deleted = 'N' AND
			Lkp.view_application_id = 3
	WHERE
		--(Lkp.BaseCreatedDate > @LastProcessedDate OR Pps.BaseCreatedDate > @LastProcessedDate)
		(Lkp.BaseCreatedDate > @LastProcessedDate OR Pps.BaseModifiedDate > @LastProcessedDate)
		AND Pps.ActualTerminationDate IS NOT NULL
),
RowHashtoB0 AS
(
	SELECT
		A.period_of_service_id,
		A.[Termination Reason],
		A.[Termination Type],
		A.[Eligible FOR Rehire Indicator],
		A.[Two Week Notice Indicator],
		A.[Regrettable Termination Indicator],
		A.[Termination Comments],
		A.[Termination Notified Date],
		A.[Last Worked Date],
		CAST(HASHBYTES('MD5',
			(SELECT
				A.period_of_service_id,
				A.[Termination Reason],
				A.[Termination Type],
				A.[Eligible FOR Rehire Indicator],
				A.[Two Week Notice Indicator],
				A.[Regrettable Termination Indicator],
				A.[Termination Comments],
				A.[Termination Notified Date],
				A.[Last Worked Date] FOR XML RAW)) AS BINARY(16)
			) AS RowHash
			--GETDATE() AS BaseCreatedDate,
			--GETDATE() AS BaseModifiedDate
	FROM
		B0Query AS A 
),
TerminationBNUpdate AS
(
	SELECT
		*
	FROM
		RowHashtoB0 AS B0
	WHERE
		EXISTS 
		(
			SELECT 1 
			FROM dbo.TerminationBN WITH (NOLOCK)
			WHERE
				PeriodofServiceID = B0.period_of_service_id
				AND RowHash <> B0.RowHash
		)
)
UPDATE BN SET
	[TerminationReason]				= Upd.[Termination Reason],
	[TerminationType]				= Upd.[Termination Type],
	[EligibleforRehireIndicator]			= Upd.[Eligible FOR Rehire Indicator],
	[TwoWeekNoticeIndicator]			= Upd.[Two Week Notice Indicator],           
	[RegrettableTerminationIndicator]		= Upd.[Regrettable Termination Indicator],
	[TerminationComments]			= Upd.[Termination Comments],
	[TerminationNotifiedDate]			= Upd.[Termination Notified Date],
	[LastWorkedDate]				= Upd.[Last Worked Date],       
	[BaseModifiedDate]				= GETDATE(),
	[UpdateAuditID]				= @InsertAuditID,
	[RowHash]				= upd.RowHash
FROM
	dbo.TerminationBN AS BN 
	INNER JOIN
	TerminationBNUpdate AS Upd
		ON BN.PeriodofServiceID = Upd.period_of_service_id
	
SELECT @@ROWCOUNT AS UpdateCount"
"DELETE   f 
FROM FactWeeklyMeasure f
WHERE FiscalWeekKey = ? AND SourceSystem = ?

SELECT @@ROWCOUNT AS Deleted"
"SELECT DISTINCT DateKey AS DateKey
FROM  dbo.DimDate(NOLOCK)
WHERE FullDate = ?;
"
" SELECT COALESCE(MIN(FiscalWeekEndDate),'9999-12-31') FROM dbo.BaseWeeklyMeasure(NOLOCK) WHERE BaseCreatedDate > ? AND SourceSystem = ?"
"SELECT FiscalWeekEndDate AS FiscalWeekEndDateRange 
FROM DimDate(NOLOCK)
WHERE FiscalWeekEndDate >= ?
AND FiscalWeekStartDate < ?
GROUP BY FiscalWeekEndDate
ORDER BY FiscalWeekEndDate"
"IF EXISTS
(SELECT 1
FROM ETLBatchControl(NOLOCK)
WHERE EventName = ?)

BEGIN
 (SELECT COALESCE(LastProcessedDate,'19000101') AS  LastProcessedDate 
 FROM ETLBatchControl(NOLOCK)
 WHERE EventName = ?)

END

ELSE 

BEGIN
 INSERT INTO ETLBatchControl(EventName, LastProcessedDate, Status) VALUES
  (?, NULL, NULL);

SELECT '1900-01-01' AS  LastProcessedDate;
END"
"UPDATE ETLBatchControl
SET LastProcessedDate = ?,
Status = 'Success'
WHERE EventName = ?"
"SELECT SUM(SourceCount) AS TotalSourceCount, SUM(InsertCount) AS TotalInsertCount, SUM(UpdateCount) AS TotalUpdateCount, SUM(DeleteCount) AS TotalDeleteCount
FROM AuditLog(NOLOCK)
WHERE ExecutionID = ?"
"SELECT DISTINCT (CASE
           WHEN FiscalWeekOfPeriodNumber = 1
           THEN 1
           ELSE 0
       END) AS IsFirstWeekOfPeriod
FROM  dbo.DimDate(NOLOCK)
WHERE FiscalWeekEndDate = ?;"
"SELECT DISTINCT  (CASE
           WHEN FiscalWeekOfQuarterNumber = 1
           THEN 1
           ELSE 0
       END) AS IsFirstWeekOfQuarter
FROM  dbo.DimDate(NOLOCK)
WHERE FiscalWeekEndDate = ?;"
"SELECT DISTINCT (CASE
           WHEN FiscalWeekOfYearNumber = 1
           THEN 1
           ELSE 0
       END) AS IsFirstWeekOfYear
FROM  dbo.DimDate(NOLOCK)
WHERE FiscalWeekEndDate = ?;"
truncate table [dbo].[CalculatedLanding]
exec [dbo].[spFactWeeklyMeasureLoad_Calculated] ?
"SELECT FiscalWeekEndDate AS FiscalWeekEndDateRange 
FROM DimDate(NOLOCK)
WHERE FiscalWeekEndDate >= ?
GROUP BY FiscalWeekEndDate
ORDER BY FiscalWeekEndDate"
"DELETE   f 
FROM FactWeeklyMeasure f
WHERE FiscalWeekKey = ? AND SourceSystem = ?

SELECT @@ROWCOUNT AS Deleted  "
TRUNCATE TABLE BaseDailyMeasureFTELanding;
"DECLARE @Date TABLE
(
    FullDate DATETIME NULL
);
DECLARE @InsertQuery NVARCHAR(MAX);

INSERT INTO @Date
(
    FullDate
)

SELECT DISTINCT
       b.FullDate
FROM dbo.BaseDailyMeasureFTE (NOLOCK) AS b
WHERE   FiscalWeekEndDate = ?
  UNION 
SELECT b.FullDate
FROM dbo.BaseDailyMeasureFTE (NOLOCK) AS b
WHERE b.FullDate > ?
 AND FiscalWeekEndDate = ? 

 SET @InsertQuery = N'SELECT BaseDailyMeasureFTEID, FullDate, FiscalWeekEndDate, StudentID, SponsorID, PartnerID, TuitionAssistanceProviderID, CostCenterNumber, AccountSubaccountID
, TierID, ProgramID, SessionID, ScheduleWeekName, LifecycleStatusName, MeasureName
, DataScenarioName, Value1, SourceSystem, COALESCE(CSSCenterNumber, -2) CSSCenterNumber, COALESCE(CSSFamilyNumber, -2)CSSFamilyNumber
, COALESCE(CSSStudentNumber, -2)CSSStudentNumber, COALESCE(CSSTierNumber, -1)CSSTierNumber, CSSProgramName
, CSSSessionName, BaseCreatedDate
FROM dbo.BaseDailyMeasureFTE' +   N' WHERE FullDate IN ( '
 + STUFF( (SELECT ',' + '''' + CONVERT(VARCHAR,Fulldate,23) +''''
 FROM @Date FOR XML PATH ('')),1,1,'') + N' )'

SELECT @InsertQuery"
User::vDeleteStatement
"DECLARE @Date TABLE
(
    DateKey VARCHAR(15) NULL
);
DECLARE @DatestoDelete VARCHAR(MAX);

INSERT INTO @Date
(
    DateKey
)


SELECT DISTINCT
       REPLACE(b.FullDate, '-', '') AS DateKey
FROM dbo.BaseDailyMeasureFTE (NOLOCK) AS b
WHERE   FiscalWeekEndDate = ?
  UNION 
SELECT REPLACE(b.FullDate, '-', '') AS DateKey
FROM dbo.BaseDailyMeasureFTE (NOLOCK) AS b
WHERE b.FullDate > ?
 AND FiscalWeekEndDate = ? 
ORDER BY Datekey


 SET @DatestoDelete = 'DELETE FROM dbo.FactFTE WHERE DateKey IN ('
-- SELECT @DatestoDelete
+ STUFF( (SELECT ',' + DateKey
FROM @Date FOR XML PATH ('')),1,1,'') + ' );'  + ' SELECT @@ROWCOUNT AS DeleteCount '
SELECT CAST(@DatestoDelete  AS VARCHAR(MAX)) "
"SELECT DISTINCT FiscalWeekEndDate
FROM dbo.BaseDailyMeasureFTE (NOLOCK) AS b
WHERE BaseCreatedDate > ? AND b.FiscalWeekEndDate >='01-08-2011'
UNION
SELECT DISTINCT FiscalWeekEndDate
FROM dbo.BaseDailyMeasureFTE (NOLOCK) AS b
WHERE b.FullDate > ? AND BaseCreatedDate > ?  AND b.FiscalWeekEndDate >='01-08-2011'
ORDER BY  FiscalWeekEndDate"
" DECLARE @LastProcessFiscalWeekEndDate datetime, @LastProcessDate datetime, @LastsuccessfulDate DateTime;
WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastProcessFiscalWeekEndDate = ja.BatchSplitByValue, @LastProcessDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId;

WITH LatestJobAuditBySuccessfulRun AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastsuccessfulDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditBySuccessfulRun AS lja ON lja.LatestJobAudit = ja.AuditId;


SELECT ISNULL(@LastProcessFiscalWeekEndDate, '2011-01-08') AS LastProcessFiscalWeekEndDate, ISNULL(@LastProcessDate, '01-08-2011') AS LastProcessDate, ISNULL(@LastsuccessfulDate, '01-08-2011') AS LastsuccessfulDate;"
TRUNCATE TABLE BaseDailyMeasureNetRevenueLanding;
"DECLARE @Date TABLE
(
    FullDate DATETIME NULL
);
DECLARE @InsertQuery NVARCHAR(MAX);

INSERT INTO @Date
(
    FullDate
)

SELECT DISTINCT
       b.FullDate
FROM dbo.BaseDailyMeasureNetRevenue (NOLOCK) AS b
WHERE BaseCreatedDate > ?
      AND FiscalWeekEndDate = ?
  UNION 
SELECT b.FullDate
FROM dbo.BaseDailyMeasureNetRevenue (NOLOCK) AS b
WHERE b.FullDate > ?
 AND FiscalWeekEndDate = ? 

 SET @InsertQuery = N'SELECT BaseDailyMeasureNetRevID, FullDate, FiscalWeekEndDate, StudentID, SponsorID, PartnerID, TuitionAssistanceProviderID, CostCenterNumber, AccountSubaccountID
, TierID, ProgramID, SessionID, ScheduleWeekName, LifecycleStatusName, TransactionNumber, MeasureName
, DataScenarioName, Value1, SourceSystem, COALESCE(CSSCenterNumber, -2) CSSCenterNumber, COALESCE(CSSFamilyNumber, -2)CSSFamilyNumber
, COALESCE(CSSStudentNumber, -2)CSSStudentNumber, COALESCE(CSSCustomerCode, ''-2'')CSSCustomerCode, COALESCE(CSSTierNumber, -1)CSSTierNumber, CSSProgramName
, CSSSessionName, BaseCreatedDate
FROM dbo.BaseDailyMeasureNetRevenue' +   N' WHERE FullDate IN ( '
 + STUFF( (SELECT ',' + '''' + CONVERT(VARCHAR,Fulldate,23) +''''
 FROM @Date FOR XML PATH ('')),1,1,'') + N' )'

SELECT @InsertQuery"
"DECLARE @Date TABLE
(
    DateKey VARCHAR(15) NULL
);
DECLARE @DatestoDelete VARCHAR(MAX);

INSERT INTO @Date
(
    DateKey
)


SELECT DISTINCT
       REPLACE(b.FullDate, '-', '') AS DateKey
FROM dbo.BaseDailyMeasureNetRevenue (NOLOCK) AS b
WHERE BaseCreatedDate > ?
      AND FiscalWeekEndDate = ?
  UNION 
SELECT REPLACE(b.FullDate, '-', '') AS DateKey
FROM dbo.BaseDailyMeasureNetRevenue (NOLOCK) AS b
WHERE b.FullDate > ?
 AND FiscalWeekEndDate = ? 
ORDER BY Datekey


 SET @DatestoDelete = 'DELETE FROM dbo.FactNetRevenue WHERE DateKey IN ('
-- SELECT @DatestoDelete
+ STUFF( (SELECT ',' + DateKey
FROM @Date FOR XML PATH ('')),1,1,'') + ' );'  + ' SELECT @@ROWCOUNT AS DeleteCount '
SELECT CAST(@DatestoDelete  AS VARCHAR(MAX)) "
"SELECT DISTINCT FiscalWeekEndDate
FROM dbo.BaseDailyMeasureNetRevenue (NOLOCK) AS b
WHERE BaseCreatedDate > ?  AND b.FiscalWeekEndDate>='01-08-2011'
UNION
SELECT DISTINCT FiscalWeekEndDate
FROM dbo.BaseDailyMeasureNetRevenue (NOLOCK) AS b
WHERE b.FullDate > ? AND BaseCreatedDate > ?  AND b.FiscalWeekEndDate>='01-08-2011'
ORDER BY  FiscalWeekEndDate"
" DECLARE @LastProcessFiscalWeekEndDate datetime, @LastProcessDate datetime, @LastsuccessfulDate DateTime;
WITH LatestJobAuditByTaskName AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastProcessFiscalWeekEndDate = ja.BatchSplitByValue, @LastProcessDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditByTaskName AS lja ON lja.LatestJobAudit = ja.AuditId;
WITH LatestJobAuditBySuccessfulRun AS (
   SELECT TaskName, MAX(AuditId) AS LatestJobAudit
      FROM dbo.AuditLog (NOLOCK)
      WHERE (StatusCode = 1) AND (TaskName = ?)
      GROUP BY TaskName)
SELECT @LastsuccessfulDate = ja.StartTime
   FROM dbo.AuditLog (NOLOCK) AS ja 
      INNER JOIN LatestJobAuditBySuccessfulRun AS lja ON lja.LatestJobAudit = ja.AuditId;
SELECT ISNULL(@LastProcessFiscalWeekEndDate, '2011-01-08') AS LastProcessFiscalWeekEndDate, ISNULL(@LastProcessDate, '01-08-2011') AS LastProcessDate, ISNULL(@LastsuccessfulDate, '01-08-2011') AS LastsuccessfulDate;
"
"Execute spBeginAuditLog ? OUTPUT, ?;"
"Execute spEndAuditLog ?,?,?,?,?;"
" SELECT COUNT(1) AS DeleteCount 
From dbo.DimDataScenario"
"WITH DataScenario
     AS (
     SELECT 1 AS Id,
            'Actual' AS DataScenarioName,
            'Actual' AS DataScenarioType,
            'Scenario' AS DataScenarioSubtype,
            'A' AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 2 AS Id,
            'Plan' AS DataScenarioName,
            'Plan' AS DataScenarioType,
            'Scenario' AS DataScenarioSubtype,
            'B' AS GLActualFlag,
            1101 AS GLBudgetVersionID
     UNION
     SELECT 3 AS Id,
            'Plan Var' AS DataScenarioName,
            'Plan' AS DataScenarioType,
            'Scenario v Actual' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 4 AS Id,
            'Plan Var %' AS DataScenarioName,
            'Plan' AS DataScenarioType,
            'Scenario v Actual %' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 5 AS Id,
            'Forecast' AS DataScenarioName,
            'Forecast' AS DataScenarioType,
            'Scenario' AS DataScenarioSubtype,
            'B' AS GLActualFlag,
            1181 AS GLBudgetVersionID
     UNION
     SELECT 6 AS Id,
            'Forecast Var' AS DataScenarioName,
            'Forecast' AS DataScenarioType,
            'Scenario v Actual' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 7 AS Id,
            'Forecast Var %' AS DataScenarioName,
            'Forecast' AS DataScenarioType,
            'Scenario v Actual %' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 8 AS Id,
            'Target' AS DataScenarioName,
            'Target' AS DataScenarioType,
            'Scenario' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 9 AS Id,
            'Target Var' AS DataScenarioName,
            'Target' AS DataScenarioType,
            'Scenario v Actual' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 10 AS Id,
            'Target Var %' AS DataScenarioName,
            'Target' AS DataScenarioType,
            'Scenario v Actual %' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionIDUNION
     UNION
     SELECT 11 AS Id,
            'LY' AS DataScenarioName,
            'Last Year' AS DataScenarioType,
            'Scenario' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 12 AS Id,
            'LY Var' AS DataScenarioName,
            'Last Year' AS DataScenarioType,
            'Scenario v Actual' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID
     UNION
     SELECT 13 AS Id,
            'LY Var %' AS DataScenarioName,
            'Last Year' AS DataScenarioType,
            'Scenario v Actual %' AS DataScenarioSubtype,
            NULL AS GLActualFlag,
            NULL AS GLBudgetVersionID)
     INSERT INTO [dbo].[DimDataScenario]
     ([DataScenarioName],
      [DataScenarioType],
      [DataScenarioSubtype],
      [GLActualFlag],
      [GLBudgetVersionID],
      [EffectiveFrom],
      [EffectiveTo],
      [ETLJobID]
     )
            SELECT COALESCE(DataScenarioName, 'Unknown Scenario') AS DataScenarioName,
                   COALESCE(DataScenarioType, 'Unknown Scenario Type') AS DataScenarioType,
                   COALESCE(DataScenarioSubtype, 'Unknown Scenario Subtype') AS DataScenarioSubtype,
                   GLActualFlag,
                   GLBudgetVersionID,
                   '1900-01-01',
                   '12/31/9999 23:59:59.999',
                   ?
            FROM DataScenario
            ORDER BY Id;
SELECT @@ROWCOUNT + 1 AS SourceCount;
"
"DBCC CHECKIDENT('[DimDataScenario]', RESEED, 1);
SET IDENTITY_INSERT dbo.DimDataScenario ON;
INSERT INTO [dbo].[DimDataScenario]
([DataScenarioKey],
 [DataScenarioName],
 [DataScenarioType],
 [DataScenarioSubtype],
 [GLActualFlag],
 [GLBudgetVersionID],
 [Deleted],
 [EffectiveFrom],
 [EffectiveTo],
 [ETLJobID]
)
       SELECT-1,
             'Unknown Scenario',
             'Unknown Scenario Type',
             'Unknown Scenario Subtype',
             NULL,
             NULL,
             NULL,
             '1900-01-01',
             '12/31/9999 23:59:59.999',
             ?
       UNION
       SELECT-2,
             'Not Applicable Scenario',
             'Not Applicable Scenario Type',
             'Not Applicable Scenario Subtype',
             NULL,
             NULL,
             NULL,
             '1900-01-01',
             '12/31/9999 23:59:59.999',
             ?;
SET IDENTITY_INSERT dbo.DimDataScenario OFF;"
 TRUNCATE TABLE dbo.DimDataScenario
" 

DELETE FROM [dbo].[DimDate]
             WHERE [DateKey] < 0;


             INSERT INTO [dbo].[DimDate]
             ([DateKey],
              [FullDate],
		    [FiscalWeekNumber],
		    [FiscalWeekName],
		    [FiscalWeekStartDateKey],
              [FiscalWeekEndDateKey],
              [HolidayName],
              [HolidayFiscalWeekFlag],
             [FiscalDayNumber],
             [FiscalDayOfWeekNumber],
            [FiscalDayOfPeriodNumber],
            [FiscalDayOfQuarterNumber],
            [FiscalDayOfYearNumber],
              [FiscalWeekOfPeriodNumber],
              [FiscalWeekOfPeriodName],
              [FiscalWeekOfQuarterNumber],
              [FiscalWeekOfQuarterName],
              [FiscalWeekOfYearNumber],
              [FiscalWeekOfYearName],
              [FiscalWeekSequenceNumber],
              [FiscalWeekStartDate],
              [FiscalWeekEndDate],
              [FiscalPeriodNumber],
              [FiscalPeriodName],
              [FiscalPeriodType],
              [FiscalPeriodOfYearNumber],
              [FiscalPeriodOfYearName],
              [FiscalPeriodSequenceNumber],
              [FiscalPeriodStartDate],
              [FiscalPeriodEndDate],
              [FiscalQuarterNumber],
              [FiscalQuarterName],
              [FiscalQuarterOfYearNumber],
              [FiscalQuarterOfYearName],
              [FiscalQuarterSequenceNumber],
              [FiscalQuarterStartDate],
              [FiscalQuarterEndDate],
              [FiscalYearNumber],
              [FiscalYearName],
              [FiscalYearStartDate],
		    [FiscalYearEndDate],
		    [EffectiveFrom],
		    [EffectiveTo],
		    [RowStatus],
		    [ETLJobID]
              )
                    SELECT-1, --[DateKey]
                          '19000101', --[FullDate]
					 -1, --[FiscalWeekNumber]
                          'Unknown Fiscal Week', --[FiscalWeekName]
					 -1,   ---[FiscalWeekStartDateKey]
					 -1,   ---[FiscalWeekEndDateKey]
                          'Unknown Holiday', --[HolidayName]
                          'Unknown Holiday Fiscal Week', --[HolidayFiscalWeekFlag]
						  -1,--- [FiscalDayNumber] 
	                      -1, ---[FiscalDayOfWeekNumber] 
	                      -1, ----[FiscalDayOfPeriodNumber] 
	                      -1, ---[FiscalDayOfQuarterNumber] 
	                      -1, ---[FiscalDayOfYearNumber] 
                          -1, --[FiscalWeekOfPeriodNumber]
                          'Unknown Fiscal Week of Period', --[FiscalWeekOfPeriodName]
                          -1, --[FiscalWeekOfQuarterNumber]
                          'Unknown Fiscal Week of Quarter', --[FiscalWeekOfQuarterName]
                          -1, --[FiscalWeekOfYearNumber]
                          'Unknown Fiscal Week of Year', --[FiscalWeekOfYearName]
                          -1, --[FiscalWeekSequenceNumber]
                          '19000101', --[FiscalWeekStartDate]
                          '19000101', --[FiscalWeekEndDate]
                          -1, --[FiscalPeriodNumber]
                          'Unknown Fiscal Period', --[FiscalPeriodName]
                          'Unknown', --[FiscalPeriodType]
                          -1, --[FiscalPeriodOfYearNumber]
                          'Unknown Fiscal Period of Year', --[FiscalPeriodOfYearName]
                          -1, --[FiscalPeriodSequenceNumber]
                          '19000101', --[FiscalPeriodStartDate]
                          '19000101', --[FiscalPeriodEndDate]
                          -1, --[FiscalQuarterNumber]
                          'Unknown Fiscal Quarter', --[FiscalQuarterName]
                          -1, --[FiscalQuarterOfYearNumber]
                          'Unknown Fiscal Quarter of Year', --[FiscalQuarterOfYearName]
                          -1, --[FiscalQuarterSequenceNumber]
                          '19000101', --[FiscalQuarterStartDate]
                          '19000101', --[FiscalQuarterEndDate]
                          -1, --[FiscalYearNumber]
                          'Unknown Fiscal Year', --[FiscalYearName]
                          '19000101', --[FIscalYearStartDate]
                          '19000101', --[FiscalYearEndDate]
					 '1900-01-01' , --[EffectiveFrom]
					 '12/31/9999 23:59:59.999', ---- [EffectiveTo]
					 'Active', ---RowStatus
					 ?   ---ETLJobID
                          
                    UNION
                    SELECT-2, --[DateKey]
                          '19000102', --[FullDate]
                          -2, --[FiscalWeekNumber]
                          'Not Applicable Fiscal Week', --[FiscalWeekName]
					 -2, --- [FiscalWeekStartDateKey]
                          -2, --- [FiscalWeekEndDateKey]
                          'Not Applicable Holiday', --[HolidayName]
                          'Not Applicable Holiday Fiscal Week', --[HolidayFiscalWeekFlag]
						  -2,--- [FiscalDayNumber] 
	                      -2, ---[FiscalDayOfWeekNumber] 
	                      -2, ----[FiscalDayOfPeriodNumber] 
	                      -2, ---[FiscalDayOfQuarterNumber] 
	                      -2, ---[FiscalDayOfYearNumber] 
                          -2, --[FiscalWeekOfPeriodNumber]
                          'Not Applicable Fiscal Week of Period', --[FiscalWeekOfPeriodName]
                          -2, --[FiscalWeekOfQuarterNumber]
                          'Not Applicable Fiscal Week of Quarter', --[FiscalWeekOfQuarterName]
                          -2, --[FiscalWeekOfYearNumber]
                          'Not Applicable Fiscal Week of Year', --[FiscalWeekOfYearName]
                          -2, --[FiscalWeekSequenceNumber]
                          '19000102', --[FiscalWeekStartDate]
                          '19000102', --[FiscalWeekEndDate]
                          -2, --[FiscalPeriodNumber]
                          'Not Applicable Fiscal Period', --[FiscalPeriodName]
                          'N/A', --[FiscalPeriodType]
                          -2, --[FiscalPeriodOfYearNumber]
                          'Not Applicable Fiscal Period of Year', --[FiscalPeriodOfYearName]
                          -2, --[FiscalPeriodSequenceNumber]
                          '19000102', --[FiscalPeriodStartDate]
                          '19000102', --[FiscalPeriodEndDate]
                          -2, --[FiscalQuarterNumber]
                          'Not Applicable Fiscal Quarter', --[FiscalQuarterName]
                          -2, --[FiscalQuarterOfYearNumber]
                          'Not Applicable Fiscal Quarter of Year', --[FiscalQuarterOfYearName]
                          -2, --[FiscalQuarterSequenceNumber]
                          '19000102', --[FiscalQuarterStartDate]
                          '19000102', --[FiscalQuarterEndDate]
                          -2, --[FiscalYearNumber]
                          'Not Applicable Fiscal Year', --[FiscalYearName]
                          '19000102', --[FIscalYearStartDate]
                          '19000102', --[FiscalYearEndDate]
                           '1900-01-02', --[EffectiveFrom]
					  '12/31/9999 23:59:59.999', ---- [EffectiveTo]
					 'Active', ---RowStatus;
                           ? --ETLJobID
           "
SELECT COUNT(1) AS vInsertCount FROM DimMeasureLanding(NOLOCK)
Truncate table DimMeasureLanding
"DECLARE @DelCount INT, @InsCount INT, @AudID INT

SET @AudID = ?
SET @DelCount = (SELECT COUNT(1) FROM dbo.DimTimeCalculation)

TRUNCATE TABLE dbo.DimTimeCalculation

SET IDENTITY_INSERT dbo.DimTimeCalculation ON;


;WITH DimTimeCalc
AS (
	    SELECT -2 AS TCKey,	'Not Applicable Time Calculation' AS CalcName
		UNION ALL
		SELECT -1 AS TCKey,	'Unknown Time Calculation' AS CalcName
		UNION ALL
		SELECT 1 AS TCKey, 'Selection' AS CalcName
		UNION ALL
		SELECT 2 AS TCKey, 'PTD' AS CalcName
		UNION ALL
		SELECT 3 AS TCKey, 'QTD' AS CalcName
		UNION ALL
		SELECT 5 AS TCKey, 'YTD' AS CalcName
)
--SELECT * FROM DimTimeCalc+

INSERT INTO [dbo].[DimTimeCalculation]
(	  [TimeCalculationKey]
	 ,[TimeCalculationName]
     ,[EDWEffectiveFrom]
     ,[EDWEffectiveTo]
     ,[EDWRowStatus]
     ,[ETLJobID]			)
SELECT TCKey AS TimeCalculationKey,
       CalcName AS TimeCalculationName,
       CAST('1900-01-01 00:00:00.000' AS DATE) AS EffectiveFrom,
	   CAST('9999-12-31 23:59:59.999' AS DATE) AS EffectiveTo,
	   'A' AS RowStatus,
       @AudID As ETLJobID
FROM DimTimeCalc
ORDER BY TCKey;


--Get Insert Count
SET @InsCount = (SELECT COUNT(1) FROM dbo.DimTimeCalculation)


SET IDENTITY_INSERT dbo.DimTimeCalculation OFF;

SELECT @InsCount AS InsCount, @DelCount AS DelCount;"
Select 'Complete'
"SELECT CAST(CAST(DATEADD(SECOND, ?, 0) AS TIME) as varchar(8))"
"SELECT DISTINCT DateKey AS DateKey, FiscalWeekOfPeriodNumber,
FiscalWeekOfQuarterNumber,
FiscalWeekOfYearNumber
FROM  dbo.DimDate(NOLOCK)
WHERE FullDate = ?;
"
truncate table [dbo].[FTESnapshotLanding]
exec [dbo].[spFactWeeklyMeasureLoad_FTESnapshot] ?
truncate table [dbo].[GLBalancePlanAllocation_NetRevenueLanding]
exec [dbo].[spFactWeeklyMeasureLoad_GLBalancePlanAllocation_NetRevenue] ?
truncate table  [dbo].[LaborHoursLanding]
exec [dbo].[spFactWeeklyMeasureLoad_LaborHours] ?
truncate table [dbo].[FactWeeklyMeasureLanding]
exec [dbo].[spupdate_FactWeeklyMeasure_Dimkey] ?
"SELECT FiscalWeekEndDate AS FiscalWeekEndDateRange 
FROM DimDate(NOLOCK)
WHERE FiscalWeekEndDate >= ?
AND FiscalWeekStartDate < ?
--where fiscalweekenddate='2011-02-05'
GROUP BY FiscalWeekEndDate
ORDER BY FiscalWeekEndDate"
TRUNCATE TABLE [dbo].[ReportMeasure]
"DECLARE @SummaryOfChanges TABLE (Change VARCHAR(20));
DECLARE @InsertCount INT,
		@UpdateCount INT,
		@DeleteCount INT;

MERGE [DW_Mart].[dbo].[ReportMeasure] AS [T]
USING (
	SELECT
		[ReportID], [ReportName], [MeasureOrder], [MeasureLabel], [MeasureName], [NumberFormat], [IsHeader], [PageOrder], [PageName], [HasRightBorder], [Font], [PlanDisplay], [PlanVarDisplay], [PlanVarPctDisplay],
		[LYDisplay], [LYVarDisplay], [LYVarPctDisplay], [ActualToDateDisplay], [PlanVarInverse], [LYVarInverse], [AbsDivisor], [TargetForPlan], [CreatedDate]
	FROM [DW_Landing].[dbo].[ReportMeasure]
) AS [S]
	(
		[ReportID], [ReportName], [MeasureOrder], [MeasureLabel], [MeasureName], [NumberFormat], [IsHeader], [PageOrder], [PageName], [HasRightBorder], [Font], [PlanDisplay], [PlanVarDisplay], [PlanVarPctDisplay],
		[LYDisplay], [LYVarDisplay], [LYVarPctDisplay], [ActualToDateDisplay], [PlanVarInverse], [LYVarInverse], [AbsDivisor], [TargetForPlan], [CreatedDate]
	)
	ON
		[T].[ReportID] = [S].[ReportID]
		AND [T].[MeasureOrder] = [S].[MeasureOrder]
		AND [T].[MeasureLabel] = [S].[MeasureLabel]
WHEN MATCHED
	THEN
		UPDATE
			SET [ReportName] = [S].[ReportName],
				[MeasureName] = [S].[MeasureName],
				[NumberFormat] = [S].[NumberFormat],
				[IsHeader] = [S].[IsHeader],
				[PageOrder] = [S].[PageOrder],
				[PageName] = [S].[PageName],
				[HasRightBorder] = [S].[HasRightBorder],
				[Font] = [S].[Font],
				[PlanDisplay] = [S].[PlanDisplay],
				[PlanVarDisplay] = [S].[PlanVarDisplay],
				[PlanVarPctDisplay] = [S].[PlanVarPctDisplay],
				[LYDisplay] = [S].[LYDisplay],
				[LYVarDisplay] = [S].[LYVarDisplay],
				[LYVarPctDisplay] = [S].[LYVarPctDisplay],
				[ActualToDateDisplay] = [S].[ActualToDateDisplay],
				[PlanVarInverse] = [S].[PlanVarInverse],
				[LYVarInverse] = [S].[LYVarInverse],
				[AbsDivisor] = [S].[AbsDivisor],
				[TargetForPlan] = [S].[TargetForPlan]

WHEN NOT MATCHED BY TARGET
	THEN
		INSERT (
			[ReportID], [ReportName], [MeasureOrder], [MeasureLabel], [MeasureName], [NumberFormat], [IsHeader], [PageOrder], [PageName], [HasRightBorder], [Font], [PlanDisplay], [PlanVarDisplay], [PlanVarPctDisplay],
			[LYDisplay], [LYVarDisplay], [LYVarPctDisplay], [ActualToDateDisplay], [PlanVarInverse], [LYVarInverse], [AbsDivisor], [TargetForPlan], [CreatedDate]
		)
		VALUES (
			[S].[ReportID], [S].[ReportName], [S].[MeasureOrder], [S].[MeasureLabel], [S].[MeasureName], [S].[NumberFormat], [S].[IsHeader], [S].[PageOrder], [S].[PageName], [S].[HasRightBorder], [S].[Font],
			[S].[PlanDisplay], [S].[PlanVarDisplay], [S].[PlanVarPctDisplay], [S].[LYDisplay], [S].[LYVarDisplay], [S].[LYVarPctDisplay], [S].[ActualToDateDisplay], [S].[PlanVarInverse], [S].[LYVarInverse],
			[S].[AbsDivisor], [S].[TargetForPlan], GETDATE()
		)
WHEN NOT MATCHED BY SOURCE
	THEN
		DELETE
OUTPUT $action
INTO @SummaryOfChanges;

SELECT @InsertCount = COUNT(*) FROM @SummaryOfChanges WHERE [Change] = 'INSERT';
SELECT @UpdateCount = COUNT(*) FROM @SummaryOfChanges WHERE [Change] = 'UPDATE';
SELECT @DeleteCount = COUNT(*) FROM @SummaryOfChanges WHERE [Change] = 'DELETE';

SELECT
	@InsertCount AS [InsertCount],
	@UpdateCount AS [UpdateCount],
	@DeleteCount AS [DeleteCount];"
 SELECT COUNT(1) AS DeleteCount  From [dbo].[ReportProfile]
 SELECT COUNT(1) AS InsertCount  From [dbo].[ReportProfile]
"SET IDENTITY_INSERT [dbo].[ReportProfile] ON;
INSERT INTO [dbo].[ReportProfile]
([ReportProfileKey], 
 [ReportProfileID], 
 [ReportProfileName], 
 [ReportProfileLogoImage], 
 [ReportProfileSmallImage], 
 [ReportProfileLegalNoticeDescription], 
 [MartCreatedDate]
)
       SELECT-1, 
             -1, 
             '-1', 
             0x00, 
             0x00, 
             'Unknown Description', 
             GETDATE()
       UNION
       SELECT-2, 
             -2, 
             '-2', 
             0x00, 
             0x00, 
             'Not Applicable Description', 
             GETDATE();
SET IDENTITY_INSERT [dbo].[ReportProfile] OFF;"
 TRUNCATE TABLE dbo.ReportProfile
"Select isnull(Max(CreatedDate),'2020-01-01') As LastProcessedDate from DW_Mart.[dbo].[SubScriptionlogs]"
"UPDATE [dbo].[SubScriptionlogs]
  SET 
      [Status] = 'Success'
WHERE [TimeStart] IS NOT NULL;
UPDATE [dbo].[SubScriptionlogs]
  SET 
      [Status] = 'Failed'
WHERE [TimeStart] IS NULL;
"
EXEC dbo.spCSS_StagingToEDW_DimARAgencyType
EXEC dbo.spCSS_StagingTransform_DimDiscountType;
EXEC dbo.spCSS_StagingToEDW_DimFeeType;
"Execute spBeginAuditLog ? OUTPUT, ?,?;"
"SELECT COUNT(*) AS vInsertCount
FROM dbo.DimSponsor
WHERE ETLJobID = ?"
"SELECT COUNT(*) AS vInsertCount
FROM dbo.DimStudent 
WHERE ETLJobID = ?"
SELECT COUNT(1) AS IC FROM  [dbo].[DimTuitionAssistanceProvider] WHERE SourceSystem ='CSS'
EXEC DBO.spCSS_StagingToEDW_DimPaymentType;
EXEC dbo.spCSS_StagingTransform_DimProgram;
EXEC dbo.spCSS_StagingToEDW_DimSession
Execute [dbo].[spCSS_StagingToEDW_DimSponsor]
EXEC dbo.spCSS_StagingToEDW_DimStudent
EXEC dbo.spCSS_StagingToEDW_DimTier
EXEC dbo.spCSS_StagingToEDW_DimTransactionCode;
EXEC dbo.spCSS_StagingToEDW_DimTuitionAssistanceProvider;
Exec [dbo].[spCSS_BatchLoad_StagingToEDW_FactFTESnapshot]
EXEC spCSS_BatchLoad_StagingToEDW_FactLaborHourTarget
EXEC spCSS_BatchLoad_StagingToEDW_FactLifeCycleStatusSnapshot
EXEC spCSS_BatchLoad_StagingToEDW_FactNetRevenue
Execute [dbo].[spGL_StagingToEDW_BridgeCompanyRollup]
Execute [dbo].[spHR_StagingToEDW_BridgeSecurityPersonHRISGroup]
Execute [dbo].[spHR_StagingToEDW_BridgeSecurityPersonOrg]
"DELETE FROM CompNonCompStatus
WHERE FiscalWeekEndDate >= ?

Select @@Rowcount as DeleteCount"
"Execute spEndAuditLog ?,0,?,?,?;"
"IF ? ='01/01/1900'  
SELECT MIN(d.FiscalWeekEndDate) AS FiscalWeekEndDate
FROM DimDate d
WHERE ( d.FullDate >= DATEADD( dd, -180, CAST( GETDATE() AS DATE ) ) ) AND ( d.FullDate <= GETDATE() )
ELSE
SELECT MIN(d.FiscalWeekEndDate) AS FiscalWeekEndDate
FROM DimDate d
WHERE ( d.FullDate >= DATEADD(dd, -180, CAST( ? AS DATE) ) ) AND ( d.FullDate <= GETDATE() )"
EXEC dbo.spGL_StagingToEDW_DimAccountSubAccount
EXEC dbo.spCMS_StagingToEDW_DimAdjustmentReason
EXEC dbo.spCMS_StagingToEDW_DimARAgencyType
EXEC dbo.spHR_StagingToEDW_DimAssessmentType
EXEC dbo.spHR_StagingToEDW_DimAssignmentType
EXEC dbo.spCMS_StagingToEDW_DimClassroom
EXEC dbo.spCSS_StagingToEDW_DimClassroom
EXEC spGL_StagingToEDW_DimCompany
Execute [dbo].[spGL_StagingToEDW_DimCompanyRollup]
EXEC [dbo].[spHR_StagingToEDW_DimComplianceItem]
EXEC dbo.spHR_StagingToEDW_DimComplianceRating
EXEC dbo.spGL_StagingToEDW_DimCostCenter
EXEC dbo.spGL_StagingToEDW_DimCostCenterType
EXEC dbo.spCMS_StagingToEDW_DimCreditMemoType
EXEC dbo.spGL_StagingToEDW_DimDate
EXEC dbo.spCMS_StagingToEDW_DimDiscountType
EXEC dbo.spCMS_StagingToEDW_DimFeeType
Exec [dbo].[spHR_StagingToEDW_DimHRUser]
EXEC dbo.spCMS_StagingToEDW_DimInvoiceType
EXEC dbo.spSalesForce_StagingToEDW_DimLead
EXEC dbo.spBING_EDW_Generate_DimLeadEventType
EXEC dbo.spSalesForce_StagingToEDW_DimLeadType
EXEC dbo.spHR_StagingToEDW_DimLeaveReason
EXEC [dbo].[spHR_StagingToEDW_DimLeaveType] 
" SELECT COUNT(1) AS DeleteCount 
From dbo.DimLifecycleStatus"
"SET IDENTITY_INSERT dbo.DimLifecycleStatus ON;

WITH LifecycleStatus
                  AS (
                  SELECT-1 AS LifecycleStatusKey,
                        'Unknown Lifecycle Status' AS LifecycleStatusName,
	        'A' AS RowStatus
                  UNION
                  SELECT-2 AS LifecycleStatusKey,
                        'Not Applicable Lifecycle Status' AS LifecycleStatusName,
	        'A' AS RowStatus
                  UNION
                  SELECT 1 AS LifecycleStatusKey,
                         'Pre-Enrolled (New)' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 2 AS LifecycleStatusKey,
                         'Pre-Enrolled (Existing)' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 3 AS LifecycleStatusKey,
                         'New' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 4 AS LifecycleStatusKey,
                         'Transferred' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 5 AS LifecycleStatusKey,
                         'Enrolled' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 6 AS LifecycleStatusKey,
                         'Reserved' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 7 AS LifecycleStatusKey,
                         'At-Risk (Disenrollment)' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 8 AS LifecycleStatusKey,
                         'At-Risk (A/R)' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 9 AS LifecycleStatusKey,
                         'Re-Enrolled (Short Term)' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 10 AS LifecycleStatusKey,
                         'Re-Enrolled (Long Term)' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 11 AS LifecycleStatusKey,
                         'Withdrawing' AS LifecycleStatusName,
	         'A' AS RowStatus
                  UNION
                  SELECT 12 AS LifecycleStatusKey,
                         'Withdrawn' AS LifecycleStatusName,
	         'A' AS RowStatus)
                  INSERT INTO dbo.DimLifecycleStatus
                  ([LifecycleStatusKey],
                   [LifecycleStatusName],
	   [RowStatus],
                   [ETLJobID]
                  )
                         SELECT LifecycleStatusKey,
                                LifecycleStatusName,
                                RowStatus,
		?
                         FROM LifecycleStatus;

SELECT @@ROWCOUNT  AS SourceCount;

SET IDENTITY_INSERT dbo.DimLifecycleStatus OFF;"
 TRUNCATE TABLE dbo.DimLifecycleStatus
EXEC spHR_StagingToEDW_DimLocation
"DECLARE @Field MartLookup;
INSERT INTO @Field (FieldPath)
(SELECT FieldPath
FROM dbo.MartASALookup);

DECLARE @vSQL MartLookup;
INSERT @vSQL
EXEC dbo.spGL_Generate_ASA_SQLStatement @Field;

DECLARE @vSQLCommand VARCHAR(4000);
SET @vSQLCommand = (SELECT FieldPath FROM @vSQL)

SELECT @vSQLCommand AS vSQLCommand;"
"Execute dbo.spBeginAuditLog ? OUTPUT, ?,?;"
"IF EXISTS
(
    SELECT 1
    FROM dbo.DimAccountSubaccount
    WHERE AccountSubaccountKey < 0
)
BEGIN
    PRINT 'No Insert';
END;
ELSE
BEGIN
    SET IDENTITY_INSERT dbo.DimAccountSubaccount ON;

    INSERT INTO [dbo].[DimAccountSubaccount]
    (
        [AccountSubaccountKey],
        [AccountSubaccountID],
        [AccountSubaccountName],
        [AccountID],
        [AccountName],
        [SubaccountID],
        [SubaccountName],
        [ASATuitionType],
        [ASAFieldDepth],
        [ASAFieldLevel1ID],
        [ASAFieldLevel1Name],
        [ASAFieldLevel1Unary],
        [ASAFieldLevel1Sort],
        [ASAFieldLevel2ID],
        [ASAFieldLevel2Name],
        [ASAFieldLevel2Unary],
        [ASAFieldLevel2Sort],
        [ASAFieldLevel3ID],
        [ASAFieldLevel3Name],
        [ASAFieldLevel3Unary],
        [ASAFieldLevel3Sort],
        [ASAFieldLevel4ID],
        [ASAFieldLevel4Name],
        [ASAFieldLevel4Unary],
        [ASAFieldLevel4Sort],
        [ASAFieldLevel5ID],
        [ASAFieldLevel5Name],
        [ASAFieldLevel5Unary],
        [ASAFieldLevel5Sort],
        [ASAFieldLevel6ID],
        [ASAFieldLevel6Name],
        [ASAFieldLevel6Unary],
        [ASAFieldLevel6Sort],
        [ASAFieldLevel7ID],
        [ASAFieldLevel7Name],
        [ASAFieldLevel7Unary],
        [ASAFieldLevel7Sort],
        [ASAFieldLevel8ID],
        [ASAFieldLevel8Name],
        [ASAFieldLevel8Unary],
        [ASAFieldLevel8Sort],
        [ASAFieldLevel9ID],
        [ASAFieldLevel9Name],
        [ASAFieldLevel9Unary],
        [ASAFieldLevel9Sort],
        [ASAFieldLevel10ID],
        [ASAFieldLevel10Name],
        [ASAFieldLevel10Unary],
        [ASAFieldLevel10Sort],
        [ASAFieldLevel11ID],
        [ASAFieldLevel11Name],
        [ASAFieldLevel11Unary],
        [ASAFieldLevel11Sort],
        [ASAFieldLevel12ID],
        [ASAFieldLevel12Name],
        [ASAFieldLevel12Unary],
        [ASAFieldLevel12Sort],
        [SourceSystem],
        [EffectiveFrom],
        [EffectiveTo],
        [CreatedDate],
        [ModifiedDate],
        [DeletedDate],
        [RowStatus],
        [ETLJobID]
    )
    SELECT -1,
           -1,
           'Unknown AccountSubaccountName',
           -1,
           'Unknown AccountName',
           -1,
           'Unknown SubaccountName',
           'Unknown ASATuitionType',
           -1,                           -- [ASAFieldDepth]
           '0000.000000',                -- [ASAFieldLevel1ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel1Name]	
           1,                            -- [ASAFieldLevel1Unary]	
           99999,                        -- [ASAFieldLevel1Sort]
           '0000.000000',                -- [ASAFieldLevel2ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel2Name]	
           1,                            -- [ASAFieldLevel2Unary]	
           99999,                        -- [ASAFieldLevel2Sort]
           '0000.000000',                -- [ASAFieldLevel3ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel3Name]	
           1,                            -- [ASAFieldLevel3Unary]	
           99999,                        -- [ASAFieldLevel3Sort]
           '0000.000000',                -- [ASAFieldLevel4ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel4Name]	
           1,                            -- [ASAFieldLevel4Unary]	
           99999,                        -- [ASAFieldLevel4Sort]
           '0000.000000',                -- [ASAFieldLevel5ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel5Name]	
           1,                            -- [ASAFieldLevel5Unary]	
           99999,                        -- [ASAFieldLevel5Sort]
           '0000.000000',                -- [ASAFieldLevel6ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel6Name]	
           1,                            -- [ASAFieldLevel6Unary]	
           99999,                        -- [ASAFieldLevel6Sort]
           '0000.000000',                -- [ASAFieldLevel7ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel7Name]	
           1,                            -- [ASAFieldLevel7Unary]	
           99999,                        -- [ASAFieldLevel7Sort]
           '0000.000000',                -- [ASAFieldLevel8ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel8Name]	
           1,                            -- [ASAFieldLevel8Unary]	
           99999,                        -- [ASAFieldLevel8Sort]
           '0000.000000',                -- [ASAFieldLevel9ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel9Name]	
           1,                            -- [ASAFieldLevel9Unary]	
           99999,                        -- [ASAFieldLevel9Sort]
           '0000.000000',                -- [ASAFieldLevel10ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel10Name]	
           1,                            -- [ASAFieldLevel10Unary]	
           99999,                        -- [ASAFieldLevel10Sort]
           '0000.000000',                -- [ASAFieldLevel11ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel11Name]	
           1,                            -- [ASAFieldLevel11Unary]	
           99999,                        -- [ASAFieldLevel11Sort]
           '0000.000000',                -- [ASAFieldLevel12ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel12Name]	
           1,                            -- [ASAFieldLevel12Unary]	
           99999,                        -- [ASAFieldLevel12Sort]
           'UNK',
           '1900-01-01',
           '9999-12-31 23:59:59.999',
           GETDATE(),
           GETDATE(),
           NULL,
           'A',
           ?
    UNION
    SELECT -2,
           -2,
           'Unknown AccountSubaccountName',
           -2,
           'Unknown AccountName',
           -2,
           'Unknown SubaccountName',
           'Unknown ASATuitionType',
           -1,                           -- [ASAFieldDepth]
           '0000.000000',                -- [ASAFieldLevel1ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel1Name]	
           1,                            -- [ASAFieldLevel1Unary]	
           99999,                        -- [ASAFieldLevel1Sort]
           '0000.000000',                -- [ASAFieldLevel2ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel2Name]	
           1,                            -- [ASAFieldLevel2Unary]	
           99999,                        -- [ASAFieldLevel2Sort]
           '0000.000000',                -- [ASAFieldLevel3ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel3Name]	
           1,                            -- [ASAFieldLevel3Unary]	
           99999,                        -- [ASAFieldLevel3Sort]
           '0000.000000',                -- [ASAFieldLevel4ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel4Name]	
           1,                            -- [ASAFieldLevel4Unary]	
           99999,                        -- [ASAFieldLevel4Sort]
           '0000.000000',                -- [ASAFieldLevel5ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel5Name]	
           1,                            -- [ASAFieldLevel5Unary]	
           99999,                        -- [ASAFieldLevel5Sort]
           '0000.000000',                -- [ASAFieldLevel6ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel6Name]	
           1,                            -- [ASAFieldLevel6Unary]	
           99999,                        -- [ASAFieldLevel6Sort]
           '0000.000000',                -- [ASAFieldLevel7ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel7Name]	
           1,                            -- [ASAFieldLevel7Unary]	
           99999,                        -- [ASAFieldLevel7Sort]
           '0000.000000',                -- [ASAFieldLevel8ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel8Name]	
           1,                            -- [ASAFieldLevel8Unary]	
           99999,                        -- [ASAFieldLevel8Sort]
           '0000.000000',                -- [ASAFieldLevel9ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel9Name]	
           1,                            -- [ASAFieldLevel9Unary]	
           99999,                        -- [ASAFieldLevel9Sort]
           '0000.000000',                -- [ASAFieldLevel10ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel10Name]	
           1,                            -- [ASAFieldLevel10Unary]	
           99999,                        -- [ASAFieldLevel10Sort]
           '0000.000000',                -- [ASAFieldLevel11ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel11Name]	
           1,                            -- [ASAFieldLevel11Unary]	
           99999,                        -- [ASAFieldLevel11Sort]
           '0000.000000',                -- [ASAFieldLevel12ID]	
           'Unknown Account Subaccount', -- [ASAFieldLevel12Name]	
           1,                            -- [ASAFieldLevel12Unary]	
           99999,                        -- [ASAFieldLevel12Sort]
           'UNK',
           '1900-01-01',
           '9999-12-31 23:59:59.999',
           GETDATE(),
           GETDATE(),
           NULL,
           'A',
           ?;

    SET IDENTITY_INSERT dbo.DimAccountSubaccount OFF;
END;"
"EXECUTE [spGL_Staging_AccountSubAccountLanding] 
NULL, ? OUTPUT, ? OUTPUT
GO
"
"DECLARE @AuditID int = ?

SET IDENTITY_INSERT dbo.DimCostCenter ON 

IF NOT EXISTS (SELECT 1 FROM dbo.DimCostCenter WHERE CostCenterNumber = -1)
	BEGIN
		INSERT INTO dbo.DimCostCenter
		(
			CostCenterKey,
			CostCenterNumber,
			CostCenterName,
			CompanyID,
			CostCenterTypeID,
			CostCenterTypeName,
			BusinessUnitCode,
			BusinessUnitName,
			OrganizationLevelCode,
			OrganizationLevelName,
			FunctionCode,
			FunctionName,
			LineOfBusinessCode,
			LineOfBusinessName,
			LineOfBusinessCategoryCode,
			LineOfBusinessCategoryName,
			LineOfBusinessSubcategoryCode,
			LineOfBusinessSubcategoryName,
			CCHierarchyLevel1Name,
			CCHierarchyLevel2Name,
			CCHierarchyLevel3Name,
			CCHierarchyLevel4Name,
			CCHierarchyLevel5Name,
			CCHierarchyLevel6Name,
			CCHierarchyLevel7Name,
			CCHierarchyLevel8Name,
			CCHierarchyLevel9Name,
			CCHierarchyLevel10Name,
			CCHierarchyLevel11Name,
			CCOpenDate,
			CCClosedDate,
			CCReopenDate,
			CCReopenDateType,
			CCClassification,
			CCStatus,
			CCConsolidation,
			CCFlexAttribute1,
			CCFlexAttribute2,
			CCFlexAttribute3,
			CCFlexAttribute4,
			CCFlexAttribute5,
			OrgID,
			ParentOrgID,
			DefaultLocationID,
			OrgNumber,
			OrgHierarchyLevel1Name,
			OrgHierarchyLevel2Name,
			OrgHierarchyLevel3Name,
			OrgHierarchyLevel4Name,
			OrgHierarchyLevel5Name,
			OrgHierarchyLevel6Name,
			OrgHierarchyLevel7Name,
			OrgHierarchyLevel8Name,
			OrgHierarchyLevel9Name,
			OrgHierarchyLevel10Name,
			OrgHierarchyLevel11Name,
			AllName,
			ExecutiveFunctionName,
			ExecutiveFunctionLeaderName,
			ExecutiveSubFunctionName,
			ExecutiveSubFunctionLeaderName,
			CorporateFunctionName,
			CorporateSubFunctionName,
			DivisionName,
			DivisionLeaderName,
			RegionNumber,
			RegionName,
			RegionLeaderName,
			MarketNumber,
			MarketName,
			MarketLeaderName,
			SubMarketNumber,
			SubMarketName,
			SubMarketLeaderName,
			DistrictNumber,
			DistrictName,
			InterimDistrictNumber,
			InterimDistrictName,
			DistrictLeaderName,
			ActingDistrictLeaderName,
			InterimDistrictLeaderName,
			GroupNumber,
			GroupName,
			GroupLeaderName,
			SubgroupNumber,
			SubGroupName,
			SubGroupLeaderName,
			CampusNumber,
			CampusName,
			CampusLeaderName,
			CenterLeaderName,
			ActingCenterLeaderName,
			CategoryName,
			TypeCode,
			TypeName,
			PartnerGroupCode,
			PartnerGroupName,
			CenterGroupCode,
			CenterGroupName,
			DivisionLegacyName,
			BrandCode,
			BrandName,
			OrgFlexAttribute1,
			OrgFlexAttribute2,
			OrgFlexAttribute3,
			OrgFlexAttribute4,
			OrgFlexAttribute5,
			CenterCMSID,
			CenterCSSID,
			SiteHorizonID,
			CenterEnrollmentSourceSystem,
			CenterCMSMigrationDate,
			CenterCMSMigrationStatus,
			CenterLicensedCapacity,
			CenterBackupCareFlag,
			CenterChildCareSelectFlag,
			CenterPublicAllowedFlag,
			CenterOpenTime,
			CenterCloseTime,
			CenterStudentMinimumAge,
			CenterStudentMaximumAge,
			CenterOpenSunFlag,
			CenterOpenMonFlag,
			CenterOpenTueFlag,
			CenterOpenWedFlag,
			CenterOpenThuFlag,
			CenterOpenFriFlag,
			CenterOpenSatFlag,
			CenterFoodProgramStartDate,
			CenterFoodProgramEndDate,
			CenterRegistrationType,
			SiteSchoolDistrict,
			SiteClassYear,
			CenterURL,
			CenterMenuURL,
			CenterHasBreakfastFlag,
			CenterHasMorningSlackFlag,
			CenterHasLunchFlag,
			CenterHasAfternoonSnackFlag,
			CenterSpeaksASLFlag,
			CenterSpeaksArabicFlag,
			CenterSpeaksFrenchFlag,
			CenterSpeaksGermanFlag,
			CenterSpeaksHindiFlag,
			CenterSpeaksMandarinFlag,
			CenterSpeaksPunjabiFlag,
			CenterSpeaksSpanishFlag,
			CenterSpeaksOtherLanguages,
			CenterAccreditationAgencyCode,
			CenterAccreditationStartDate,
			CenterAccreditationExpirationDate,
			CenterAccreditationNextActivity,
			CenterAccreditationNextActivityDueDate,
			CenterAccreditationPrimaryStatus,
			CenterAccreditationProgramID,
			CenterQRISRating,
			CenterQRISRatingStartDate,
			CenterQRISRatingExpirationDate,
			CenterLatitude,
			City,
			[State],
			Zipcode,
			CenterOperationalCapacity,
			CenterLongitude,
			CenterCurrentHumanSigmaScore,
			CenterPreviousHumanSigmaScore,
			EDWEffectiveFrom,
			EDWEffectiveTo,
			EDWCreatedDate,
			EDWModifiedDate,
			EDWDeletedDate,
			EDWRowStatus,
			ETLJobId,
			Address1,
			Address2,
			Address3,
			County,
			Country,
			Timezone,
			PhoneNumber,
			Fax
		)
		VALUES
		(
			-1,
			'-1',
			'Unknown CostCenterName',
			'-1',
			'-1',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'1900-01-01',
			'1900-01-01',
			'1900-01-01',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			-1,
			-1,
			-1,
			'-1',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'-1',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			-1,
			'-1',
			-1,
			'UNK',
			'1900-01-01',
			NULL,
			-1,
			'Unknown',
			'Unknown',
			'Unknown',
			NULL,
			NULL,
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'1900-01-01',
			'1900-01-01',
			'Unknown',
			'Unknown',
			-1,
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'1900-01-01',
			'1900-01-01',
			'Unknown',
			'1900-01-01',
			'Unknown',
			'Unknown',
			'Unknown',
			'1900-01-01',
			'1900-01-01',
			-1,
			'Unknown',
			NULL,
			'Unknown',
			-1,
			-1,
			'Unknown',
			'Unknown',
			'1900-01-01',
			'1900-01-01',
			'1900-01-01',
			'1900-01-01',
			NULL,
			'A',
			@AuditID,
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown',
			'Unknown'
		)
	END

IF NOT EXISTS (SELECT 1 FROM dbo.DimCostCenter WHERE CostCenterNumber = -2)
	BEGIN
		INSERT INTO dbo.DimCostCenter
		(
			CostCenterKey,
			CostCenterNumber,
			CostCenterName,
			CompanyID,
			CostCenterTypeID,
			CostCenterTypeName,
			BusinessUnitCode,
			BusinessUnitName,
			OrganizationLevelCode,
			OrganizationLevelName,
			FunctionCode,
			FunctionName,
			LineOfBusinessCode,
			LineOfBusinessName,
			LineOfBusinessCategoryCode,
			LineOfBusinessCategoryName,
			LineOfBusinessSubcategoryCode,
			LineOfBusinessSubcategoryName,
			CCHierarchyLevel1Name,
			CCHierarchyLevel2Name,
			CCHierarchyLevel3Name,
			CCHierarchyLevel4Name,
			CCHierarchyLevel5Name,
			CCHierarchyLevel6Name,
			CCHierarchyLevel7Name,
			CCHierarchyLevel8Name,
			CCHierarchyLevel9Name,
			CCHierarchyLevel10Name,
			CCHierarchyLevel11Name,
			CCOpenDate,
			CCClosedDate,
			CCReopenDate,
			CCReopenDateType,
			CCClassification,
			CCStatus,
			CCConsolidation,
			CCFlexAttribute1,
			CCFlexAttribute2,
			CCFlexAttribute3,
			CCFlexAttribute4,
			CCFlexAttribute5,
			OrgID,
			ParentOrgID,
			DefaultLocationID,
			OrgNumber,
			OrgHierarchyLevel1Name,
			OrgHierarchyLevel2Name,
			OrgHierarchyLevel3Name,
			OrgHierarchyLevel4Name,
			OrgHierarchyLevel5Name,
			OrgHierarchyLevel6Name,
			OrgHierarchyLevel7Name,
			OrgHierarchyLevel8Name,
			OrgHierarchyLevel9Name,
			OrgHierarchyLevel10Name,
			OrgHierarchyLevel11Name,
			AllName,
			ExecutiveFunctionName,
			ExecutiveFunctionLeaderName,
			ExecutiveSubFunctionName,
			ExecutiveSubFunctionLeaderName,
			CorporateFunctionName,
			CorporateSubFunctionName,
			DivisionName,
			DivisionLeaderName,
			RegionNumber,
			RegionName,
			RegionLeaderName,
			MarketNumber,
			MarketName,
			MarketLeaderName,
			SubMarketNumber,
			SubMarketName,
			SubMarketLeaderName,
			DistrictNumber,
			DistrictName,
			InterimDistrictNumber,
			InterimDistrictName,
			DistrictLeaderName,
			ActingDistrictLeaderName,
			InterimDistrictLeaderName,
			GroupNumber,
			GroupName,
			GroupLeaderName,
			SubgroupNumber,
			SubGroupName,
			SubGroupLeaderName,
			CampusNumber,
			CampusName,
			CampusLeaderName,
			CenterLeaderName,
			ActingCenterLeaderName,
			CategoryName,
			TypeCode,
			TypeName,
			PartnerGroupCode,
			PartnerGroupName,
			CenterGroupCode,
			CenterGroupName,
			DivisionLegacyName,
			BrandCode,
			BrandName,
			OrgFlexAttribute1,
			OrgFlexAttribute2,
			OrgFlexAttribute3,
			OrgFlexAttribute4,
			OrgFlexAttribute5,
			CenterCMSID,
			CenterCSSID,
			SiteHorizonID,
			CenterEnrollmentSourceSystem,
			CenterCMSMigrationDate,
			CenterCMSMigrationStatus,
			CenterLicensedCapacity,
			CenterBackupCareFlag,
			CenterChildCareSelectFlag,
			CenterPublicAllowedFlag,
			CenterOpenTime,
			CenterCloseTime,
			CenterStudentMinimumAge,
			CenterStudentMaximumAge,
			CenterOpenSunFlag,
			CenterOpenMonFlag,
			CenterOpenTueFlag,
			CenterOpenWedFlag,
			CenterOpenThuFlag,
			CenterOpenFriFlag,
			CenterOpenSatFlag,
			CenterFoodProgramStartDate,
			CenterFoodProgramEndDate,
			CenterRegistrationType,
			SiteSchoolDistrict,
			SiteClassYear,
			CenterURL,
			CenterMenuURL,
			CenterHasBreakfastFlag,
			CenterHasMorningSlackFlag,
			CenterHasLunchFlag,
			CenterHasAfternoonSnackFlag,
			CenterSpeaksASLFlag,
			CenterSpeaksArabicFlag,
			CenterSpeaksFrenchFlag,
			CenterSpeaksGermanFlag,
			CenterSpeaksHindiFlag,
			CenterSpeaksMandarinFlag,
			CenterSpeaksPunjabiFlag,
			CenterSpeaksSpanishFlag,
			CenterSpeaksOtherLanguages,
			CenterAccreditationAgencyCode,
			CenterAccreditationStartDate,
			CenterAccreditationExpirationDate,
			CenterAccreditationNextActivity,
			CenterAccreditationNextActivityDueDate,
			CenterAccreditationPrimaryStatus,
			CenterAccreditationProgramID,
			CenterQRISRating,
			CenterQRISRatingStartDate,
			CenterQRISRatingExpirationDate,
			CenterLatitude,
			City,
			[State],
			Zipcode,
			CenterOperationalCapacity,
			CenterLongitude,
			CenterCurrentHumanSigmaScore,
			CenterPreviousHumanSigmaScore,
			EDWEffectiveFrom,
			EDWEffectiveTo,
			EDWCreatedDate,
			EDWModifiedDate,
			EDWDeletedDate,
			EDWRowStatus,
			ETLJobId,
			Address1,
			Address2,
			Address3,
			County,
			Country,
			Timezone,
			PhoneNumber,
			Fax
		)
		VALUES
		(
			-2,
			'-2',
			'Not Applicable CostCenterName',
			'-2',
			'-2',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'1900-01-01',
			'1900-01-01',
			'1900-01-01',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			-2,
			-2,
			-2,
			'-2',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'-2',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			-2,
			'-2',
			-2,
			'N/A',
			'1900-01-01',
			NULL,
			-2,
			'N/A',
			'N/A',
			'N/A',
			NULL,
			NULL,
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'1900-01-01',
			'1900-01-01',
			'N/A',
			'N/A',
			-2,
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'1900-01-01',
			'1900-01-01',
			'N/A',
			'1900-01-01',
			'N/A',
			'N/A',
			'N/A',
			'1900-01-01',
			'1900-01-01',
			-2,
			'N/A',
			NULL,
			'N/A',
			-2,
			-2,
			'N/A',
			'N/A',
			'1900-01-01',
			'1900-01-01',
			'1900-01-01',
			'1900-01-01',
			NULL,
			'A',
			@AuditID,
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A',
			'N/A'
		)
	END

SET IDENTITY_INSERT dbo.DimCostCenter OFF
"
exec  [dbo].[spBING_EDW_Generate_DimCostCenter]
"UPDATE A
SET A.EDWEffectiveFrom = B.EDWEffectiveTo
FROM DW_MART..DimCostCenter A
    INNER JOIN
    (
        SELECT *
        FROM
        (
            SELECT *,
                   ROW_NUMBER() OVER (PARTITION BY B.CostCenterNumber ORDER BY B.EDWEffectiveTo DESC) AS RW
            FROM DW_MART..DimCostCenter B
            WHERE B.CostCenterNumber IN
                  (
                      SELECT CostCenterNumber
                      FROM DW_MART..DimCostCenter
                      WHERE EDWEffectiveFrom = '1900-01-01 00:00:00.000'
                      GROUP BY CostCenterNumber
                      HAVING COUNT(1) > 1
                  )
                  AND B.EDWRowStatus = 'H'
        ) A
        WHERE A.RW = 1
    ) B
        ON A.CostCenterNumber = B.CostCenterNumber
           AND A.EDWEffectiveFrom = '1900-01-01 00:00:00.000'
           AND A.EDWEffectiveTo = '9999-12-31 23:59:59.999';
"
truncate table dbo.DimMartCostcenterLanding
"UPDATE AuditLog
SET DeleteCount = ?
WHERE AuditID = ?"
"IF EXISTS
( SELECT 1 FROM dbo.DimPartner WHERE PartnerKey < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
		SET IDENTITY_INSERT dbo.DimPartner ON;

INSERT INTO [dbo].[DimPartner]
		([PartnerKey]
		,[PartnerID]
		,[PartnerName]
		,[EffectiveFrom]
		,[EffectiveTo]
		,[CreatedDate]
		,[ModifiedDate]
		,[DeletedDate]
		,[RowStatus]
		,[ETLJobID])
	SELECT-1,
			-1,
			'Unknown PartnerName',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			0
	UNION
	SELECT-2,
			-2,
			'Not Applicable PartnerName',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			0
SET IDENTITY_INSERT dbo.DimPartner OFF;
END;"
"EXECUTE [dbo].[spDimPartnerLoad] null, null, ?, ? output;"
Truncate table DimPartnerLanding
"IF EXISTS
( SELECT 1 FROM dbo.DimProgram WHERE ProgramKey < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
             SET IDENTITY_INSERT dbo.DimProgram ON;
             INSERT INTO [dbo].[DimProgram]
             ([ProgramKey],
              [ProgramID],
              [ProgramName],
              [SourceSystem],
              [EffectiveFrom],
              [EffectiveTo],
              [CreatedDate],
              [ModifiedDate],
              [DeletedDate],
              [RowStatus],
              [ETLJobID]
             )
                    SELECT-1,
                          -1,
                          'Unknown Program',
                          'UNK',
                          '1900-01-01 00:00:00.000',
                          '9999-12-31 23:59:59.999',
                          GETDATE(),
                          GETDATE(),
                          NULL,
                         'A',
                         ?
                    UNION
                    SELECT-2,
                          -2,
                          'Not Applicable Program',
	          'UNK',
                          '1900-01-01 00:00:00.000',
                          '9999-12-31 23:59:59.999',
                          GETDATE(),
                          GETDATE(),
                          NULL,
                         'A',
                         ?;
        
                         SET IDENTITY_INSERT dbo.DimProgram OFF;
						 END;

						"
"IF EXISTS
( SELECT 1 FROM dbo.DimSession WHERE SessionKey < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
		SET IDENTITY_INSERT dbo.DimSession ON;

INSERT INTO [dbo].[DimSession]
		([SessionKey]
		,[SessionID]
		,[SessionName]
		,[SourceSystem]
		,[EffectiveFrom]
		,[EffectiveTo]
		,[CreatedDate]
		,[ModifiedDate]
		,[DeletedDate]
		,[RowStatus]
		,[ETLJobID])
	SELECT-1,
			-1,
			'Unknown SessionName',
			'UNK',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?
	UNION
	SELECT-2,
			-2, 
			'Not Applicable SessionName',
			'UNK',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?;

SET IDENTITY_INSERT dbo.DimSession OFF;
END;"
"
  IF EXISTS
( SELECT 1 FROM dbo.[DimSponsor] WHERE [SponsorKey] < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
 SET IDENTITY_INSERT dbo.DimSponsor ON;
             INSERT INTO [dbo].[DimSponsor]
             ([SponsorKey],
              [SponsorID],
			  [SponsorFirstName],
			  [SponsorLastName],
			  [SponsorFullName],
			  [SponsorStatus],
			  [SourceSystem],
              [CSSCenterNumber],
	          [CSSFamilyNumber],
		      [EffectiveFrom],
		      [EffectiveTo],
		      [CreatedDate],
		      [ModifiedDate],
		      [DeletedDate],
		      [RowStatus],
		      [ETLJobID]
              )
             SELECT-1,
             -1,
			'Unknown FirstName',
			'Unknown LastName',
			'Unknown FullName',
			'Unknown SponsorStatus',
			 'UNK',
            '-1',
            '-1',
		    '1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?
            UNION
            SELECT-2,
            -2,
			'Unknown FirstName',
			'Unknown LastName',
			'Unknown FullName',
			'Unknown SponsorStatus',
			'UNK',
            '-2',
            '-2',
		    '1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?;
            SET IDENTITY_INSERT dbo.DimSponsor OFF;
			END;

SELECT * FROM DW_Mart.dbo.DimSponsor
WHERE SponsorKey<0"
"EXECUTE [dbo].[spDimSponsorLoad] null, null, ?, ? output;"
Truncate table DimSponsorLanding
"IF EXISTS
( SELECT 1 FROM dbo.DimStudent WHERE StudentKey < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
		SET IDENTITY_INSERT dbo.DimStudent ON;

INSERT INTO [dbo].[DimStudent]
		([StudentKey]
		,[StudentID]
		,[StudentFirstName]
		,[StudentLastName]
		,[StudentStatus]
		,[StudentFirstEnrollmentDate]
		,[FiscalWeekNumber]
		,[CSSCenterNumber]
		,[CSSFamilyNumber]
		,[CSSStudentNumber]
		,[SourceSystem]
		,[EffectiveFrom]
		,[EffectiveTo]
		,[CreatedDate]
		,[ModifiedDate]
		,[DeletedDate]
		,[RowStatus]
		,[ETLJobID]
		,[StudentFullName]
		,[StudentBirthDate])
	SELECT-1,
			-1,
			'Unknown StudentFirstName',
			'Unknown StudentLastName',
			'Unknown StudentStatus',
			'1900-01-01',
			-1,
			-1,
			-1,
			-1,
			'UNK',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?,
			'Unknown Student Name',
			'Unknown Student Birth Date'
	UNION
	SELECT-2,
			-2,
			'Unknown StudentFirstName',
			'Unknown StudentLastName',
			'Unknown StudentStatus',
			'1900-01-01',
			-1,
			-1,
			-1,
			-1,
			'UNK',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?,
			'Unknown Student Name',
			'Unknown Student Birth Date';

SET IDENTITY_INSERT dbo.DimStudent OFF;
END;"
"EXECUTE [dbo].[spDimStudentLoad] null, null, ?, ? output;"
Truncate table DimStudentLanding
"IF EXISTS
( SELECT 1 FROM dbo.DimTier WHERE SourceSystem='CSS' )
BEGIN 
 PRINT 'No Insert' 
END
ELSE 


INSERT INTO [dbo].[DimTier]
  ([TierID]
  ,[TierName]
  ,[CSSTierNumber]
  ,[SourceSystem]
  ,[EffectiveFrom]
  ,[EffectiveTo]
  ,[CreatedDate]
  ,[ModifiedDate]
  ,[DeletedDate]
  ,[RowStatus]
  ,[ETLJobID])
 SELECT
   -2,
   'T1CSS',
   1,
   'CSS',
   '1900-01-01',
   '9999-12-31 23:59:59.999',
   GETDATE(),
   GETDATE(),
   NULL,
   'A',
   ?
 UNION
 SELECT
   -2,
   'T2CSS',
   2,
   'CSS',
   '1900-01-01',
   '9999-12-31 23:59:59.999',
   GETDATE(),
   GETDATE(),
   NULL,
   'A',
   ?
   UNION
 SELECT
   -2,
   'T3CSS',
    3,
   'CSS',
   '1900-01-01',
   '9999-12-31 23:59:59.999',
   GETDATE(),
   GETDATE(),
   NULL,
   'A',
   ?
   UNION
 SELECT
   -2,
   'T4CSS',
    4,
   'CSS',
   '1900-01-01',
   '9999-12-31 23:59:59.999',
   GETDATE(),
   GETDATE(),
   NULL,
   'A',
   ?;


"
"IF EXISTS
( SELECT 1 FROM dbo.DimTier WHERE TierKey < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
		SET IDENTITY_INSERT dbo.DimTier ON;

INSERT INTO [dbo].[DimTier]
		([TierKey]
		,[TierID]
		,[TierName]                                
		,[SourceSystem]
                                ,[CSSTierNumber]
		,[EffectiveFrom]
		,[EffectiveTo]
		,[CreatedDate]
		,[ModifiedDate]
		,[DeletedDate]
		,[RowStatus]
		,[ETLJobID])
	SELECT-1,
			-1,
			'Unknown TierName',
			'UNK',
                                                -1,
                                	'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?
	UNION
	SELECT-2,
			-2, 
			'Not Applicable TierName',                                                 
                                                 'UNK',
                                                 -2,
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?;

SET IDENTITY_INSERT dbo.DimTier OFF;
END;"
" 
 IF EXISTS
( SELECT 1 FROM dbo.[DimTuitionAssistanceProvider] WHERE [TuitionAssistanceProviderKey] < 0 )
BEGIN 
	PRINT 'No Insert' 
END
ELSE 
BEGIN
 SET IDENTITY_INSERT dbo.DimTuitionAssistanceProvider ON;
             INSERT INTO [dbo].[DimTuitionAssistanceProvider]
             ([TuitionAssistanceProviderKey],
              [TuitionAssistanceProviderID],
              [TuitionAssistanceProviderName],
              [TuitionAssistanceProviderType],
			  [SourceSystem],
              [CSSCenterNumber]
             ,[CSSCustomerCode]
		,[EffectiveFrom]
		,[EffectiveTo]
		,[CreatedDate]
		,[ModifiedDate]
		,[DeletedDate]
		,[RowStatus]
		,[ETLJobID]

             )
                    SELECT-1,
                          -1,
                          'Unknown Tuition Assistance Provider',
                          'Unknown Tuition Assistance Provider Type',
						  'UNK',
                           '-1',
                           '-1',
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?
                         
                    UNION
                    SELECT-2,
                          -2,
                          'Not Applicable Tuition Assistance Provider',
                          'Not Applicable  Tuition Assistance Provider Type',
                         'UNK',
                        '-2',
                        '-2', 
			'1900-01-01',
			'9999-12-31 23:59:59.999',
			GETDATE(),
			GETDATE(),
			NULL,
			'A',
			?;
          
             SET IDENTITY_INSERT dbo.DimTuitionAssistanceProvider OFF;
			 END;"
EXEC spHR_StagingToEDW_DimOrganization
Exec [dbo].[spHR_StagingToEDW_DimPayBasis]
EXEC dbo.spHR_StagingToEDW_DimPayGrade
Execute [dbo].[spCMS_StagingToEDW_DimPaymentType];
EXEC dbo.spHR_StagingToEDW_DimPayRateChangeReason
EXEC dbo.spMISC_StagingToEDW_DimPayrollType
EXEC spHR_StagingToEDW_DimPeopleGroup
EXEC dbo.spHR_StagingToEDW_DimPerformanceRating;
EXEC dbo.spHR_StagingToEDW_DimPerson
EXEC dbo.spHR_StagingToEDW_DimPosition
EXEC dbo.spCMS_StagingToEDW_DimProgram
EXEC [dbo].[spHR_StagingToEDW_DimQualificationType]
EXEC dbo.spMISC_StagingToEDW_DimReportProfile
Truncate table DimRetentionBaseWeek
 EXEC [dbo].[spCMS_StagingToEDW_DimScheduleType]
" SELECT COUNT(1) AS DeleteCount 
From dbo.DimScheduleWeek"
"WITH Numbers(N) -- CTE building the 7 weekday numbers
                  AS (
                  SELECT N
                  FROM(VALUES(1), (2), (3), (4), (5), (6), (7)) Numbers(N)),
                  Recur(N,
                        CalendarID) -- CTE building a combinations of Days per Week as a CalendarID
                  AS (
                  SELECT N,
                         CAST(N AS VARCHAR(1000))
                  FROM Numbers
                  UNION ALL
                  SELECT n.N,
                         CAST(r.CalendarID+','+CAST(n.N AS VARCHAR(10)) AS VARCHAR(1000))
                  FROM Recur r
                       INNER JOIN Numbers n ON n.N > r.N),
                  ScheduleWeekFlags -- CTE building a dataset of 7 flag columns for each days of the week, linking to the CalendarID
                  AS (
                  SELECT CalendarID,
                         CASE
                             WHEN CalendarID LIKE '%1%'
                             THEN '1'
                             ELSE '0'
                         END S,
                         CASE
                             WHEN CalendarID LIKE '%2%'
                             THEN '1'
                             ELSE '0'
                         END M,
                         CASE
                             WHEN CalendarID LIKE '%3%'
                             THEN '1'
                             ELSE '0'
                         END T,
                         CASE
                             WHEN CalendarID LIKE '%4%'
                             THEN '1'
                             ELSE '0'
                         END W,
                         CASE
                             WHEN CalendarID LIKE '%5%'
                             THEN '1'
                             ELSE '0'
                         END TH,
                         CASE
                             WHEN CalendarID LIKE '%6%'
                             THEN '1'
                             ELSE '0'
                         END F,
                         CASE
                             WHEN CalendarID LIKE '%7%'
                             THEN '1'
                             ELSE '0'
                         END SA
                  FROM Recur)
                  INSERT INTO dbo.DimScheduleWeek
                  ([ScheduleWeekName],
                  [RowStatus],
                   [ETLJobID]
                 )
                         SELECT CAST(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(r.CalendarID, '1', 'Su'), '2', 'M'), '3', 'Tu'), '4', 'W'), '5', 'Th'), '6', 'F'), '7', 'Sa') AS VARCHAR(50)) AS ScheduleWeekName,
                                'A' AS RowStatus,
                                ?
                         FROM Recur r
                              JOIN ScheduleWeekFlags s ON r.CalendarID = s.CalendarID
                         ORDER BY LEN(r.CalendarID),
                                  r.CalendarID;
             SELECT @@ROWCOUNT + 2 AS SourceCount;
    
                "
"DBCC CHECKIDENT('[DimScheduleWeek]', RESEED, 1);
SET IDENTITY_INSERT dbo.DimScheduleWeek ON;
INSERT INTO [dbo].[DimScheduleWeek]
([ScheduleWeekKey],
 [ScheduleWeekName],
 [RowStatus],
 [ETLJobID]
)
       SELECT-1,
             'Unknown Schedule Week',
              'A',
             ?
       UNION
       SELECT-2,
             'Not Applicable Schedule Week',
             'A',
             ?;
SET IDENTITY_INSERT dbo.DimScheduleWeek OFF;"
 TRUNCATE TABLE dbo.DimScheduleWeek
EXEC dbo.spCMS_StagingToEDW_DimSession
Exec [dbo].[spHR_StagingToEDW_DimSpecialInfo]
Execute [dbo].[spCMS_StagingToEDW_DimSponsor]
EXEC dbo.spCMS_StagingToEDW_DimStudent
Exec [dbo].[spCMS_StagingToEDW_DimTier];
EXEC dbo.spCMS_StagingToEDW_DimTuitionAssistanceProvider;
EXEC dbo.spSalesForce_StagingToEDW_DimWebCampaign;
EXEC dbo.spCMS_StagingToEDW_FactAdjustment
EXEC spBackupTranLog 'BING_EDW'
EXEC spCMS_BatchLoad_StagingToEDW_FactARBalanceSnapshot
Exec [dbo].[spCSS_BatchLoad_StagingToEDW_FactARBalanceSnapshot]
EXEC dbo.spCMS_BatchLoad_StagingToEDW_FactBilling
EXEC spGL_BatchLoad_StagingToEDW_FactCenterStatSnapshot
EXEC dbo.spHR_StagingToEDW_FactEmployeeAssessment
EXEC dbo.spHR_StagingToEDW_FactEmployeeAssignment
EXEC dbo.spHR_StagingToEDW_FactEmployeeCompliance
EXEC dbo.spHR_StagingToEDW_FactEmployeeLeave
EXEC dbo.spHR_StagingToEDW_FactEmployeePayRate
EXEC dbo.spHR_StagingToEDW_FactEmployeePerformance
EXEC [dbo].[spHR_StagingToEDW_FactEmployeeQualification]
EXEC spCMS_BatchLoad_StagingToEDW_FactFTESnapshot
Exec [dbo]. spMISC_StagingToEDW_FactFTESnapshot
Exec [dbo].[spCambridge_BatchLoad_StagingToEDW_FactFTESnapshot]
EXEC spGL_BatchLoad_StagingToEDW_FactGLBalance
EXEC dbo.spMISC_BatchLoad_StagingToEDW_FactGLBalancePlanAllocation
"Exec [dbo].spMISC_StagingToEDW_FactLaborHourACQ
NULL,
?,
NULL"
EXEC spMISC_BatchLoad_StagingToEDW_FactLaborHourActual
EXEC spMISC_BatchLoad_StagingToEDW_FactLaborHourTarget
EXEC spMISC_BatchLoad_StagingToEDW_FactLaborHourTargetLegacy
"EXEC 
spCambridge_BatchLoad_StagingToEDW_FactLaborHourTarget"
EXEC spMISC_BatchLoad_StagingToEDW_FactLaborSalary
EXEC dbo.spSalesForce_StagingToEDW_FactLeadEvent
EXEC dbo.spSalesForce_StagingToEDW_FactLeadPipeline;
EXEC spCMS_BatchLoad_StagingToEDW_FactLifecycleStatusSnapshot
EXEC spCMS_BatchLoad_StagingToEDW_FactNetRevenue
"EXEC spMISC_StagingToEDW_FactNetRevenueACQ
   NULL
  ,?
  ,NULL"
EXEC spHOR_BatchLoad_StagingToEDW_FactNetRevenue
EXEC spPRO_BatchLoad_StagingToEDW_FactNetRevenue
SELECT COUNT(1) AS InsertCount FROM dbo.FactPartnerVerifiedSponsor WHERE  CreatedDate>?
"-------------------------------------------------------------------------------------------------------
UPDATE FCT
SET FCT.PartnerAssignmentEndDate = GETDATE()
  , FCT.ModifiedDate = GETDATE()
  , FCT.Effectiveto = CONVERT(Date, GETDATE())
  , FCT.RowStatus='H'
  ,FCT.ETLJobID=?
FROM DW_Mart.dbo.FactPartnerVerifiedSponsor                    FCT
    JOIN DW_Mart.dbo.DimSponsor                                Spon
        ON FCT.SponsorKey = Spon.SponsorKey
    LEFT JOIN DW_Mart.dbo.DimPartner                           Prtnr
        ON FCT.PartnerKey = Prtnr.PartnerKey
     JOIN DW_Landing.dbo.FactPartnerVerifiedSponsorLanding Ldng
        ON Ldng.SponsorID = Spon.SponsorID
WHERE (COALESCE(Ldng.PartnerID, '-1') <> COALESCE(Prtnr.PartnerID, '-1') OR COALESCE(Ldng.PartnerAssignmentStartDate,'1900-01-01')<>COALESCE(FCT.PartnerAssignmentStartDate,'1900-01-01'))
      AND FCT.PartnerAssignmentEndDate IS NULL  AND FCT.RowStatus='A'
-------------------------------------------------------------------------------------------------------
UPDATE FCT
SET FCT.PartnerVerificationEndDate = GETDATE()
  , FCT.ModifiedDate = GETDATE()
  , FCT.EffectiveTo = CONVERT(Date, GETDATE())
  , FCT.RowStatus='H'
  ,FCT.ETLJobID=?
FROM DW_Mart.dbo.FactPartnerVerifiedSponsor                    FCT
    JOIN DW_Mart.dbo.DimSponsor                                Spon
        ON FCT.SponsorKey = Spon.SponsorKey
    LEFT JOIN DW_Mart.dbo.DimPartner                           Prtnr
        ON FCT.PartnerKey = Prtnr.PartnerKey
     JOIN DW_Landing.dbo.FactPartnerVerifiedSponsorLanding Ldng
        ON Ldng.SponsorID = Spon.SponsorID
WHERE (
          COALESCE(Ldng.PartnerID, '-1') <> COALESCE(Prtnr.PartnerID, '-1')
          OR (Ldng.isPartnerVerified <> FCT.isPartnerVerified)
		  OR(COALESCE(Convert(Date,ldng.PartnerVerificationStartDate),'1900-01-01')<>COALESCE(Convert(Date,Fct.PartnerVerificationStartDate),'1900-01-01')) 
      )
      AND FCT.PartnerVerificationEndDate IS NULL  AND FCT.RowStatus='A'
-------------------------------------------------------------------------------------------------------"
SELECT COUNT(1) AS UpdateCount FROM dbo.FactPartnerVerifiedSponsor WHERE CreatedDate<>ModifiedDate AND ModifiedDate>?
TRUNCATE TABLE dbo.FactPartnerVerifiedSponsorLanding
EXEC dbo.spCMS_BatchLoad_StagingToEDW_FactPayment
EXEC dbo.spCMS_StagingToEDW_FactPaymentApplied
EXEC dbo.spHR_StagingToEDW_FactPersonSpecialInfo
"IF OBJECT_ID('FactProgramDetailUpdate', 'U') IS NOT NULL 
	DROP TABLE FactProgramDetailUpdate; 

CREATE TABLE [FactProgramDetailUpdate](
	[ProgramDetailID] [int] NOT NULL,
	[CenterKey] [int] NOT NULL,
	[ProgramKey] [int] NOT NULL,
	[StudentTeacherRatio] [int] NOT NULL,
	[StudentMinimumAgeMonths] [int] NOT NULL,
	[StudentMaximumAgeMonths] [int] NOT NULL,
	[EDWCreatedDate] [datetime2](7) NOT NULL,
	[EDWCreatedBy] [varchar](50) NOT NULL,
	[EDWModifiedDate] [datetime2](7) NOT NULL,
	[EDWModifiedBy] [varchar](50) NOT NULL,
	[Deleted] [datetime2](7) NULL
)
"
DROP TABLE [FactProgramDetailUpdate]
"UPDATE EDWETLBatchControl
SET LastProcessedDate = ?, Status = 'Success'
WHERE EventName = 'FactProgramDetail'"
"DELETE f 
FROM FactProgramDetail f
INNER JOIN FactProgramDetailUpdate u
ON f.ProgramDetailID = u.ProgramDetailID 
AND u.Deleted IS NULL

INSERT INTO FactProgramDetail
SELECT ProgramDetailID, CenterKey, ProgramKey, StudentTeacherRatio, StudentMinimumAgeMonths, StudentMaximumAgeMonths,
EDWCreatedDate, EDWCreatedBy, EDWModifiedDate, EDWModifiedBy, Deleted           
FROM FactProgramDetailUpdate WHERE Deleted IS NULL

SELECT @@ROWCOUNT AS UpdateCount"
"UPDATE dest 
SET	dest.Deleted =  upd.Deleted
   ,dest.EDWModifiedDate = upd.Deleted
FROM FactProgramDetail dest
INNER JOIN FactProgramDetailUpdate upd
ON dest.ProgramDetailID = upd.ProgramDetailID
AND upd.Deleted IS NOT NULL

SELECT @@ROWCOUNT AS DeleteCount"
EXEC dbo.spCMS_StagingToEDW_FactSessionEnrollment
EXEC dbo.spCMS_StagingToEDW_FactTierAssignment
"CREATE VIEW [dbo].[vFactFTESnapshot]
WITH SCHEMABINDING
AS
     SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber, 
            f.AccountSubaccountKey, 
            COUNT_BIG(*) AS [Count], 
            SUM(f.FTE) AS FTE
     FROM dbo.FactFTESnapshot AS f
          JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
          JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
          JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber, 
              f.AccountSubaccountKey;"
"CREATE VIEW  [dbo].[vFactGLBalancePlanAllocation]
WITH SCHEMABINDING
AS
    SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber, 
   dm.GLMetricTypeCode,
   dm.GLMetricTypeKey,
            f.AccountSubaccountKey,
   COUNT_BIG(*) AS [Count],
   SUM(f.GLBalancePlanAllocationAmount) AS GLBalancePlanAllocationAmount
 FROM [dbo].[FactGLBalancePlanAllocation] AS f
      JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
         JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
   JOIN dbo.DimGLMetricType AS dm ON dm.GLMetricTypeKey=f.GLMetricTypeKey
   JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber,
     dm.GLMetricTypeCode,
     dm.GLMetricTypeKey,
              f.AccountSubaccountKey;"
"CREATE VIEW [dbo].[vFactLaborHour]
WITH SCHEMABINDING
AS
     SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber,
   f.DataScenarioKey,
            ds.DataScenarioName, 
            f.AccountSubaccountKey, 
            COUNT_BIG(*) AS [Count], 
            SUM(f.[Hours]) AS [Hours],
            f.IsTSEF
     FROM [dbo].[FactLaborHour] AS f
          JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
          JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
          JOIN dbo.DimDataScenario AS ds ON ds.DataScenarioKey = f.DataScenarioKey
          JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber,
     f.DataScenarioKey,
              ds.DataScenarioName, 
              f.AccountSubaccountKey,
 f.IsTSEF;"
"CREATE VIEW  [dbo].[vFactLaborSalary]
WITH SCHEMABINDING
AS
    SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber, 
            f.AccountSubaccountKey,
   COUNT_BIG(*) AS [Count],
   SUM(f.NetAmount) AS [NetAmount]
 FROM [dbo].[FactLaborSalary] AS f
      JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
         JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
   JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber, 
              f.AccountSubaccountKey;"
"CREATE VIEW [dbo].[vFactNetRevenue] 
WITH SCHEMABINDING
 AS 
SELECT d.FiscalWeekNumber
      ,d.FiscalWeekEndDate 
      ,mcc.CostCenterKey 
      ,mcc.CostCenterNumber 
      ,f.AccountSubaccountKey 
      ,COUNT_BIG(*) AS [Count] 
   ,SUM(f.NetRevenueAmount) AS NetRevenueAmount
 FROM dbo.FactNetRevenue AS f
    JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
          JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
          JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber, 
              f.AccountSubaccountKey;"
"IF OBJECT_ID('dbo.vFactFTESnapshot') IS NOT NULL
	DROP VIEW [dbo].[vFactFTESnapshot];"
"IF OBJECT_ID('[dbo].[vFactGLBalancePlanAllocation]')IS NOT NULL
 DROP VIEW [dbo].[vFactGLBalancePlanAllocation];"
"IF OBJECT_ID('[dbo].[vFactLaborHour]')IS NOT NULL
 DROP VIEW [dbo].[vFactLaborHour];"
"IF OBJECT_ID('[dbo].[vFactLaborSalary]')IS NOT NULL
 DROP VIEW [dbo].[vFactLaborSalary];"
"IF OBJECT_ID('[dbo].[vFactNetRevenue]')IS NOT NULL
 DROP VIEW [dbo].[vFactNetRevenue];"
"CREATE UNIQUE CLUSTERED INDEX CIS_vFactFTESnapshot_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey ON [dbo].[vFactFTESnapshot](FiscalWeekNumber, CostCenterKey, AccountSubaccountKey);"
"CREATE UNIQUE CLUSTERED INDEX [CIS_vFactLaborHour_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_DataScenarioKey]
ON [dbo].[vFactLaborHour]([FiscalWeekNumber] ASC, [CostCenterKey] ASC, [AccountSubaccountKey] ASC, [DataScenarioKey] ASC);
"
"CREATE UNIQUE CLUSTERED INDEX [CIS_vFactLaborSalary_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey]
    ON [dbo].[vFactLaborSalary]([FiscalWeekNumber] ASC, [CostCenterKey] ASC, [AccountSubaccountKey] ASC);"
"CREATE UNIQUE CLUSTERED INDEX [CIS_vFactGLBalancePlanAllocation_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_GLMetricTypeKey]
    ON [dbo].[vFactGLBalancePlanAllocation]([FiscalWeekNumber] ASC, [CostCenterKey] ASC, [AccountSubaccountKey] ASC, [GLMetricTypeKey] ASC);"
"CREATE UNIQUE CLUSTERED INDEX [CIS_vFactNetRevenue_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey]
    ON [dbo].[vFactNetRevenue]([FiscalWeekNumber] ASC, [CostCenterKey] ASC, [AccountSubaccountKey] ASC);"
"/*--------------Comp---------------*/

INSERT INTO [dbo].DimCostCenter
SELECT 
      [CostCenterNumber]
      ,[CostCenterName]
      ,[CompanyID]
      ,[CostCenterTypeID]
      ,[CostCenterTypeName]
      ,[BusinessUnitCode]
      ,[BusinessUnitName]
      ,[OrganizationLevelCode]
      ,[OrganizationLevelName]
      ,[FunctionCode]
      ,[FunctionName]
      ,[LineOfBusinessCode]
      ,[LineOfBusinessName]
      ,[LineOfBusinessCategoryCode]
      ,[LineOfBusinessCategoryName]
      ,[LineOfBusinessSubcategoryCode]
      ,[LineOfBusinessSubcategoryName]
      ,[CCHierarchyLevel1Name]
      ,[CCHierarchyLevel2Name]
      ,[CCHierarchyLevel3Name]
      ,[CCHierarchyLevel4Name]
      ,[CCHierarchyLevel5Name]
      ,[CCHierarchyLevel6Name]
      ,[CCHierarchyLevel7Name]
      ,[CCHierarchyLevel8Name]
      ,[CCHierarchyLevel9Name]
      ,[CCHierarchyLevel10Name]
      ,[CCHierarchyLevel11Name]
      ,[CCOpenDate]
      ,[CCClosedDate]
      ,[CCReopenDate]
      ,[CCReopenDateType]
      ,[CCClassification]
      ,'Active - Non-Comp' AS [CCCompStatus]
      ,[CCStatus]
      ,[CCConsolidation]
      ,[CCFlexAttribute1]
      ,[CCFlexAttribute2]
      ,[CCFlexAttribute3]
      ,[CCFlexAttribute4]
      ,[CCFlexAttribute5]
      ,[OrgID]
      ,[ParentOrgID]
      ,[DefaultLocationID]
      ,[OrgNumber]
      ,[OrgHierarchyLevel1Name]
      ,[OrgHierarchyLevel2Name]
      ,[OrgHierarchyLevel3Name]
      ,[OrgHierarchyLevel4Name]
      ,[OrgHierarchyLevel5Name]
      ,[OrgHierarchyLevel6Name]
      ,[OrgHierarchyLevel7Name]
      ,[OrgHierarchyLevel8Name]
      ,[OrgHierarchyLevel9Name]
      ,[OrgHierarchyLevel10Name]
      ,[OrgHierarchyLevel11Name]
      ,[AllName]
      ,[ExecutiveFunctionName]
      ,[ExecutiveFunctionLeaderName]
      ,[ExecutiveSubFunctionName]
      ,[ExecutiveSubFunctionLeaderName]
      ,[CorporateFunctionName]
      ,[CorporateSubFunctionName]
      ,[DivisionName]
      ,[DivisionLeaderName]
      ,[RegionNumber]
      ,[RegionName]
      ,[RegionLeaderName]
      ,[MarketNumber]
      ,[MarketName]
      ,[MarketLeaderName]
      ,[SubMarketNumber]
      ,[SubMarketName]
      ,[SubMarketLeaderName]
      ,[DistrictNumber]
      ,[DistrictName]
      ,[InterimDistrictNumber]
      ,[InterimDistrictName]
      ,[DistrictLeaderName]
      ,[ActingDistrictLeaderName]
      ,[InterimDistrictLeaderName]
      ,[GroupNumber]
      ,[GroupName]
      ,[GroupLeaderName]
      ,[SubgroupNumber]
      ,[SubGroupName]
      ,[SubGroupLeaderName]
      ,[CampusNumber]
      ,[CampusName]
      ,[CampusLeaderName]
      ,[CenterLeaderName]
      ,[ActingCenterLeaderName]
      ,[CategoryName]
      ,[TypeCode]
      ,[TypeName]
      ,[PartnerGroupCode]
      ,[PartnerGroupName]
      ,[CenterGroupCode]
      ,[CenterGroupName]
      ,[DivisionLegacyName]
      ,[BrandCode]
      ,[BrandName]
      ,[OrgFlexAttribute1]
      ,[OrgFlexAttribute2]
      ,[OrgFlexAttribute3]
      ,[OrgFlexAttribute4]
      ,[OrgFlexAttribute5]
      ,[CenterCMSID]
      ,[CenterCSSID]
      ,[SiteHorizonID]
      ,[CenterEnrollmentSourceSystem]
      ,[CenterCMSMigrationDate]
      ,[CenterCMSMigrationStatus]
      ,[CenterLicensedCapacity]
      ,[CenterBackupCareFlag]
      ,[CenterChildCareSelectFlag]
      ,[CenterPublicAllowedFlag]
      ,[CenterOpenTime]
      ,[CenterCloseTime]
      ,[CenterStudentMinimumAge]
      ,[CenterStudentMaximumAge]
      ,[CenterOpenSunFlag]
      ,[CenterOpenMonFlag]
      ,[CenterOpenTueFlag]
      ,[CenterOpenWedFlag]
      ,[CenterOpenThuFlag]
      ,[CenterOpenFriFlag]
      ,[CenterOpenSatFlag]
      ,[CenterFoodProgramStartDate]
      ,[CenterFoodProgramEndDate]
      ,[CenterRegistrationType]
      ,[SiteSchoolDistrict]
      ,[SiteClassYear]
      ,[CenterURL]
      ,[CenterMenuURL]
      ,[CenterHasBreakfastFlag]
      ,[CenterHasMorningSlackFlag]
      ,[CenterHasLunchFlag]
      ,[CenterHasAfternoonSnackFlag]
      ,[CenterSpeaksASLFlag]
      ,[CenterSpeaksArabicFlag]
      ,[CenterSpeaksFrenchFlag]
      ,[CenterSpeaksGermanFlag]
      ,[CenterSpeaksHindiFlag]
      ,[CenterSpeaksMandarinFlag]
      ,[CenterSpeaksPunjabiFlag]
      ,[CenterSpeaksSpanishFlag]
      ,[CenterSpeaksOtherLanguages]
      ,[CenterAccreditationAgencyCode]
      ,[CenterAccreditationStartDate]
      ,[CenterAccreditationExpirationDate]
      ,[CenterAccreditationNextActivity]
      ,[CenterAccreditationNextActivityDueDate]
      ,[CenterAccreditationPrimaryStatus]
      ,[CenterAccreditationProgramID]
      ,[CenterQRISRating]
      ,[CenterQRISRatingStartDate]
      ,[CenterQRISRatingExpirationDate]
      ,[CenterLatitude]
      ,[CenterLongitude]
      ,[CenterCurrentHumanSigmaScore]
      ,[CenterPreviousHumanSigmaScore]
      ,'1900-01-01 00:00:00.000' AS [EDWEffectiveFrom]
      ,DATEADD(MM, 13, CCOpenDate) AS [EDWEffectiveTo]
      ,GETDATE() AS [EDWCreatedDate]
      ,GETDATE() AS [EDWModifiedDate]
      ,[EDWDeletedDate]
      ,'H' AS [EDWRowStatus]
      ,[ETLJobId] 
  FROM [dbo].[DimCostCenter]
WHERE CCCompStatus = 'Comp'
GO

UPDATE [DimCostCenter]
SET EDWEffectiveFrom = DATEADD(MM, 13, CCOpenDate),
	[EDWModifiedDate] = GETDATE()
WHERE CCCompStatus = 'Comp'
GO

/*--------------Active - Non-Comp---------------*/

INSERT INTO dbo.DimCostCenter
SELECT 
      [CostCenterNumber]
      ,[CostCenterName]
      ,[CompanyID]
      ,[CostCenterTypeID]
      ,[CostCenterTypeName]
      ,[BusinessUnitCode]
      ,[BusinessUnitName]
      ,[OrganizationLevelCode]
      ,[OrganizationLevelName]
      ,[FunctionCode]
      ,[FunctionName]
      ,[LineOfBusinessCode]
      ,[LineOfBusinessName]
      ,[LineOfBusinessCategoryCode]
      ,[LineOfBusinessCategoryName]
      ,[LineOfBusinessSubcategoryCode]
      ,[LineOfBusinessSubcategoryName]
      ,[CCHierarchyLevel1Name]
      ,[CCHierarchyLevel2Name]
      ,[CCHierarchyLevel3Name]
      ,[CCHierarchyLevel4Name]
      ,[CCHierarchyLevel5Name]
      ,[CCHierarchyLevel6Name]
      ,[CCHierarchyLevel7Name]
      ,[CCHierarchyLevel8Name]
      ,[CCHierarchyLevel9Name]
      ,[CCHierarchyLevel10Name]
      ,[CCHierarchyLevel11Name]
      ,[CCOpenDate]
      ,[CCClosedDate]
      ,[CCReopenDate]
      ,[CCReopenDateType]
      ,[CCClassification]
      ,'UnOpened' AS [CCCompStatus]
      ,[CCStatus]
      ,[CCConsolidation]
      ,[CCFlexAttribute1]
      ,[CCFlexAttribute2]
      ,[CCFlexAttribute3]
      ,[CCFlexAttribute4]
      ,[CCFlexAttribute5]
      ,[OrgID]
      ,[ParentOrgID]
      ,[DefaultLocationID]
      ,[OrgNumber]
      ,[OrgHierarchyLevel1Name]
      ,[OrgHierarchyLevel2Name]
      ,[OrgHierarchyLevel3Name]
      ,[OrgHierarchyLevel4Name]
      ,[OrgHierarchyLevel5Name]
      ,[OrgHierarchyLevel6Name]
      ,[OrgHierarchyLevel7Name]
      ,[OrgHierarchyLevel8Name]
      ,[OrgHierarchyLevel9Name]
      ,[OrgHierarchyLevel10Name]
      ,[OrgHierarchyLevel11Name]
      ,[AllName]
      ,[ExecutiveFunctionName]
      ,[ExecutiveFunctionLeaderName]
      ,[ExecutiveSubFunctionName]
      ,[ExecutiveSubFunctionLeaderName]
      ,[CorporateFunctionName]
      ,[CorporateSubFunctionName]
      ,[DivisionName]
      ,[DivisionLeaderName]
      ,[RegionNumber]
      ,[RegionName]
      ,[RegionLeaderName]
      ,[MarketNumber]
      ,[MarketName]
      ,[MarketLeaderName]
      ,[SubMarketNumber]
      ,[SubMarketName]
      ,[SubMarketLeaderName]
      ,[DistrictNumber]
      ,[DistrictName]
      ,[InterimDistrictNumber]
      ,[InterimDistrictName]
      ,[DistrictLeaderName]
      ,[ActingDistrictLeaderName]
      ,[InterimDistrictLeaderName]
      ,[GroupNumber]
      ,[GroupName]
      ,[GroupLeaderName]
      ,[SubgroupNumber]
      ,[SubGroupName]
      ,[SubGroupLeaderName]
      ,[CampusNumber]
      ,[CampusName]
      ,[CampusLeaderName]
      ,[CenterLeaderName]
      ,[ActingCenterLeaderName]
      ,[CategoryName]
      ,[TypeCode]
      ,[TypeName]
      ,[PartnerGroupCode]
      ,[PartnerGroupName]
      ,[CenterGroupCode]
      ,[CenterGroupName]
      ,[DivisionLegacyName]
      ,[BrandCode]
      ,[BrandName]
      ,[OrgFlexAttribute1]
      ,[OrgFlexAttribute2]
      ,[OrgFlexAttribute3]
      ,[OrgFlexAttribute4]
      ,[OrgFlexAttribute5]
      ,[CenterCMSID]
      ,[CenterCSSID]
      ,[SiteHorizonID]
      ,[CenterEnrollmentSourceSystem]
      ,[CenterCMSMigrationDate]
      ,[CenterCMSMigrationStatus]
      ,[CenterLicensedCapacity]
      ,[CenterBackupCareFlag]
      ,[CenterChildCareSelectFlag]
      ,[CenterPublicAllowedFlag]
      ,[CenterOpenTime]
      ,[CenterCloseTime]
      ,[CenterStudentMinimumAge]
      ,[CenterStudentMaximumAge]
      ,[CenterOpenSunFlag]
      ,[CenterOpenMonFlag]
      ,[CenterOpenTueFlag]
      ,[CenterOpenWedFlag]
      ,[CenterOpenThuFlag]
      ,[CenterOpenFriFlag]
      ,[CenterOpenSatFlag]
      ,[CenterFoodProgramStartDate]
      ,[CenterFoodProgramEndDate]
      ,[CenterRegistrationType]
      ,[SiteSchoolDistrict]
      ,[SiteClassYear]
      ,[CenterURL]
      ,[CenterMenuURL]
      ,[CenterHasBreakfastFlag]
      ,[CenterHasMorningSlackFlag]
      ,[CenterHasLunchFlag]
      ,[CenterHasAfternoonSnackFlag]
      ,[CenterSpeaksASLFlag]
      ,[CenterSpeaksArabicFlag]
      ,[CenterSpeaksFrenchFlag]
      ,[CenterSpeaksGermanFlag]
      ,[CenterSpeaksHindiFlag]
      ,[CenterSpeaksMandarinFlag]
      ,[CenterSpeaksPunjabiFlag]
      ,[CenterSpeaksSpanishFlag]
      ,[CenterSpeaksOtherLanguages]
      ,[CenterAccreditationAgencyCode]
      ,[CenterAccreditationStartDate]
      ,[CenterAccreditationExpirationDate]
      ,[CenterAccreditationNextActivity]
      ,[CenterAccreditationNextActivityDueDate]
      ,[CenterAccreditationPrimaryStatus]
      ,[CenterAccreditationProgramID]
      ,[CenterQRISRating]
      ,[CenterQRISRatingStartDate]
      ,[CenterQRISRatingExpirationDate]
      ,[CenterLatitude]
      ,[CenterLongitude]
      ,[CenterCurrentHumanSigmaScore]
      ,[CenterPreviousHumanSigmaScore]
      ,'1900-01-01 00:00:00.000' AS [EDWEffectiveFrom]
      ,CCOpenDate AS [EDWEffectiveTo]
      ,GETDATE() AS [EDWCreatedDate]
      ,GETDATE() AS [EDWModifiedDate]
      ,[EDWDeletedDate]
      ,'H' AS [EDWRowStatus]
      ,[ETLJobId] 
  FROM [dbo].[DimCostCenter]
WHERE CCCompStatus = 'Active - Non-Comp'
GO

UPDATE [DimCostCenter]
SET EDWEffectiveFrom = CCOpenDate,
	[EDWModifiedDate] = GETDATE()
WHERE CCCompStatus = 'Active - Non-Comp'
GO"
Truncate table DimCostCenter
Truncate table DimMartCostCenter
"CREATE VIEW  [dbo].[vFactGLBalancePlanAllocation]
WITH SCHEMABINDING
AS
    SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber, 
			dm.GLMetricTypeCode,
			dm.GLMetricTypeKey,
            f.AccountSubaccountKey,
			COUNT_BIG(*) AS [Count],
			SUM(f.GLBalancePlanAllocationAmount) AS GLBalancePlanAllocationAmount
	FROM [dbo].[FactGLBalancePlanAllocation] AS f
	     JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
         JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
		 JOIN dbo.DimGLMetricType AS dm ON dm.GLMetricTypeKey=f.GLMetricTypeKey
		 JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber,
			  dm.GLMetricTypeCode,
			  dm.GLMetricTypeKey,
              f.AccountSubaccountKey;"
"CREATE VIEW [dbo].[vFactLaborHour]
WITH SCHEMABINDING
AS
     SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber,
			f.DataScenarioKey,
            ds.DataScenarioName, 
            f.AccountSubaccountKey, 
            COUNT_BIG(*) AS [Count], 
            SUM(f.[Hours]) AS [Hours],
            f.IsTSEF
     FROM [dbo].[FactLaborHour] AS f
          JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
          JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
          JOIN dbo.DimDataScenario AS ds ON ds.DataScenarioKey = f.DataScenarioKey
          JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber,
			  f.DataScenarioKey,
              ds.DataScenarioName, 
              f.AccountSubaccountKey,
 f.IsTSEF;"
"CREATE VIEW  [dbo].[vFactLaborSalary]
WITH SCHEMABINDING
AS
    SELECT d.FiscalWeekNumber, 
            d.FiscalWeekEndDate, 
            mcc.CostCenterKey, 
            mcc.CostCenterNumber, 
            f.AccountSubaccountKey,
			COUNT_BIG(*) AS [Count],
			SUM(f.NetAmount) AS [NetAmount]
	FROM [dbo].[FactLaborSalary] AS f
	     JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
         JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
		 JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber, 
              f.AccountSubaccountKey;"
"CREATE VIEW [dbo].[vFactNetRevenue] 
WITH SCHEMABINDING
	AS 
SELECT d.FiscalWeekNumber
      ,d.FiscalWeekEndDate 
      ,mcc.CostCenterKey 
      ,mcc.CostCenterNumber 
      ,f.AccountSubaccountKey 
      ,COUNT_BIG(*) AS [Count] 
	  ,SUM(f.NetRevenueAmount) AS NetRevenueAmount
	FROM dbo.FactNetRevenue AS f
		  JOIN dbo.DimDate AS d ON d.DateKey = f.DateKey
          JOIN dbo.DimCostCenter AS cc ON cc.CostCenterKey = f.CostCenterKey
          JOIN dbo.DimMartCostCenter AS mcc ON mcc.CostCenterNumber = cc.CostCenterNumber
                                               AND d.FullDate BETWEEN mcc.EDWEffectiveFrom AND mcc.EDWEffectiveTo
     GROUP BY d.FiscalWeekNumber, 
              d.FiscalWeekEndDate, 
              mcc.CostCenterKey, 
              mcc.CostCenterNumber, 
              f.AccountSubaccountKey;"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactFTESnapshot_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactFTESnapshot_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey ON vFactFTESnapshot Disable;
"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactGLBalancePlanAllocation_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_GLMetricTypeKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactGLBalancePlanAllocation_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_GLMetricTypeKey ON vFactGLBalancePlanAllocation DISABLE;"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactLaborHour_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_DataScenarioKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactLaborHour_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_DataScenarioKey ON vFactLaborHour DISABLE;"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactLaborSalary_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactLaborSalary_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey ON vFactLaborSalary DISABLE;"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM [sys].[sysobjects] [O]
         INNER JOIN [sys].[sysindexes] [I] ON [O].[id] = [I].[id]
    WHERE [I].[name] = 'CIS_FactNetRevenueConsolidated_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey'
);
IF @view = 1
    DROP INDEX [CIS_FactNetRevenueConsolidated_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey] ON [dbo].[FactNetRevenueConsolidated];"
"TRUNCATE TABLE [dbo].[FactNetRevenueConsolidated];

INSERT INTO [dbo].[FactNetRevenueConsolidated] (
	[FiscalWeekNumber], [FiscalWeekEndDate], [CostCenterKey], [CostCenterNumber], [AccountSubaccountKey], [Count], [NetRevenueAmount]
)
SELECT
	[D].[FiscalWeekNumber],
	[D].[FiscalWeekEndDate],
	[MCC].[CostCenterKey],
	[MCC].[CostCenterNumber],
	[F].[AccountSubaccountKey],
	COUNT_BIG(*) AS [Count],
	SUM([F].[NetRevenueAmount]) AS [NetRevenueAmount]
FROM [dbo].[FactNetRevenue] [F]
INNER JOIN [dbo].[DimDate] [D] ON [F].[DateKey] = [D].[DateKey]
INNER JOIN [dbo].[DimCostCenter] [C] ON [F].[CostCenterKey] = [C].[CostCenterKey]
INNER JOIN [dbo].[DimMartCostCenter] [MCC] ON [C].[CostCenterNumber] = [MCC].[CostCenterNumber]
	AND [D].[FullDate] BETWEEN [MCC].[EDWEffectiveFrom] AND [MCC].[EDWEffectiveTo]
GROUP BY
	[D].[FiscalWeekNumber], [D].[FiscalWeekEndDate],
	[MCC].[CostCenterKey], [MCC].[CostCenterNumber],
	[F].[AccountSubaccountKey];

CREATE UNIQUE CLUSTERED INDEX [CIS_FactNetRevenueConsolidated_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey]
    ON [dbo].[FactNetRevenueConsolidated]([FiscalWeekNumber] ASC, [CostCenterKey] ASC, [AccountSubaccountKey] ASC);"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactFTESnapshot_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactFTESnapshot_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey ON vFactFTESnapshot  REBUILD PARTITION=ALL With (SORT_IN_TEMPDB = OFF);"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactLaborHour_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_DataScenarioKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactLaborHour_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_DataScenarioKey ON vFactLaborHour  REBUILD PARTITION=ALL With (SORT_IN_TEMPDB = OFF);"
"DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactLaborSalary_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactLaborSalary_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey ON vFactLaborSalary  REBUILD PARTITION=ALL With (SORT_IN_TEMPDB = OFF);"
"
DECLARE @view INT;
SET @view =
(
    SELECT 1
    FROM sysobjects o
         INNER JOIN sysindexes i ON o.id = i.id
    WHERE i.name = 'CIS_vFactGLBalancePlanAllocation_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_GLMetricTypeKey'
);
IF @view = 1
    ALTER INDEX CIS_vFactGLBalancePlanAllocation_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey_GLMetricTypeKey ON vFactGLBalancePlanAllocation  REBUILD PARTITION=ALL With (SORT_IN_TEMPDB = OFF);"
"UPDATE [dbo].[DimAccountSubaccount]
SET [ASAFieldDepth] = -1,                                 -- [ASAFieldDepth]
    [ASAFieldLevel1ID] = '0000.000000',                   -- [ASAFieldLevel1ID]	
    [ASAFieldLevel1Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel1Name]	
    [ASAFieldLevel1Unary] = 1,                            -- [ASAFieldLevel1Unary]	
    [ASAFieldLevel1Sort] = 99999,                         -- [ASAFieldLevel1Sort]
    [ASAFieldLevel2ID] = '0000.000000',                   -- [ASAFieldLevel2ID]	
    [ASAFieldLevel2Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel2Name]	
    [ASAFieldLevel2Unary] = 1,                            -- [ASAFieldLevel2Unary]	
    [ASAFieldLevel2Sort] = 99999,                         -- [ASAFieldLevel2Sort]
    [ASAFieldLevel3ID] = '0000.000000',                   -- [ASAFieldLevel3ID]	
    [ASAFieldLevel3Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel3Name]	
    [ASAFieldLevel3Unary] = 1,                            -- [ASAFieldLevel3Unary]	
    [ASAFieldLevel3Sort] = 99999,                         -- [ASAFieldLevel3Sort]
    [ASAFieldLevel4ID] = '0000.000000',                   -- [ASAFieldLevel4ID]	
    [ASAFieldLevel4Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel4Name]	
    [ASAFieldLevel4Unary] = 1,                            -- [ASAFieldLevel4Unary]	
    [ASAFieldLevel4Sort] = 99999,                         -- [ASAFieldLevel4Sort]
    [ASAFieldLevel5ID] = '0000.000000',                   -- [ASAFieldLevel5ID]	
    [ASAFieldLevel5Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel5Name]	
    [ASAFieldLevel5Unary] = 1,                            -- [ASAFieldLevel5Unary]	
    [ASAFieldLevel5Sort] = 99999,                         -- [ASAFieldLevel5Sort]
    [ASAFieldLevel6ID] = '0000.000000',                   -- [ASAFieldLevel6ID]	
    [ASAFieldLevel6Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel6Name]	
    [ASAFieldLevel6Unary] = 1,                            -- [ASAFieldLevel6Unary]	
    [ASAFieldLevel6Sort] = 99999,                         -- [ASAFieldLevel6Sort]
    [ASAFieldLevel7ID] = '0000.000000',                   -- [ASAFieldLevel7ID]	
    [ASAFieldLevel7Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel7Name]	
    [ASAFieldLevel7Unary] = 1,                            -- [ASAFieldLevel7Unary]	
    [ASAFieldLevel7Sort] = 99999,                         -- [ASAFieldLevel7Sort]
    [ASAFieldLevel8ID] = '0000.000000',                   -- [ASAFieldLevel8ID]	
    [ASAFieldLevel8Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel8Name]	
    [ASAFieldLevel8Unary] = 1,                            -- [ASAFieldLevel8Unary]	
    [ASAFieldLevel8Sort] = 99999,                         -- [ASAFieldLevel8Sort]
    [ASAFieldLevel9ID] = '0000.000000',                   -- [ASAFieldLevel9ID]	
    [ASAFieldLevel9Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel9Name]	
    [ASAFieldLevel9Unary] = 1,                            -- [ASAFieldLevel9Unary]	
    [ASAFieldLevel9Sort] = 99999,                         -- [ASAFieldLevel9Sort]
    [ASAFieldLevel10ID] = '0000.000000',                  -- [ASAFieldLevel10ID]	
    [ASAFieldLevel10Name] = 'Unknown Account Subaccount', -- [ASAFieldLevel10Name]	
    [ASAFieldLevel10Unary] = 1,                           -- [ASAFieldLevel10Unary]	
    [ASAFieldLevel10Sort] = 99999,                        -- [ASAFieldLevel10Sort]
    [ASAFieldLevel11ID] = '0000.000000',                  -- [ASAFieldLevel11ID]	
    [ASAFieldLevel11Name] = 'Unknown Account Subaccount', -- [ASAFieldLevel11Name]	
    [ASAFieldLevel11Unary] = 1,                           -- [ASAFieldLevel11Unary]	
    [ASAFieldLevel11Sort] = 99999,                        -- [ASAFieldLevel11Sort]
    [ASAFieldLevel12ID] = '0000.000000',                  -- [ASAFieldLevel12ID]	
    [ASAFieldLevel12Name] = 'Unknown Account Subaccount', -- [ASAFieldLevel12Name]	
    [ASAFieldLevel12Unary] = 1,                           -- [ASAFieldLevel12Unary]	
    [ASAFieldLevel12Sort] = 99999                         -- [ASAFieldLevel12Sort]
WHERE AccountSubaccountKey = '-1';

UPDATE dbo.DimAccountSubaccount
SET [ASAFieldDepth] = -1,                                 -- [ASAFieldDepth]
    [ASAFieldLevel1ID] = '0000.000000',                   -- [ASAFieldLevel1ID]	
    [ASAFieldLevel1Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel1Name]	
    [ASAFieldLevel1Unary] = 1,                            -- [ASAFieldLevel1Unary]	
    [ASAFieldLevel1Sort] = 99999,                         -- [ASAFieldLevel1Sort]
    [ASAFieldLevel2ID] = '0000.000000',                   -- [ASAFieldLevel2ID]	
    [ASAFieldLevel2Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel2Name]	
    [ASAFieldLevel2Unary] = 1,                            -- [ASAFieldLevel2Unary]	
    [ASAFieldLevel2Sort] = 99999,                         -- [ASAFieldLevel2Sort]
    [ASAFieldLevel3ID] = '0000.000000',                   -- [ASAFieldLevel3ID]	
    [ASAFieldLevel3Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel3Name]	
    [ASAFieldLevel3Unary] = 1,                            -- [ASAFieldLevel3Unary]	
    [ASAFieldLevel3Sort] = 99999,                         -- [ASAFieldLevel3Sort]
    [ASAFieldLevel4ID] = '0000.000000',                   -- [ASAFieldLevel4ID]	
    [ASAFieldLevel4Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel4Name]	
    [ASAFieldLevel4Unary] = 1,                            -- [ASAFieldLevel4Unary]	
    [ASAFieldLevel4Sort] = 99999,                         -- [ASAFieldLevel4Sort]
    [ASAFieldLevel5ID] = '0000.000000',                   -- [ASAFieldLevel5ID]	
    [ASAFieldLevel5Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel5Name]	
    [ASAFieldLevel5Unary] = 1,                            -- [ASAFieldLevel5Unary]	
    [ASAFieldLevel5Sort] = 99999,                         -- [ASAFieldLevel5Sort]
    [ASAFieldLevel6ID] = '0000.000000',                   -- [ASAFieldLevel6ID]	
    [ASAFieldLevel6Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel6Name]	
    [ASAFieldLevel6Unary] = 1,                            -- [ASAFieldLevel6Unary]	
    [ASAFieldLevel6Sort] = 99999,                         -- [ASAFieldLevel6Sort]
    [ASAFieldLevel7ID] = '0000.000000',                   -- [ASAFieldLevel7ID]	
    [ASAFieldLevel7Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel7Name]	
    [ASAFieldLevel7Unary] = 1,                            -- [ASAFieldLevel7Unary]	
    [ASAFieldLevel7Sort] = 99999,                         -- [ASAFieldLevel7Sort]
    [ASAFieldLevel8ID] = '0000.000000',                   -- [ASAFieldLevel8ID]	
    [ASAFieldLevel8Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel8Name]	
    [ASAFieldLevel8Unary] = 1,                            -- [ASAFieldLevel8Unary]	
    [ASAFieldLevel8Sort] = 99999,                         -- [ASAFieldLevel8Sort]
    [ASAFieldLevel9ID] = '0000.000000',                   -- [ASAFieldLevel9ID]	
    [ASAFieldLevel9Name] = 'Unknown Account Subaccount',  -- [ASAFieldLevel9Name]	
    [ASAFieldLevel9Unary] = 1,                            -- [ASAFieldLevel9Unary]	
    [ASAFieldLevel9Sort] = 99999,                         -- [ASAFieldLevel9Sort]
    [ASAFieldLevel10ID] = '0000.000000',                  -- [ASAFieldLevel10ID]	
    [ASAFieldLevel10Name] = 'Unknown Account Subaccount', -- [ASAFieldLevel10Name]	
    [ASAFieldLevel10Unary] = 1,                           -- [ASAFieldLevel10Unary]	
    [ASAFieldLevel10Sort] = 99999,                        -- [ASAFieldLevel10Sort]
    [ASAFieldLevel11ID] = '0000.000000',                  -- [ASAFieldLevel11ID]	
    [ASAFieldLevel11Name] = 'Unknown Account Subaccount', -- [ASAFieldLevel11Name]	
    [ASAFieldLevel11Unary] = 1,                           -- [ASAFieldLevel11Unary]	
    [ASAFieldLevel11Sort] = 99999,                        -- [ASAFieldLevel11Sort]
    [ASAFieldLevel12ID] = '0000.000000',                  -- [ASAFieldLevel12ID]	
    [ASAFieldLevel12Name] = 'Unknown Account Subaccount', -- [ASAFieldLevel12Name]	
    [ASAFieldLevel12Unary] = 1,                           -- [ASAFieldLevel12Unary]	
    [ASAFieldLevel12Sort] = 99999                         -- [ASAFieldLevel12Sort]
WHERE AccountSubaccountKey = '-2';"
EXEC dbo.spBING_EDW_Build_DimensionStaticData
"INSERT INTO dbo.EDWAuditLog 
(StartTime,
 StatusCode,
 StatusName,
 TaskName,
 EndTime
)
VALUES
(GETDATE(),
 1,
 'Completed',
 'EDW Dimension BNG-1262 - 2/26/2018',
 GETDATE()
);"
EXEC dbo.spCMS_StagingToEDW_DimAdjustmentReason;
EXEC dbo.spCMS_StagingToEDW_DimScheduleType
EXEC dbo.spCMS_StagingToEDW_DimARAgencyType;
EXEC dbo.spCSS_StagingToEDW_DimARAgencyType;
EXEC dbo.spCMS_StagingToEDW_DimClassroom;
EXEC dbo.spCSS_StagingToEDW_DimClassroom;
EXEC dbo.spCMS_StagingToEDW_DimCreditMemoType;
EXEC dbo.spCSS_StagingToEDW_DimDiscountType;
EXEC dbo.spCMS_StagingToEDW_DimPaymentType
EXEC dbo.spCSS_StagingToEDW_DimProgram
EXEC dbo.spCMS_StagingToEDW_DimSponsor;
EXEC dbo.spCSS_StagingToEDW_DimSponsor;
EXEC dbo.spCMS_StagingToEDW_DimStudent;
"IF EXISTS -- This Package is getting merged before the proc is present, so put in safety net for now...
(
    SELECT *
    FROM sys.objects
    WHERE type = 'P'
          AND name = 'spCMS_StagingToEDW_DimTier'
)
    EXEC dbo.spCMS_StagingToEDW_DimTier;
GO"
EXEC dbo.spGL_StagingGenerate_HrAllOrganizationUnits
EXEC dbo.spGL_StagingToEDW_BridgeCompanyRollup;
EXEC dbo.spGL_StagingToEDW_DimCompany
EXEC dbo.spGL_StagingToEDW_DimCompanyRollup;
EXEC dbo.spHR_StagingGenerate_OrgLeaderAccess
EXEC dbo.spHR_StagingToEDW_BridgeSecurityPersonHRISGroup;
EXEC dbo.spHR_StagingToEDW_BridgeSecurityPersonOrg;
EXEC dbo.spHR_StagingToEDW_DimComplianceItem
EXEC dbo.spHR_StagingToEDW_DimComplianceRating; 
EXEC dbo.spHR_StagingToEDW_DimHRUser;
EXEC dbo.spHR_StagingToEDW_DimLeaveType
EXEC dbo.spHR_StagingToEDW_DimLocation
EXEC dbo.spHR_StagingToEDW_DimOrganization
EXEC dbo.spHR_StagingToEDW_DimPayBasis
EXEC dbo.spHR_StagingToEDW_DimPayGrade;
EXEC dbo.spHR_StagingToEDW_DimPeopleGroup;
EXEC dbo.spHR_StagingToEDW_DimPerformanceRating
EXEC dbo.spHR_StagingToEDW_DimPerson;
EXEC dbo.spHR_StagingToEDW_DimQualificationType;
EXEC dbo.spHR_StagingToEDW_DimSpecialInfo
EXEC dbo.spSalesforce_StagingToEDW_DimLead
EXEC dbo.spSalesForce_StagingToEDW_DimWebCampaign
EXEC dbo.spCMS_BatchLoad_StagingToEDW_FactARBalanceSnapshot;
EXEC dbo.spCSS_BatchLoad_StagingToEDW_FactARBalanceSnapshot;
EXEC dbo.spCMS_StagingToEDW_FactAdjustment;
EXEC dbo.spCMS_BatchLoad_StagingToEDW_FactBilling;
EXEC dbo.spCMS_StagingToEDW_FactSessionEnrollment;
EXEC dbo.spCMS_StagingToEDW_FactTierAssignment;
EXEC dbo.spGL_BatchLoad_StagingToEDW_FactCenterStatSnapshot;
"TRUNCATE TABLE [dbo].[FactNetRevenueConsolidated];

INSERT INTO [dbo].[FactNetRevenueConsolidated] (
 [FiscalWeekNumber], [FiscalWeekEndDate], [CostCenterKey], [CostCenterNumber], [AccountSubaccountKey], [Count], [NetRevenueAmount]
)
SELECT
 [D].[FiscalWeekNumber],
 [D].[FiscalWeekEndDate],
 [MCC].[CostCenterKey],
 [MCC].[CostCenterNumber],
 [F].[AccountSubaccountKey],
 COUNT_BIG(*) AS [Count],
 SUM([F].[NetRevenueAmount]) AS [NetRevenueAmount]
FROM [dbo].[FactNetRevenue] [F]
INNER JOIN [dbo].[DimDate] [D] ON [F].[DateKey] = [D].[DateKey]
INNER JOIN [dbo].[DimCostCenter] [C] ON [F].[CostCenterKey] = [C].[CostCenterKey]
INNER JOIN [dbo].[DimMartCostCenter] [MCC] ON [C].[CostCenterNumber] = [MCC].[CostCenterNumber]
 AND [D].[FullDate] BETWEEN [MCC].[EDWEffectiveFrom] AND [MCC].[EDWEffectiveTo]
GROUP BY
 [D].[FiscalWeekNumber], [D].[FiscalWeekEndDate],
 [MCC].[CostCenterKey], [MCC].[CostCenterNumber],
 [F].[AccountSubaccountKey];

CREATE UNIQUE CLUSTERED INDEX [CIS_FactNetRevenueConsolidated_FiscalWeekNumber_CostCenterKey_AccountSubaccountKey]
    ON [dbo].[FactNetRevenueConsolidated]([FiscalWeekNumber] ASC, [CostCenterKey] ASC, [AccountSubaccountKey] ASC);"
EXEC dbo.spPRO_BatchLoad_StagingToEDW_FactNetRevenue;
EXEC dbo.spCMS_BatchLoad_StagingToEDW_FactNetRevenue;
"EXEC [dbo].[spUpdateStatistics];
EXEC [dbo].[spRecompile];"
EXEC dbo.spHOR_BatchLoad_StagingToEDW_FactNetRevenue;
EXEC dbo.spMISC_BatchLoad_StagingToEDW_FactGLBalancePlanAllocation;
EXEC dbo.spGL_BatchLoad_StagingToEDW_FactGLBalance
EXEC dbo.spHR_StagingToEDW_FactEmployeeAssessment;
EXEC dbo.spHR_StagingToEDW_FactEmployeeAssignment;
EXEC dbo.spHR_StagingToEDW_FactEmployeeCompliance;
EXEC dbo.spHR_StagingToEDW_FactEmployeeLeave;
EXEC dbo.spHR_StagingToEDW_FactEmployeePayRate;
EXEC dbo.spHR_StagingToEDW_FactEmployeePerformance;
EXEC dbo.spHR_StagingToEDW_FactEmployeeQualification;
EXEC dbo.spHR_StagingToEDW_FactPersonSpecialInfo;
EXEC [dbo].[spCMS_BatchLoad_StagingToEDW_FactLifecycleStatusSnapshot];
EXEC dbo.spSalesForce_StagingToEDW_FactLeadPipeline
EXEC dbo.spSalesForce_StagingGenerate_LookupMethodOfContact
